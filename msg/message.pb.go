// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Input
	TransForm
	Vector3
	Quaternion
	Position
	CallFuncInfo
	BasicType
	Error
	ID
	MessageToUser
	LogMessage
	FriendRequest
	SearchKeyWord
	SearchResult
	UserList
	GameCreation
	PemKey
	Empty
	RoomPrepareView
	GameFrame
	EntityInfo
	Skill
	HomeView
	RoomSetting
	RoomList
	RoomInfo
	RoomReview
	RoomContent
	PlayerInfo
	SessionInfo
	Success
	AttrSetting
	SessionKey
	ServerInfo
	LoginInput
	RegistInput
	UserInfo
	UserState
	CharacterSetting
	Character
	Color
	Equipment
	Ability
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageToUser_Type int32

const (
	MessageToUser_ToView     MessageToUser_Type = 0
	MessageToUser_ToDebugLog MessageToUser_Type = 2
)

var MessageToUser_Type_name = map[int32]string{
	0: "ToView",
	2: "ToDebugLog",
}
var MessageToUser_Type_value = map[string]int32{
	"ToView":     0,
	"ToDebugLog": 2,
}

func (x MessageToUser_Type) String() string {
	return proto.EnumName(MessageToUser_Type_name, int32(x))
}
func (MessageToUser_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

type LogMessage_Level int32

const (
	LogMessage_Debug LogMessage_Level = 0
	LogMessage_Info  LogMessage_Level = 1
	LogMessage_Warn  LogMessage_Level = 2
	LogMessage_Fatal LogMessage_Level = 3
)

var LogMessage_Level_name = map[int32]string{
	0: "Debug",
	1: "Info",
	2: "Warn",
	3: "Fatal",
}
var LogMessage_Level_value = map[string]int32{
	"Debug": 0,
	"Info":  1,
	"Warn":  2,
	"Fatal": 3,
}

func (x LogMessage_Level) String() string {
	return proto.EnumName(LogMessage_Level_name, int32(x))
}
func (LogMessage_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

type RoomInfo_RoomStatus int32

const (
	RoomInfo_Preparing RoomInfo_RoomStatus = 0
	RoomInfo_OnPlaying RoomInfo_RoomStatus = 1
	RoomInfo_Ending    RoomInfo_RoomStatus = 2
)

var RoomInfo_RoomStatus_name = map[int32]string{
	0: "Preparing",
	1: "OnPlaying",
	2: "Ending",
}
var RoomInfo_RoomStatus_value = map[string]int32{
	"Preparing": 0,
	"OnPlaying": 1,
	"Ending":    2,
}

func (x RoomInfo_RoomStatus) String() string {
	return proto.EnumName(RoomInfo_RoomStatus_name, int32(x))
}
func (RoomInfo_RoomStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{25, 0} }

type SessionInfo_SessionState int32

const (
	SessionInfo_NoSession   SessionInfo_SessionState = 0
	SessionInfo_Guest       SessionInfo_SessionState = 1
	SessionInfo_UserIdle    SessionInfo_SessionState = 2
	SessionInfo_UserInRoom  SessionInfo_SessionState = 3
	SessionInfo_WaitToStart SessionInfo_SessionState = 4
	SessionInfo_Playing     SessionInfo_SessionState = 5
)

var SessionInfo_SessionState_name = map[int32]string{
	0: "NoSession",
	1: "Guest",
	2: "UserIdle",
	3: "UserInRoom",
	4: "WaitToStart",
	5: "Playing",
}
var SessionInfo_SessionState_value = map[string]int32{
	"NoSession":   0,
	"Guest":       1,
	"UserIdle":    2,
	"UserInRoom":  3,
	"WaitToStart": 4,
	"Playing":     5,
}

func (x SessionInfo_SessionState) String() string {
	return proto.EnumName(SessionInfo_SessionState_name, int32(x))
}
func (SessionInfo_SessionState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 0} }

type SessionInfo_SessionCapacity int32

const (
	SessionInfo_GM         SessionInfo_SessionCapacity = 0
	SessionInfo_RoomMaster SessionInfo_SessionCapacity = 1
	SessionInfo_RoomClient SessionInfo_SessionCapacity = 2
	SessionInfo_None       SessionInfo_SessionCapacity = 3
)

var SessionInfo_SessionCapacity_name = map[int32]string{
	0: "GM",
	1: "RoomMaster",
	2: "RoomClient",
	3: "None",
}
var SessionInfo_SessionCapacity_value = map[string]int32{
	"GM":         0,
	"RoomMaster": 1,
	"RoomClient": 2,
	"None":       3,
}

func (x SessionInfo_SessionCapacity) String() string {
	return proto.EnumName(SessionInfo_SessionCapacity_name, int32(x))
}
func (SessionInfo_SessionCapacity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29, 1}
}

type ServerInfo_Type int32

const (
	ServerInfo_GameServer  ServerInfo_Type = 0
	ServerInfo_AgentServer ServerInfo_Type = 1
)

var ServerInfo_Type_name = map[int32]string{
	0: "GameServer",
	1: "AgentServer",
}
var ServerInfo_Type_value = map[string]int32{
	"GameServer":  0,
	"AgentServer": 1,
}

func (x ServerInfo_Type) String() string {
	return proto.EnumName(ServerInfo_Type_name, int32(x))
}
func (ServerInfo_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{33, 0} }

type UserState_UserStatus int32

const (
	UserState_OnCreating UserState_UserStatus = 0
	UserState_Login      UserState_UserStatus = 1
	UserState_Offline    UserState_UserStatus = 2
	UserState_OnPlaying  UserState_UserStatus = 3
)

var UserState_UserStatus_name = map[int32]string{
	0: "OnCreating",
	1: "Login",
	2: "Offline",
	3: "OnPlaying",
}
var UserState_UserStatus_value = map[string]int32{
	"OnCreating": 0,
	"Login":      1,
	"Offline":    2,
	"OnPlaying":  3,
}

func (x UserState_UserStatus) String() string {
	return proto.EnumName(UserState_UserStatus_name, int32(x))
}
func (UserState_UserStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{37, 0} }

type Input struct {
	UserId     int64   `protobuf:"varint,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	H_Movement float32 `protobuf:"fixed32,2,opt,name=H_Movement,json=hMovement" json:"H_Movement,omitempty"`
	V_Movement float32 `protobuf:"fixed32,3,opt,name=V_Movement,json=vMovement" json:"V_Movement,omitempty"`
	SkillName  string  `protobuf:"bytes,5,opt,name=SkillName,json=skillName" json:"SkillName,omitempty"`
	SkillForce float32 `protobuf:"fixed32,4,opt,name=SkillForce,json=skillForce" json:"SkillForce,omitempty"`
	TimeStamp  int64   `protobuf:"varint,6,opt,name=TimeStamp,json=timeStamp" json:"TimeStamp,omitempty"`
	RunnigNo   int64   `protobuf:"varint,7,opt,name=RunnigNo,json=runnigNo" json:"RunnigNo,omitempty"`
}

func (m *Input) Reset()                    { *m = Input{} }
func (m *Input) String() string            { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()               {}
func (*Input) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Input) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Input) GetH_Movement() float32 {
	if m != nil {
		return m.H_Movement
	}
	return 0
}

func (m *Input) GetV_Movement() float32 {
	if m != nil {
		return m.V_Movement
	}
	return 0
}

func (m *Input) GetSkillName() string {
	if m != nil {
		return m.SkillName
	}
	return ""
}

func (m *Input) GetSkillForce() float32 {
	if m != nil {
		return m.SkillForce
	}
	return 0
}

func (m *Input) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *Input) GetRunnigNo() int64 {
	if m != nil {
		return m.RunnigNo
	}
	return 0
}

type TransForm struct {
	Position *Vector3    `protobuf:"bytes,1,opt,name=Position,json=position" json:"Position,omitempty"`
	Rotation *Quaternion `protobuf:"bytes,2,opt,name=Rotation,json=rotation" json:"Rotation,omitempty"`
}

func (m *TransForm) Reset()                    { *m = TransForm{} }
func (m *TransForm) String() string            { return proto.CompactTextString(m) }
func (*TransForm) ProtoMessage()               {}
func (*TransForm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TransForm) GetPosition() *Vector3 {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *TransForm) GetRotation() *Quaternion {
	if m != nil {
		return m.Rotation
	}
	return nil
}

type Vector3 struct {
	X float64 `protobuf:"fixed64,1,opt,name=X,json=x" json:"X,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=Y,json=y" json:"Y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=Z,json=z" json:"Z,omitempty"`
}

func (m *Vector3) Reset()                    { *m = Vector3{} }
func (m *Vector3) String() string            { return proto.CompactTextString(m) }
func (*Vector3) ProtoMessage()               {}
func (*Vector3) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Vector3) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector3) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vector3) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type Quaternion struct {
	X float64 `protobuf:"fixed64,1,opt,name=X,json=x" json:"X,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=Y,json=y" json:"Y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=Z,json=z" json:"Z,omitempty"`
	W float64 `protobuf:"fixed64,4,opt,name=W,json=w" json:"W,omitempty"`
}

func (m *Quaternion) Reset()                    { *m = Quaternion{} }
func (m *Quaternion) String() string            { return proto.CompactTextString(m) }
func (*Quaternion) ProtoMessage()               {}
func (*Quaternion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Quaternion) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Quaternion) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Quaternion) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *Quaternion) GetW() float64 {
	if m != nil {
		return m.W
	}
	return 0
}

type Position struct {
	PosMap    map[int64]*TransForm `protobuf:"bytes,1,rep,name=PosMap,json=posMap" json:"PosMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TimeStamp int64                `protobuf:"varint,2,opt,name=TimeStamp,json=timeStamp" json:"TimeStamp,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Position) GetPosMap() map[int64]*TransForm {
	if m != nil {
		return m.PosMap
	}
	return nil
}

func (m *Position) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

type CallFuncInfo struct {
	RunnigNo  string                 `protobuf:"bytes,1,opt,name=RunnigNo,json=runnigNo" json:"RunnigNo,omitempty"`
	TargetId  int64                  `protobuf:"varint,2,opt,name=TargetId,json=targetId" json:"TargetId,omitempty"`
	FromId    int64                  `protobuf:"varint,4,opt,name=FromId,json=fromId" json:"FromId,omitempty"`
	TimeStamp int64                  `protobuf:"varint,5,opt,name=TimeStamp,json=timeStamp" json:"TimeStamp,omitempty"`
	Func      string                 `protobuf:"bytes,6,opt,name=Func,json=func" json:"Func,omitempty"`
	FromPos   *TransForm             `protobuf:"bytes,7,opt,name=FromPos,json=fromPos" json:"FromPos,omitempty"`
	ToPos     *TransForm             `protobuf:"bytes,8,opt,name=ToPos,json=toPos" json:"ToPos,omitempty"`
	Value     float32                `protobuf:"fixed32,9,opt,name=Value,json=value" json:"Value,omitempty"`
	Param     []*google_protobuf.Any `protobuf:"bytes,10,rep,name=Param,json=param" json:"Param,omitempty"`
	Params    []*BasicType           `protobuf:"bytes,11,rep,name=Params,json=params" json:"Params,omitempty"`
}

func (m *CallFuncInfo) Reset()                    { *m = CallFuncInfo{} }
func (m *CallFuncInfo) String() string            { return proto.CompactTextString(m) }
func (*CallFuncInfo) ProtoMessage()               {}
func (*CallFuncInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CallFuncInfo) GetRunnigNo() string {
	if m != nil {
		return m.RunnigNo
	}
	return ""
}

func (m *CallFuncInfo) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *CallFuncInfo) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *CallFuncInfo) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *CallFuncInfo) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *CallFuncInfo) GetFromPos() *TransForm {
	if m != nil {
		return m.FromPos
	}
	return nil
}

func (m *CallFuncInfo) GetToPos() *TransForm {
	if m != nil {
		return m.ToPos
	}
	return nil
}

func (m *CallFuncInfo) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CallFuncInfo) GetParam() []*google_protobuf.Any {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *CallFuncInfo) GetParams() []*BasicType {
	if m != nil {
		return m.Params
	}
	return nil
}

type BasicType struct {
	// Types that are valid to be assigned to Data:
	//	*BasicType_S
	//	*BasicType_L
	//	*BasicType_F
	//	*BasicType_I
	//	*BasicType_B
	//	*BasicType_D
	//	*BasicType_A
	Data isBasicType_Data `protobuf_oneof:"Data"`
}

func (m *BasicType) Reset()                    { *m = BasicType{} }
func (m *BasicType) String() string            { return proto.CompactTextString(m) }
func (*BasicType) ProtoMessage()               {}
func (*BasicType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isBasicType_Data interface {
	isBasicType_Data()
}

type BasicType_S struct {
	S string `protobuf:"bytes,1,opt,name=S,json=s,oneof"`
}
type BasicType_L struct {
	L int64 `protobuf:"varint,2,opt,name=L,json=l,oneof"`
}
type BasicType_F struct {
	F float32 `protobuf:"fixed32,3,opt,name=F,json=f,oneof"`
}
type BasicType_I struct {
	I int32 `protobuf:"varint,4,opt,name=I,json=i,oneof"`
}
type BasicType_B struct {
	B bool `protobuf:"varint,5,opt,name=B,json=b,oneof"`
}
type BasicType_D struct {
	D float64 `protobuf:"fixed64,6,opt,name=D,json=d,oneof"`
}
type BasicType_A struct {
	A *google_protobuf.Any `protobuf:"bytes,7,opt,name=A,json=a,oneof"`
}

func (*BasicType_S) isBasicType_Data() {}
func (*BasicType_L) isBasicType_Data() {}
func (*BasicType_F) isBasicType_Data() {}
func (*BasicType_I) isBasicType_Data() {}
func (*BasicType_B) isBasicType_Data() {}
func (*BasicType_D) isBasicType_Data() {}
func (*BasicType_A) isBasicType_Data() {}

func (m *BasicType) GetData() isBasicType_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BasicType) GetS() string {
	if x, ok := m.GetData().(*BasicType_S); ok {
		return x.S
	}
	return ""
}

func (m *BasicType) GetL() int64 {
	if x, ok := m.GetData().(*BasicType_L); ok {
		return x.L
	}
	return 0
}

func (m *BasicType) GetF() float32 {
	if x, ok := m.GetData().(*BasicType_F); ok {
		return x.F
	}
	return 0
}

func (m *BasicType) GetI() int32 {
	if x, ok := m.GetData().(*BasicType_I); ok {
		return x.I
	}
	return 0
}

func (m *BasicType) GetB() bool {
	if x, ok := m.GetData().(*BasicType_B); ok {
		return x.B
	}
	return false
}

func (m *BasicType) GetD() float64 {
	if x, ok := m.GetData().(*BasicType_D); ok {
		return x.D
	}
	return 0
}

func (m *BasicType) GetA() *google_protobuf.Any {
	if x, ok := m.GetData().(*BasicType_A); ok {
		return x.A
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BasicType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BasicType_OneofMarshaler, _BasicType_OneofUnmarshaler, _BasicType_OneofSizer, []interface{}{
		(*BasicType_S)(nil),
		(*BasicType_L)(nil),
		(*BasicType_F)(nil),
		(*BasicType_I)(nil),
		(*BasicType_B)(nil),
		(*BasicType_D)(nil),
		(*BasicType_A)(nil),
	}
}

func _BasicType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BasicType)
	// Data
	switch x := m.Data.(type) {
	case *BasicType_S:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.S)
	case *BasicType_L:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.L))
	case *BasicType_F:
		b.EncodeVarint(3<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.F)))
	case *BasicType_I:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.I))
	case *BasicType_B:
		t := uint64(0)
		if x.B {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *BasicType_D:
		b.EncodeVarint(6<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.D))
	case *BasicType_A:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.A); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BasicType.Data has unexpected type %T", x)
	}
	return nil
}

func _BasicType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BasicType)
	switch tag {
	case 1: // Data.S
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &BasicType_S{x}
		return true, err
	case 2: // Data.L
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &BasicType_L{int64(x)}
		return true, err
	case 3: // Data.F
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Data = &BasicType_F{math.Float32frombits(uint32(x))}
		return true, err
	case 4: // Data.I
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &BasicType_I{int32(x)}
		return true, err
	case 5: // Data.B
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &BasicType_B{x != 0}
		return true, err
	case 6: // Data.D
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Data = &BasicType_D{math.Float64frombits(x)}
		return true, err
	case 7: // Data.A
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.Data = &BasicType_A{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BasicType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BasicType)
	// Data
	switch x := m.Data.(type) {
	case *BasicType_S:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.S)))
		n += len(x.S)
	case *BasicType_L:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.L))
	case *BasicType_F:
		n += proto.SizeVarint(3<<3 | proto.WireFixed32)
		n += 4
	case *BasicType_I:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.I))
	case *BasicType_B:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case *BasicType_D:
		n += proto.SizeVarint(6<<3 | proto.WireFixed64)
		n += 8
	case *BasicType_A:
		s := proto.Size(x.A)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Error struct {
	ErrType  string `protobuf:"bytes,1,opt,name=ErrType,json=errType" json:"ErrType,omitempty"`
	ErrMsg   string `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	RunnigNo string `protobuf:"bytes,3,opt,name=RunnigNo,json=runnigNo" json:"RunnigNo,omitempty"`
	FromId   int64  `protobuf:"varint,4,opt,name=FromId,json=fromId" json:"FromId,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Error) GetErrType() string {
	if m != nil {
		return m.ErrType
	}
	return ""
}

func (m *Error) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *Error) GetRunnigNo() string {
	if m != nil {
		return m.RunnigNo
	}
	return ""
}

func (m *Error) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

type ID struct {
	Value int64 `protobuf:"varint,1,opt,name=Value,json=value" json:"Value,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ID) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type MessageToUser struct {
	MsgType MessageToUser_Type `protobuf:"varint,1,opt,name=MsgType,json=msgType,enum=msg.MessageToUser_Type" json:"MsgType,omitempty"`
	Context string             `protobuf:"bytes,2,opt,name=Context,json=context" json:"Context,omitempty"`
}

func (m *MessageToUser) Reset()                    { *m = MessageToUser{} }
func (m *MessageToUser) String() string            { return proto.CompactTextString(m) }
func (*MessageToUser) ProtoMessage()               {}
func (*MessageToUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MessageToUser) GetMsgType() MessageToUser_Type {
	if m != nil {
		return m.MsgType
	}
	return MessageToUser_ToView
}

func (m *MessageToUser) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

type LogMessage struct {
	LogLevel LogMessage_Level `protobuf:"varint,1,opt,name=LogLevel,json=logLevel,enum=msg.LogMessage_Level" json:"LogLevel,omitempty"`
	Context  string           `protobuf:"bytes,2,opt,name=Context,json=context" json:"Context,omitempty"`
}

func (m *LogMessage) Reset()                    { *m = LogMessage{} }
func (m *LogMessage) String() string            { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()               {}
func (*LogMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LogMessage) GetLogLevel() LogMessage_Level {
	if m != nil {
		return m.LogLevel
	}
	return LogMessage_Debug
}

func (m *LogMessage) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

type FriendRequest struct {
	UserId   int64  `protobuf:"varint,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName,json=userName" json:"UserName,omitempty"`
}

func (m *FriendRequest) Reset()                    { *m = FriendRequest{} }
func (m *FriendRequest) String() string            { return proto.CompactTextString(m) }
func (*FriendRequest) ProtoMessage()               {}
func (*FriendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FriendRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type SearchKeyWord struct {
	Value string `protobuf:"bytes,1,opt,name=Value,json=value" json:"Value,omitempty"`
}

func (m *SearchKeyWord) Reset()                    { *m = SearchKeyWord{} }
func (m *SearchKeyWord) String() string            { return proto.CompactTextString(m) }
func (*SearchKeyWord) ProtoMessage()               {}
func (*SearchKeyWord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SearchKeyWord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SearchResult struct {
	List []*UserInfo `protobuf:"bytes,1,rep,name=List,json=list" json:"List,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SearchResult) GetList() []*UserInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type UserList struct {
	UserInfos []*UserInfo `protobuf:"bytes,1,rep,name=userInfos" json:"userInfos,omitempty"`
}

func (m *UserList) Reset()                    { *m = UserList{} }
func (m *UserList) String() string            { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()               {}
func (*UserList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UserList) GetUserInfos() []*UserInfo {
	if m != nil {
		return m.UserInfos
	}
	return nil
}

type GameCreation struct {
	RoomInfo       *RoomInfo      `protobuf:"bytes,1,opt,name=RoomInfo,json=roomInfo" json:"RoomInfo,omitempty"`
	PlayerSessions []*SessionInfo `protobuf:"bytes,2,rep,name=PlayerSessions,json=playerSessions" json:"PlayerSessions,omitempty"`
}

func (m *GameCreation) Reset()                    { *m = GameCreation{} }
func (m *GameCreation) String() string            { return proto.CompactTextString(m) }
func (*GameCreation) ProtoMessage()               {}
func (*GameCreation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GameCreation) GetRoomInfo() *RoomInfo {
	if m != nil {
		return m.RoomInfo
	}
	return nil
}

func (m *GameCreation) GetPlayerSessions() []*SessionInfo {
	if m != nil {
		return m.PlayerSessions
	}
	return nil
}

type PemKey struct {
	TLS string `protobuf:"bytes,1,opt,name=TLS,json=tLS" json:"TLS,omitempty"`
	SSL string `protobuf:"bytes,2,opt,name=SSL,json=sSL" json:"SSL,omitempty"`
}

func (m *PemKey) Reset()                    { *m = PemKey{} }
func (m *PemKey) String() string            { return proto.CompactTextString(m) }
func (*PemKey) ProtoMessage()               {}
func (*PemKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PemKey) GetTLS() string {
	if m != nil {
		return m.TLS
	}
	return ""
}

func (m *PemKey) GetSSL() string {
	if m != nil {
		return m.SSL
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type RoomPrepareView struct {
}

func (m *RoomPrepareView) Reset()                    { *m = RoomPrepareView{} }
func (m *RoomPrepareView) String() string            { return proto.CompactTextString(m) }
func (*RoomPrepareView) ProtoMessage()               {}
func (*RoomPrepareView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type GameFrame struct {
	Entitys map[string]*EntityInfo `protobuf:"bytes,1,rep,name=Entitys,json=entitys" json:"Entitys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GameFrame) Reset()                    { *m = GameFrame{} }
func (m *GameFrame) String() string            { return proto.CompactTextString(m) }
func (*GameFrame) ProtoMessage()               {}
func (*GameFrame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GameFrame) GetEntitys() map[string]*EntityInfo {
	if m != nil {
		return m.Entitys
	}
	return nil
}

type EntityInfo struct {
	Uuid        int64      `protobuf:"varint,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	TeamNo      int32      `protobuf:"varint,4,opt,name=TeamNo,json=teamNo" json:"TeamNo,omitempty"`
	TransForm   *TransForm `protobuf:"bytes,2,opt,name=TransForm,json=transForm" json:"TransForm,omitempty"`
	CharacterId int64      `protobuf:"varint,3,opt,name=CharacterId,json=characterId" json:"CharacterId,omitempty"`
	ActiveSkill *Skill     `protobuf:"bytes,5,opt,name=ActiveSkill,json=activeSkill" json:"ActiveSkill,omitempty"`
	Motion      string     `protobuf:"bytes,6,opt,name=Motion,json=motion" json:"Motion,omitempty"`
}

func (m *EntityInfo) Reset()                    { *m = EntityInfo{} }
func (m *EntityInfo) String() string            { return proto.CompactTextString(m) }
func (*EntityInfo) ProtoMessage()               {}
func (*EntityInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *EntityInfo) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *EntityInfo) GetTeamNo() int32 {
	if m != nil {
		return m.TeamNo
	}
	return 0
}

func (m *EntityInfo) GetTransForm() *TransForm {
	if m != nil {
		return m.TransForm
	}
	return nil
}

func (m *EntityInfo) GetCharacterId() int64 {
	if m != nil {
		return m.CharacterId
	}
	return 0
}

func (m *EntityInfo) GetActiveSkill() *Skill {
	if m != nil {
		return m.ActiveSkill
	}
	return nil
}

func (m *EntityInfo) GetMotion() string {
	if m != nil {
		return m.Motion
	}
	return ""
}

type Skill struct {
	Active bool    `protobuf:"varint,1,opt,name=Active,json=active" json:"Active,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Value  float32 `protobuf:"fixed32,3,opt,name=Value,json=value" json:"Value,omitempty"`
}

func (m *Skill) Reset()                    { *m = Skill{} }
func (m *Skill) String() string            { return proto.CompactTextString(m) }
func (*Skill) ProtoMessage()               {}
func (*Skill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Skill) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Skill) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Skill) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type HomeView struct {
}

func (m *HomeView) Reset()                    { *m = HomeView{} }
func (m *HomeView) String() string            { return proto.CompactTextString(m) }
func (*HomeView) ProtoMessage()               {}
func (*HomeView) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type RoomSetting struct {
	MaxPlayer int32  `protobuf:"varint,1,opt,name=MaxPlayer,json=maxPlayer" json:"MaxPlayer,omitempty"`
	GameType  string `protobuf:"bytes,2,opt,name=GameType,json=gameType" json:"GameType,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *RoomSetting) Reset()                    { *m = RoomSetting{} }
func (m *RoomSetting) String() string            { return proto.CompactTextString(m) }
func (*RoomSetting) ProtoMessage()               {}
func (*RoomSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RoomSetting) GetMaxPlayer() int32 {
	if m != nil {
		return m.MaxPlayer
	}
	return 0
}

func (m *RoomSetting) GetGameType() string {
	if m != nil {
		return m.GameType
	}
	return ""
}

func (m *RoomSetting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RoomList struct {
	Item []*RoomReview `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
}

func (m *RoomList) Reset()                    { *m = RoomList{} }
func (m *RoomList) String() string            { return proto.CompactTextString(m) }
func (*RoomList) ProtoMessage()               {}
func (*RoomList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RoomList) GetItem() []*RoomReview {
	if m != nil {
		return m.Item
	}
	return nil
}

type RoomInfo struct {
	Uuid            int64               `protobuf:"varint,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	Name            string              `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	GameType        string              `protobuf:"bytes,3,opt,name=GameType,json=gameType" json:"GameType,omitempty"`
	OwnerUuid       int64               `protobuf:"varint,4,opt,name=OwnerUuid,json=ownerUuid" json:"OwnerUuid,omitempty"`
	UserInRoom      map[int64]*UserInfo `protobuf:"bytes,5,rep,name=UserInRoom,json=userInRoom" json:"UserInRoom,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReadyUser       map[int64]bool      `protobuf:"bytes,6,rep,name=ReadyUser,json=readyUser" json:"ReadyUser,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Status          RoomInfo_RoomStatus `protobuf:"varint,7,opt,name=Status,json=status,enum=msg.RoomInfo_RoomStatus" json:"Status,omitempty"`
	LeftMilliSecond int64               `protobuf:"varint,8,opt,name=LeftMilliSecond,json=leftMilliSecond" json:"LeftMilliSecond,omitempty"`
}

func (m *RoomInfo) Reset()                    { *m = RoomInfo{} }
func (m *RoomInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomInfo) ProtoMessage()               {}
func (*RoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *RoomInfo) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *RoomInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomInfo) GetGameType() string {
	if m != nil {
		return m.GameType
	}
	return ""
}

func (m *RoomInfo) GetOwnerUuid() int64 {
	if m != nil {
		return m.OwnerUuid
	}
	return 0
}

func (m *RoomInfo) GetUserInRoom() map[int64]*UserInfo {
	if m != nil {
		return m.UserInRoom
	}
	return nil
}

func (m *RoomInfo) GetReadyUser() map[int64]bool {
	if m != nil {
		return m.ReadyUser
	}
	return nil
}

func (m *RoomInfo) GetStatus() RoomInfo_RoomStatus {
	if m != nil {
		return m.Status
	}
	return RoomInfo_Preparing
}

func (m *RoomInfo) GetLeftMilliSecond() int64 {
	if m != nil {
		return m.LeftMilliSecond
	}
	return 0
}

type RoomReview struct {
	Uuid         int64  `protobuf:"varint,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	GameType     string `protobuf:"bytes,3,opt,name=GameType,json=gameType" json:"GameType,omitempty"`
	MaxPlayer    int32  `protobuf:"varint,4,opt,name=MaxPlayer,json=maxPlayer" json:"MaxPlayer,omitempty"`
	InRoomPlayer int32  `protobuf:"varint,5,opt,name=InRoomPlayer,json=inRoomPlayer" json:"InRoomPlayer,omitempty"`
}

func (m *RoomReview) Reset()                    { *m = RoomReview{} }
func (m *RoomReview) String() string            { return proto.CompactTextString(m) }
func (*RoomReview) ProtoMessage()               {}
func (*RoomReview) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *RoomReview) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *RoomReview) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomReview) GetGameType() string {
	if m != nil {
		return m.GameType
	}
	return ""
}

func (m *RoomReview) GetMaxPlayer() int32 {
	if m != nil {
		return m.MaxPlayer
	}
	return 0
}

func (m *RoomReview) GetInRoomPlayer() int32 {
	if m != nil {
		return m.InRoomPlayer
	}
	return 0
}

type RoomContent struct {
	Uuid    int64                  `protobuf:"varint,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	Players map[string]*PlayerInfo `protobuf:"bytes,2,rep,name=Players,json=players" json:"Players,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RoomContent) Reset()                    { *m = RoomContent{} }
func (m *RoomContent) String() string            { return proto.CompactTextString(m) }
func (*RoomContent) ProtoMessage()               {}
func (*RoomContent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *RoomContent) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *RoomContent) GetPlayers() map[string]*PlayerInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

type PlayerInfo struct {
	CharacterCode int64      `protobuf:"varint,1,opt,name=CharacterCode,json=characterCode" json:"CharacterCode,omitempty"`
	TeamNo        int32      `protobuf:"varint,2,opt,name=TeamNo,json=teamNo" json:"TeamNo,omitempty"`
	Character     *Character `protobuf:"bytes,4,opt,name=Character,json=character" json:"Character,omitempty"`
	UserId        int64      `protobuf:"varint,5,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	UserName      string     `protobuf:"bytes,6,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	IsReady       bool       `protobuf:"varint,7,opt,name=IsReady,json=isReady" json:"IsReady,omitempty"`
}

func (m *PlayerInfo) Reset()                    { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()               {}
func (*PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *PlayerInfo) GetCharacterCode() int64 {
	if m != nil {
		return m.CharacterCode
	}
	return 0
}

func (m *PlayerInfo) GetTeamNo() int32 {
	if m != nil {
		return m.TeamNo
	}
	return 0
}

func (m *PlayerInfo) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *PlayerInfo) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PlayerInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *PlayerInfo) GetIsReady() bool {
	if m != nil {
		return m.IsReady
	}
	return false
}

type SessionInfo struct {
	State    SessionInfo_SessionState    `protobuf:"varint,1,opt,name=State,json=state,enum=msg.SessionInfo_SessionState" json:"State,omitempty"`
	Capacity SessionInfo_SessionCapacity `protobuf:"varint,2,opt,name=Capacity,json=capacity,enum=msg.SessionInfo_SessionCapacity" json:"Capacity,omitempty"`
	Uuid     int64                       `protobuf:"varint,5,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	Key      *SessionKey                 `protobuf:"bytes,3,opt,name=Key,json=key" json:"Key,omitempty"`
	UserInfo *UserInfo                   `protobuf:"bytes,4,opt,name=UserInfo,json=userInfo" json:"UserInfo,omitempty"`
}

func (m *SessionInfo) Reset()                    { *m = SessionInfo{} }
func (m *SessionInfo) String() string            { return proto.CompactTextString(m) }
func (*SessionInfo) ProtoMessage()               {}
func (*SessionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *SessionInfo) GetState() SessionInfo_SessionState {
	if m != nil {
		return m.State
	}
	return SessionInfo_NoSession
}

func (m *SessionInfo) GetCapacity() SessionInfo_SessionCapacity {
	if m != nil {
		return m.Capacity
	}
	return SessionInfo_GM
}

func (m *SessionInfo) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *SessionInfo) GetKey() *SessionKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SessionInfo) GetUserInfo() *UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type Success struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *Success) Reset()                    { *m = Success{} }
func (m *Success) String() string            { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()               {}
func (*Success) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *Success) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type AttrSetting struct {
	Method string `protobuf:"bytes,1,opt,name=Method,json=method" json:"Method,omitempty"`
	Key    string `protobuf:"bytes,2,opt,name=Key,json=key" json:"Key,omitempty"`
	Value  string `protobuf:"bytes,3,opt,name=Value,json=value" json:"Value,omitempty"`
}

func (m *AttrSetting) Reset()                    { *m = AttrSetting{} }
func (m *AttrSetting) String() string            { return proto.CompactTextString(m) }
func (*AttrSetting) ProtoMessage()               {}
func (*AttrSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *AttrSetting) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *AttrSetting) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AttrSetting) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SessionKey struct {
	Value string `protobuf:"bytes,1,opt,name=Value,json=value" json:"Value,omitempty"`
}

func (m *SessionKey) Reset()                    { *m = SessionKey{} }
func (m *SessionKey) String() string            { return proto.CompactTextString(m) }
func (*SessionKey) ProtoMessage()               {}
func (*SessionKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *SessionKey) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ServerInfo struct {
	ServerType ServerInfo_Type `protobuf:"varint,1,opt,name=ServerType,json=serverType,enum=msg.ServerInfo_Type" json:"ServerType,omitempty"`
	PublicKey  string          `protobuf:"bytes,2,opt,name=PublicKey,json=publicKey" json:"PublicKey,omitempty"`
	Port       string          `protobuf:"bytes,3,opt,name=Port,json=port" json:"Port,omitempty"`
	Addr       string          `protobuf:"bytes,4,opt,name=Addr,json=addr" json:"Addr,omitempty"`
	SessionKey *SessionKey     `protobuf:"bytes,5,opt,name=SessionKey,json=sessionKey" json:"SessionKey,omitempty"`
	MaxConn    int64           `protobuf:"varint,6,opt,name=MaxConn,json=maxConn" json:"MaxConn,omitempty"`
	NowConn    int64           `protobuf:"varint,7,opt,name=NowConn,json=nowConn" json:"NowConn,omitempty"`
}

func (m *ServerInfo) Reset()                    { *m = ServerInfo{} }
func (m *ServerInfo) String() string            { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()               {}
func (*ServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ServerInfo) GetServerType() ServerInfo_Type {
	if m != nil {
		return m.ServerType
	}
	return ServerInfo_GameServer
}

func (m *ServerInfo) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *ServerInfo) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *ServerInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ServerInfo) GetSessionKey() *SessionKey {
	if m != nil {
		return m.SessionKey
	}
	return nil
}

func (m *ServerInfo) GetMaxConn() int64 {
	if m != nil {
		return m.MaxConn
	}
	return 0
}

func (m *ServerInfo) GetNowConn() int64 {
	if m != nil {
		return m.NowConn
	}
	return 0
}

type LoginInput struct {
	UserName string `protobuf:"bytes,1,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	Pswd     string `protobuf:"bytes,2,opt,name=Pswd,json=pswd" json:"Pswd,omitempty"`
}

func (m *LoginInput) Reset()                    { *m = LoginInput{} }
func (m *LoginInput) String() string            { return proto.CompactTextString(m) }
func (*LoginInput) ProtoMessage()               {}
func (*LoginInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *LoginInput) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LoginInput) GetPswd() string {
	if m != nil {
		return m.Pswd
	}
	return ""
}

type RegistInput struct {
	UserName string `protobuf:"bytes,1,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	Pswd     string `protobuf:"bytes,2,opt,name=Pswd,json=pswd" json:"Pswd,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=Email,json=email" json:"Email,omitempty"`
}

func (m *RegistInput) Reset()                    { *m = RegistInput{} }
func (m *RegistInput) String() string            { return proto.CompactTextString(m) }
func (*RegistInput) ProtoMessage()               {}
func (*RegistInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *RegistInput) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *RegistInput) GetPswd() string {
	if m != nil {
		return m.Pswd
	}
	return ""
}

func (m *RegistInput) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UserInfo struct {
	UserName      string               `protobuf:"bytes,1,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	Uuid          int64                `protobuf:"varint,2,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	OwnCharacter  map[int64]*Character `protobuf:"bytes,3,rep,name=OwnCharacter,json=ownCharacter" json:"OwnCharacter,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UsedCharacter int64                `protobuf:"varint,4,opt,name=UsedCharacter,json=usedCharacter" json:"UsedCharacter,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *UserInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserInfo) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *UserInfo) GetOwnCharacter() map[int64]*Character {
	if m != nil {
		return m.OwnCharacter
	}
	return nil
}

func (m *UserInfo) GetUsedCharacter() int64 {
	if m != nil {
		return m.UsedCharacter
	}
	return 0
}

type UserState struct {
	State UserState_UserStatus `protobuf:"varint,1,opt,name=State,json=state,enum=msg.UserState_UserStatus" json:"State,omitempty"`
}

func (m *UserState) Reset()                    { *m = UserState{} }
func (m *UserState) String() string            { return proto.CompactTextString(m) }
func (*UserState) ProtoMessage()               {}
func (*UserState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *UserState) GetState() UserState_UserStatus {
	if m != nil {
		return m.State
	}
	return UserState_OnCreating
}

type CharacterSetting struct {
	Uuid       int64        `protobuf:"varint,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	Color      *Color       `protobuf:"bytes,2,opt,name=Color,json=color" json:"Color,omitempty"`
	Equipments []*Equipment `protobuf:"bytes,8,rep,name=Equipments,json=equipments" json:"Equipments,omitempty"`
}

func (m *CharacterSetting) Reset()                    { *m = CharacterSetting{} }
func (m *CharacterSetting) String() string            { return proto.CompactTextString(m) }
func (*CharacterSetting) ProtoMessage()               {}
func (*CharacterSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CharacterSetting) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *CharacterSetting) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *CharacterSetting) GetEquipments() []*Equipment {
	if m != nil {
		return m.Equipments
	}
	return nil
}

// character 即是沒有實體之腳色
// entity 則藉由character來初始化
type Character struct {
	Uuid          int64   `protobuf:"varint,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	CharacterType string  `protobuf:"bytes,2,opt,name=CharacterType,json=characterType" json:"CharacterType,omitempty"`
	Name          string  `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name,omitempty"`
	Color         *Color  `protobuf:"bytes,4,opt,name=Color,json=color" json:"Color,omitempty"`
	Level         int32   `protobuf:"varint,5,opt,name=Level,json=level" json:"Level,omitempty"`
	Exp           int32   `protobuf:"varint,6,opt,name=Exp,json=exp" json:"Exp,omitempty"`
	MaxHealth     float32 `protobuf:"fixed32,10,opt,name=MaxHealth,json=maxHealth" json:"MaxHealth,omitempty"`
	// 基本能力值
	Ability    *Ability     `protobuf:"bytes,7,opt,name=Ability,json=ability" json:"Ability,omitempty"`
	Equipments []*Equipment `protobuf:"bytes,8,rep,name=Equipments,json=equipments" json:"Equipments,omitempty"`
	// 戰鬥時添加的狀態
	Attr map[string]float32 `protobuf:"bytes,9,rep,name=Attr,json=attr" json:"Attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
}

func (m *Character) Reset()                    { *m = Character{} }
func (m *Character) String() string            { return proto.CompactTextString(m) }
func (*Character) ProtoMessage()               {}
func (*Character) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *Character) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *Character) GetCharacterType() string {
	if m != nil {
		return m.CharacterType
	}
	return ""
}

func (m *Character) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Character) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *Character) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Character) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *Character) GetMaxHealth() float32 {
	if m != nil {
		return m.MaxHealth
	}
	return 0
}

func (m *Character) GetAbility() *Ability {
	if m != nil {
		return m.Ability
	}
	return nil
}

func (m *Character) GetEquipments() []*Equipment {
	if m != nil {
		return m.Equipments
	}
	return nil
}

func (m *Character) GetAttr() map[string]float32 {
	if m != nil {
		return m.Attr
	}
	return nil
}

type Color struct {
	R int32 `protobuf:"varint,1,opt,name=R,json=r" json:"R,omitempty"`
	G int32 `protobuf:"varint,2,opt,name=G,json=g" json:"G,omitempty"`
	B int32 `protobuf:"varint,3,opt,name=B,json=b" json:"B,omitempty"`
}

func (m *Color) Reset()                    { *m = Color{} }
func (m *Color) String() string            { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()               {}
func (*Color) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Color) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *Color) GetG() int32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *Color) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type Equipment struct {
	Name      string   `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Type      string   `protobuf:"bytes,2,opt,name=Type,json=type" json:"Type,omitempty"`
	Uuid      int64    `protobuf:"varint,3,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	Colors    []*Color `protobuf:"bytes,4,rep,name=Colors,json=colors" json:"Colors,omitempty"`
	Ability   *Ability `protobuf:"bytes,5,opt,name=Ability,json=ability" json:"Ability,omitempty"`
	CD        int32    `protobuf:"varint,6,opt,name=CD,json=cD" json:"CD,omitempty"`
	Usable    int32    `protobuf:"varint,7,opt,name=Usable,json=usable" json:"Usable,omitempty"`
	Inventory int32    `protobuf:"varint,8,opt,name=Inventory,json=inventory" json:"Inventory,omitempty"`
}

func (m *Equipment) Reset()                    { *m = Equipment{} }
func (m *Equipment) String() string            { return proto.CompactTextString(m) }
func (*Equipment) ProtoMessage()               {}
func (*Equipment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *Equipment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Equipment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Equipment) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *Equipment) GetColors() []*Color {
	if m != nil {
		return m.Colors
	}
	return nil
}

func (m *Equipment) GetAbility() *Ability {
	if m != nil {
		return m.Ability
	}
	return nil
}

func (m *Equipment) GetCD() int32 {
	if m != nil {
		return m.CD
	}
	return 0
}

func (m *Equipment) GetUsable() int32 {
	if m != nil {
		return m.Usable
	}
	return 0
}

func (m *Equipment) GetInventory() int32 {
	if m != nil {
		return m.Inventory
	}
	return 0
}

type Ability struct {
	ATK  int32   `protobuf:"varint,1,opt,name=ATK,json=aTK" json:"ATK,omitempty"`
	DEF  int32   `protobuf:"varint,2,opt,name=DEF,json=dEF" json:"DEF,omitempty"`
	SPD  float32 `protobuf:"fixed32,3,opt,name=SPD,json=sPD" json:"SPD,omitempty"`
	TSPD float32 `protobuf:"fixed32,6,opt,name=TSPD,json=tSPD" json:"TSPD,omitempty"`
	MP   int32   `protobuf:"varint,4,opt,name=MP,json=mP" json:"MP,omitempty"`
	MAKT int32   `protobuf:"varint,5,opt,name=MAKT,json=mAKT" json:"MAKT,omitempty"`
}

func (m *Ability) Reset()                    { *m = Ability{} }
func (m *Ability) String() string            { return proto.CompactTextString(m) }
func (*Ability) ProtoMessage()               {}
func (*Ability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *Ability) GetATK() int32 {
	if m != nil {
		return m.ATK
	}
	return 0
}

func (m *Ability) GetDEF() int32 {
	if m != nil {
		return m.DEF
	}
	return 0
}

func (m *Ability) GetSPD() float32 {
	if m != nil {
		return m.SPD
	}
	return 0
}

func (m *Ability) GetTSPD() float32 {
	if m != nil {
		return m.TSPD
	}
	return 0
}

func (m *Ability) GetMP() int32 {
	if m != nil {
		return m.MP
	}
	return 0
}

func (m *Ability) GetMAKT() int32 {
	if m != nil {
		return m.MAKT
	}
	return 0
}

func init() {
	proto.RegisterType((*Input)(nil), "msg.Input")
	proto.RegisterType((*TransForm)(nil), "msg.TransForm")
	proto.RegisterType((*Vector3)(nil), "msg.Vector3")
	proto.RegisterType((*Quaternion)(nil), "msg.Quaternion")
	proto.RegisterType((*Position)(nil), "msg.Position")
	proto.RegisterType((*CallFuncInfo)(nil), "msg.CallFuncInfo")
	proto.RegisterType((*BasicType)(nil), "msg.BasicType")
	proto.RegisterType((*Error)(nil), "msg.Error")
	proto.RegisterType((*ID)(nil), "msg.ID")
	proto.RegisterType((*MessageToUser)(nil), "msg.MessageToUser")
	proto.RegisterType((*LogMessage)(nil), "msg.LogMessage")
	proto.RegisterType((*FriendRequest)(nil), "msg.FriendRequest")
	proto.RegisterType((*SearchKeyWord)(nil), "msg.SearchKeyWord")
	proto.RegisterType((*SearchResult)(nil), "msg.SearchResult")
	proto.RegisterType((*UserList)(nil), "msg.UserList")
	proto.RegisterType((*GameCreation)(nil), "msg.GameCreation")
	proto.RegisterType((*PemKey)(nil), "msg.PemKey")
	proto.RegisterType((*Empty)(nil), "msg.Empty")
	proto.RegisterType((*RoomPrepareView)(nil), "msg.RoomPrepareView")
	proto.RegisterType((*GameFrame)(nil), "msg.GameFrame")
	proto.RegisterType((*EntityInfo)(nil), "msg.EntityInfo")
	proto.RegisterType((*Skill)(nil), "msg.Skill")
	proto.RegisterType((*HomeView)(nil), "msg.HomeView")
	proto.RegisterType((*RoomSetting)(nil), "msg.RoomSetting")
	proto.RegisterType((*RoomList)(nil), "msg.RoomList")
	proto.RegisterType((*RoomInfo)(nil), "msg.RoomInfo")
	proto.RegisterType((*RoomReview)(nil), "msg.RoomReview")
	proto.RegisterType((*RoomContent)(nil), "msg.RoomContent")
	proto.RegisterType((*PlayerInfo)(nil), "msg.PlayerInfo")
	proto.RegisterType((*SessionInfo)(nil), "msg.SessionInfo")
	proto.RegisterType((*Success)(nil), "msg.Success")
	proto.RegisterType((*AttrSetting)(nil), "msg.AttrSetting")
	proto.RegisterType((*SessionKey)(nil), "msg.SessionKey")
	proto.RegisterType((*ServerInfo)(nil), "msg.ServerInfo")
	proto.RegisterType((*LoginInput)(nil), "msg.LoginInput")
	proto.RegisterType((*RegistInput)(nil), "msg.RegistInput")
	proto.RegisterType((*UserInfo)(nil), "msg.UserInfo")
	proto.RegisterType((*UserState)(nil), "msg.UserState")
	proto.RegisterType((*CharacterSetting)(nil), "msg.CharacterSetting")
	proto.RegisterType((*Character)(nil), "msg.Character")
	proto.RegisterType((*Color)(nil), "msg.Color")
	proto.RegisterType((*Equipment)(nil), "msg.Equipment")
	proto.RegisterType((*Ability)(nil), "msg.Ability")
	proto.RegisterEnum("msg.MessageToUser_Type", MessageToUser_Type_name, MessageToUser_Type_value)
	proto.RegisterEnum("msg.LogMessage_Level", LogMessage_Level_name, LogMessage_Level_value)
	proto.RegisterEnum("msg.RoomInfo_RoomStatus", RoomInfo_RoomStatus_name, RoomInfo_RoomStatus_value)
	proto.RegisterEnum("msg.SessionInfo_SessionState", SessionInfo_SessionState_name, SessionInfo_SessionState_value)
	proto.RegisterEnum("msg.SessionInfo_SessionCapacity", SessionInfo_SessionCapacity_name, SessionInfo_SessionCapacity_value)
	proto.RegisterEnum("msg.ServerInfo_Type", ServerInfo_Type_name, ServerInfo_Type_value)
	proto.RegisterEnum("msg.UserState_UserStatus", UserState_UserStatus_name, UserState_UserStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClientToGame service

type ClientToGameClient interface {
	// roomManager
	// entityManager
	PlayerInput(ctx context.Context, opts ...grpc.CallOption) (ClientToGame_PlayerInputClient, error)
	// View
	UpdateGameFrame(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientToGame_UpdateGameFrameClient, error)
	Pipe(ctx context.Context, opts ...grpc.CallOption) (ClientToGame_PipeClient, error)
}

type clientToGameClient struct {
	cc *grpc.ClientConn
}

func NewClientToGameClient(cc *grpc.ClientConn) ClientToGameClient {
	return &clientToGameClient{cc}
}

func (c *clientToGameClient) PlayerInput(ctx context.Context, opts ...grpc.CallOption) (ClientToGame_PlayerInputClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClientToGame_serviceDesc.Streams[0], c.cc, "/msg.ClientToGame/PlayerInput", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientToGamePlayerInputClient{stream}
	return x, nil
}

type ClientToGame_PlayerInputClient interface {
	Send(*Input) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type clientToGamePlayerInputClient struct {
	grpc.ClientStream
}

func (x *clientToGamePlayerInputClient) Send(m *Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientToGamePlayerInputClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientToGameClient) UpdateGameFrame(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientToGame_UpdateGameFrameClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClientToGame_serviceDesc.Streams[1], c.cc, "/msg.ClientToGame/UpdateGameFrame", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientToGameUpdateGameFrameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientToGame_UpdateGameFrameClient interface {
	Recv() (*GameFrame, error)
	grpc.ClientStream
}

type clientToGameUpdateGameFrameClient struct {
	grpc.ClientStream
}

func (x *clientToGameUpdateGameFrameClient) Recv() (*GameFrame, error) {
	m := new(GameFrame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientToGameClient) Pipe(ctx context.Context, opts ...grpc.CallOption) (ClientToGame_PipeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClientToGame_serviceDesc.Streams[2], c.cc, "/msg.ClientToGame/Pipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientToGamePipeClient{stream}
	return x, nil
}

type ClientToGame_PipeClient interface {
	Send(*LogMessage) error
	Recv() (*MessageToUser, error)
	grpc.ClientStream
}

type clientToGamePipeClient struct {
	grpc.ClientStream
}

func (x *clientToGamePipeClient) Send(m *LogMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientToGamePipeClient) Recv() (*MessageToUser, error) {
	m := new(MessageToUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClientToGame service

type ClientToGameServer interface {
	// roomManager
	// entityManager
	PlayerInput(ClientToGame_PlayerInputServer) error
	// View
	UpdateGameFrame(*Empty, ClientToGame_UpdateGameFrameServer) error
	Pipe(ClientToGame_PipeServer) error
}

func RegisterClientToGameServer(s *grpc.Server, srv ClientToGameServer) {
	s.RegisterService(&_ClientToGame_serviceDesc, srv)
}

func _ClientToGame_PlayerInput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientToGameServer).PlayerInput(&clientToGamePlayerInputServer{stream})
}

type ClientToGame_PlayerInputServer interface {
	SendAndClose(*Empty) error
	Recv() (*Input, error)
	grpc.ServerStream
}

type clientToGamePlayerInputServer struct {
	grpc.ServerStream
}

func (x *clientToGamePlayerInputServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientToGamePlayerInputServer) Recv() (*Input, error) {
	m := new(Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ClientToGame_UpdateGameFrame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientToGameServer).UpdateGameFrame(m, &clientToGameUpdateGameFrameServer{stream})
}

type ClientToGame_UpdateGameFrameServer interface {
	Send(*GameFrame) error
	grpc.ServerStream
}

type clientToGameUpdateGameFrameServer struct {
	grpc.ServerStream
}

func (x *clientToGameUpdateGameFrameServer) Send(m *GameFrame) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientToGame_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientToGameServer).Pipe(&clientToGamePipeServer{stream})
}

type ClientToGame_PipeServer interface {
	Send(*MessageToUser) error
	Recv() (*LogMessage, error)
	grpc.ServerStream
}

type clientToGamePipeServer struct {
	grpc.ServerStream
}

func (x *clientToGamePipeServer) Send(m *MessageToUser) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientToGamePipeServer) Recv() (*LogMessage, error) {
	m := new(LogMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientToGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.ClientToGame",
	HandlerType: (*ClientToGameServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlayerInput",
			Handler:       _ClientToGame_PlayerInput_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateGameFrame",
			Handler:       _ClientToGame_UpdateGameFrame_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Pipe",
			Handler:       _ClientToGame_Pipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}

// Client API for AgentToGame service

type AgentToGameClient interface {
	// SessionManager
	AquireGameRoom(ctx context.Context, in *GameCreation, opts ...grpc.CallOption) (*PemKey, error)
}

type agentToGameClient struct {
	cc *grpc.ClientConn
}

func NewAgentToGameClient(cc *grpc.ClientConn) AgentToGameClient {
	return &agentToGameClient{cc}
}

func (c *agentToGameClient) AquireGameRoom(ctx context.Context, in *GameCreation, opts ...grpc.CallOption) (*PemKey, error) {
	out := new(PemKey)
	err := grpc.Invoke(ctx, "/msg.AgentToGame/AquireGameRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AgentToGame service

type AgentToGameServer interface {
	// SessionManager
	AquireGameRoom(context.Context, *GameCreation) (*PemKey, error)
}

func RegisterAgentToGameServer(s *grpc.Server, srv AgentToGameServer) {
	s.RegisterService(&_AgentToGame_serviceDesc, srv)
}

func _AgentToGame_AquireGameRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameCreation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentToGameServer).AquireGameRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.AgentToGame/AquireGameRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentToGameServer).AquireGameRoom(ctx, req.(*GameCreation))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentToGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.AgentToGame",
	HandlerType: (*AgentToGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AquireGameRoom",
			Handler:    _AgentToGame_AquireGameRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}

// Client API for ClientToAgent service

type ClientToAgentClient interface {
	AquireSessionKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionKey, error)
	AquireOtherAgent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfo, error)
	// Login
	Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*UserInfo, error)
	CreateAccount(ctx context.Context, in *RegistInput, opts ...grpc.CallOption) (*Error, error)
	// UserSetting
	SetAccount(ctx context.Context, in *AttrSetting, opts ...grpc.CallOption) (*Success, error)
	SetCharacter(ctx context.Context, in *CharacterSetting, opts ...grpc.CallOption) (*Success, error)
	// room
	AquireGameServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfo, error)
	CreateRoom(ctx context.Context, in *RoomSetting, opts ...grpc.CallOption) (*Success, error)
	JoinRoom(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Success, error)
	RoomReady(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Success, error)
	// View
	UpdateRoomContent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientToAgent_UpdateRoomContentClient, error)
	UpdateHome(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientToAgent_UpdateHomeClient, error)
	UpdateRoomList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientToAgent_UpdateRoomListClient, error)
	UpdateUserList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientToAgent_UpdateUserListClient, error)
	// rpc UpdateRoomInfo(SessionKey) returns (stream RoomInfoView) {}
	Pipe(ctx context.Context, opts ...grpc.CallOption) (ClientToAgent_PipeClient, error)
}

type clientToAgentClient struct {
	cc *grpc.ClientConn
}

func NewClientToAgentClient(cc *grpc.ClientConn) ClientToAgentClient {
	return &clientToAgentClient{cc}
}

func (c *clientToAgentClient) AquireSessionKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SessionKey, error) {
	out := new(SessionKey)
	err := grpc.Invoke(ctx, "/msg.ClientToAgent/AquireSessionKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToAgentClient) AquireOtherAgent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := grpc.Invoke(ctx, "/msg.ClientToAgent/AquireOtherAgent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToAgentClient) Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/msg.ClientToAgent/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToAgentClient) CreateAccount(ctx context.Context, in *RegistInput, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := grpc.Invoke(ctx, "/msg.ClientToAgent/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToAgentClient) SetAccount(ctx context.Context, in *AttrSetting, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := grpc.Invoke(ctx, "/msg.ClientToAgent/SetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToAgentClient) SetCharacter(ctx context.Context, in *CharacterSetting, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := grpc.Invoke(ctx, "/msg.ClientToAgent/SetCharacter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToAgentClient) AquireGameServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := grpc.Invoke(ctx, "/msg.ClientToAgent/AquireGameServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToAgentClient) CreateRoom(ctx context.Context, in *RoomSetting, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := grpc.Invoke(ctx, "/msg.ClientToAgent/CreateRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToAgentClient) JoinRoom(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := grpc.Invoke(ctx, "/msg.ClientToAgent/JoinRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToAgentClient) RoomReady(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Success, error) {
	out := new(Success)
	err := grpc.Invoke(ctx, "/msg.ClientToAgent/RoomReady", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToAgentClient) UpdateRoomContent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientToAgent_UpdateRoomContentClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClientToAgent_serviceDesc.Streams[0], c.cc, "/msg.ClientToAgent/UpdateRoomContent", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientToAgentUpdateRoomContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientToAgent_UpdateRoomContentClient interface {
	Recv() (*RoomContent, error)
	grpc.ClientStream
}

type clientToAgentUpdateRoomContentClient struct {
	grpc.ClientStream
}

func (x *clientToAgentUpdateRoomContentClient) Recv() (*RoomContent, error) {
	m := new(RoomContent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientToAgentClient) UpdateHome(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientToAgent_UpdateHomeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClientToAgent_serviceDesc.Streams[1], c.cc, "/msg.ClientToAgent/UpdateHome", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientToAgentUpdateHomeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientToAgent_UpdateHomeClient interface {
	Recv() (*HomeView, error)
	grpc.ClientStream
}

type clientToAgentUpdateHomeClient struct {
	grpc.ClientStream
}

func (x *clientToAgentUpdateHomeClient) Recv() (*HomeView, error) {
	m := new(HomeView)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientToAgentClient) UpdateRoomList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientToAgent_UpdateRoomListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClientToAgent_serviceDesc.Streams[2], c.cc, "/msg.ClientToAgent/UpdateRoomList", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientToAgentUpdateRoomListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientToAgent_UpdateRoomListClient interface {
	Recv() (*RoomList, error)
	grpc.ClientStream
}

type clientToAgentUpdateRoomListClient struct {
	grpc.ClientStream
}

func (x *clientToAgentUpdateRoomListClient) Recv() (*RoomList, error) {
	m := new(RoomList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientToAgentClient) UpdateUserList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ClientToAgent_UpdateUserListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClientToAgent_serviceDesc.Streams[3], c.cc, "/msg.ClientToAgent/UpdateUserList", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientToAgentUpdateUserListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientToAgent_UpdateUserListClient interface {
	Recv() (*UserList, error)
	grpc.ClientStream
}

type clientToAgentUpdateUserListClient struct {
	grpc.ClientStream
}

func (x *clientToAgentUpdateUserListClient) Recv() (*UserList, error) {
	m := new(UserList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientToAgentClient) Pipe(ctx context.Context, opts ...grpc.CallOption) (ClientToAgent_PipeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClientToAgent_serviceDesc.Streams[4], c.cc, "/msg.ClientToAgent/Pipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientToAgentPipeClient{stream}
	return x, nil
}

type ClientToAgent_PipeClient interface {
	Send(*LogMessage) error
	Recv() (*MessageToUser, error)
	grpc.ClientStream
}

type clientToAgentPipeClient struct {
	grpc.ClientStream
}

func (x *clientToAgentPipeClient) Send(m *LogMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientToAgentPipeClient) Recv() (*MessageToUser, error) {
	m := new(MessageToUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClientToAgent service

type ClientToAgentServer interface {
	AquireSessionKey(context.Context, *Empty) (*SessionKey, error)
	AquireOtherAgent(context.Context, *Empty) (*ServerInfo, error)
	// Login
	Login(context.Context, *LoginInput) (*UserInfo, error)
	CreateAccount(context.Context, *RegistInput) (*Error, error)
	// UserSetting
	SetAccount(context.Context, *AttrSetting) (*Success, error)
	SetCharacter(context.Context, *CharacterSetting) (*Success, error)
	// room
	AquireGameServer(context.Context, *Empty) (*ServerInfo, error)
	CreateRoom(context.Context, *RoomSetting) (*Success, error)
	JoinRoom(context.Context, *ID) (*Success, error)
	RoomReady(context.Context, *Empty) (*Success, error)
	// View
	UpdateRoomContent(*Empty, ClientToAgent_UpdateRoomContentServer) error
	UpdateHome(*Empty, ClientToAgent_UpdateHomeServer) error
	UpdateRoomList(*Empty, ClientToAgent_UpdateRoomListServer) error
	UpdateUserList(*Empty, ClientToAgent_UpdateUserListServer) error
	// rpc UpdateRoomInfo(SessionKey) returns (stream RoomInfoView) {}
	Pipe(ClientToAgent_PipeServer) error
}

func RegisterClientToAgentServer(s *grpc.Server, srv ClientToAgentServer) {
	s.RegisterService(&_ClientToAgent_serviceDesc, srv)
}

func _ClientToAgent_AquireSessionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToAgentServer).AquireSessionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ClientToAgent/AquireSessionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToAgentServer).AquireSessionKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToAgent_AquireOtherAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToAgentServer).AquireOtherAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ClientToAgent/AquireOtherAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToAgentServer).AquireOtherAgent(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToAgent_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToAgentServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ClientToAgent/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToAgentServer).Login(ctx, req.(*LoginInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToAgent_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToAgentServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ClientToAgent/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToAgentServer).CreateAccount(ctx, req.(*RegistInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToAgent_SetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttrSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToAgentServer).SetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ClientToAgent/SetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToAgentServer).SetAccount(ctx, req.(*AttrSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToAgent_SetCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToAgentServer).SetCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ClientToAgent/SetCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToAgentServer).SetCharacter(ctx, req.(*CharacterSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToAgent_AquireGameServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToAgentServer).AquireGameServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ClientToAgent/AquireGameServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToAgentServer).AquireGameServer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToAgent_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToAgentServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ClientToAgent/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToAgentServer).CreateRoom(ctx, req.(*RoomSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToAgent_JoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToAgentServer).JoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ClientToAgent/JoinRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToAgentServer).JoinRoom(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToAgent_RoomReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToAgentServer).RoomReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.ClientToAgent/RoomReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToAgentServer).RoomReady(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToAgent_UpdateRoomContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientToAgentServer).UpdateRoomContent(m, &clientToAgentUpdateRoomContentServer{stream})
}

type ClientToAgent_UpdateRoomContentServer interface {
	Send(*RoomContent) error
	grpc.ServerStream
}

type clientToAgentUpdateRoomContentServer struct {
	grpc.ServerStream
}

func (x *clientToAgentUpdateRoomContentServer) Send(m *RoomContent) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientToAgent_UpdateHome_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientToAgentServer).UpdateHome(m, &clientToAgentUpdateHomeServer{stream})
}

type ClientToAgent_UpdateHomeServer interface {
	Send(*HomeView) error
	grpc.ServerStream
}

type clientToAgentUpdateHomeServer struct {
	grpc.ServerStream
}

func (x *clientToAgentUpdateHomeServer) Send(m *HomeView) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientToAgent_UpdateRoomList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientToAgentServer).UpdateRoomList(m, &clientToAgentUpdateRoomListServer{stream})
}

type ClientToAgent_UpdateRoomListServer interface {
	Send(*RoomList) error
	grpc.ServerStream
}

type clientToAgentUpdateRoomListServer struct {
	grpc.ServerStream
}

func (x *clientToAgentUpdateRoomListServer) Send(m *RoomList) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientToAgent_UpdateUserList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientToAgentServer).UpdateUserList(m, &clientToAgentUpdateUserListServer{stream})
}

type ClientToAgent_UpdateUserListServer interface {
	Send(*UserList) error
	grpc.ServerStream
}

type clientToAgentUpdateUserListServer struct {
	grpc.ServerStream
}

func (x *clientToAgentUpdateUserListServer) Send(m *UserList) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientToAgent_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientToAgentServer).Pipe(&clientToAgentPipeServer{stream})
}

type ClientToAgent_PipeServer interface {
	Send(*MessageToUser) error
	Recv() (*LogMessage, error)
	grpc.ServerStream
}

type clientToAgentPipeServer struct {
	grpc.ServerStream
}

func (x *clientToAgentPipeServer) Send(m *MessageToUser) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientToAgentPipeServer) Recv() (*LogMessage, error) {
	m := new(LogMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientToAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.ClientToAgent",
	HandlerType: (*ClientToAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AquireSessionKey",
			Handler:    _ClientToAgent_AquireSessionKey_Handler,
		},
		{
			MethodName: "AquireOtherAgent",
			Handler:    _ClientToAgent_AquireOtherAgent_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ClientToAgent_Login_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _ClientToAgent_CreateAccount_Handler,
		},
		{
			MethodName: "SetAccount",
			Handler:    _ClientToAgent_SetAccount_Handler,
		},
		{
			MethodName: "SetCharacter",
			Handler:    _ClientToAgent_SetCharacter_Handler,
		},
		{
			MethodName: "AquireGameServer",
			Handler:    _ClientToAgent_AquireGameServer_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _ClientToAgent_CreateRoom_Handler,
		},
		{
			MethodName: "JoinRoom",
			Handler:    _ClientToAgent_JoinRoom_Handler,
		},
		{
			MethodName: "RoomReady",
			Handler:    _ClientToAgent_RoomReady_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateRoomContent",
			Handler:       _ClientToAgent_UpdateRoomContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateHome",
			Handler:       _ClientToAgent_UpdateHome_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateRoomList",
			Handler:       _ClientToAgent_UpdateRoomList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateUserList",
			Handler:       _ClientToAgent_UpdateUserList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Pipe",
			Handler:       _ClientToAgent_Pipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x18, 0x4d, 0x73, 0x23, 0x47,
	0xd5, 0xa3, 0xd1, 0x48, 0x9a, 0x27, 0x5b, 0xd6, 0x76, 0x6d, 0x40, 0x11, 0x09, 0x38, 0x93, 0x2f,
	0x2f, 0xd9, 0xd2, 0xc6, 0x5e, 0x42, 0x52, 0xa9, 0x70, 0xf0, 0xca, 0xf6, 0xae, 0xb1, 0xb5, 0x16,
	0x23, 0xed, 0x2e, 0x1f, 0x07, 0x6a, 0x2c, 0xb5, 0xb5, 0x53, 0x3b, 0x33, 0xad, 0xcc, 0xb4, 0x6c,
	0x8b, 0x53, 0x38, 0x71, 0x81, 0xa2, 0x8a, 0x03, 0x55, 0x9c, 0xb8, 0xc1, 0x3f, 0xe1, 0xc0, 0x81,
	0x1b, 0x07, 0xae, 0xfc, 0x08, 0xce, 0xd4, 0x7b, 0xdd, 0xf3, 0x25, 0xdb, 0x49, 0x48, 0x71, 0x92,
	0xde, 0x57, 0xf7, 0xfb, 0x7e, 0x6f, 0x1a, 0x36, 0x42, 0x9e, 0x24, 0xde, 0x8c, 0xf7, 0xe6, 0xb1,
	0x90, 0x82, 0x99, 0x61, 0x32, 0xeb, 0xda, 0x5e, 0xb4, 0x54, 0xb0, 0xf3, 0x4f, 0x03, 0xac, 0xa3,
	0x68, 0xbe, 0x90, 0xec, 0x5b, 0x50, 0x7b, 0x96, 0xf0, 0xf8, 0x68, 0xda, 0x31, 0xb6, 0x8c, 0x6d,
	0xd3, 0xad, 0x2d, 0x08, 0x62, 0x6f, 0x02, 0x3c, 0xf9, 0xe5, 0x40, 0x5c, 0xf0, 0x90, 0x47, 0xb2,
	0x53, 0xd9, 0x32, 0xb6, 0x2b, 0xae, 0xfd, 0x32, 0x45, 0x20, 0xf9, 0x79, 0x4e, 0x36, 0x15, 0xf9,
	0x22, 0x23, 0xbf, 0x01, 0xf6, 0xe8, 0x95, 0x1f, 0x04, 0x4f, 0xbd, 0x90, 0x77, 0xac, 0x2d, 0x63,
	0xdb, 0x76, 0xed, 0x24, 0x45, 0xb0, 0xef, 0x02, 0x10, 0xf5, 0x50, 0xc4, 0x13, 0xde, 0xa9, 0x92,
	0x30, 0x24, 0x19, 0x06, 0xa5, 0xc7, 0x7e, 0xc8, 0x47, 0xd2, 0x0b, 0xe7, 0x9d, 0x1a, 0xa9, 0x65,
	0xcb, 0x14, 0xc1, 0xba, 0xd0, 0x70, 0x17, 0x51, 0xe4, 0xcf, 0x9e, 0x8a, 0x4e, 0x9d, 0x88, 0x8d,
	0x58, 0xc3, 0xce, 0x19, 0xd8, 0xe3, 0xd8, 0x8b, 0x92, 0x43, 0x11, 0x87, 0x6c, 0x1b, 0x1a, 0x43,
	0x91, 0xf8, 0xd2, 0x17, 0x11, 0x19, 0xd7, 0xdc, 0x5d, 0xef, 0x85, 0xc9, 0xac, 0xf7, 0x9c, 0x4f,
	0xa4, 0x88, 0x1f, 0xba, 0x8d, 0xb9, 0xa6, 0xb2, 0x0f, 0xa0, 0xe1, 0x0a, 0xe9, 0x11, 0x67, 0x85,
	0x38, 0x37, 0x89, 0xf3, 0x27, 0x0b, 0x4f, 0xf2, 0x38, 0xf2, 0x45, 0xe4, 0x36, 0x62, 0xcd, 0xe0,
	0x3c, 0x84, 0xba, 0x3e, 0x81, 0xad, 0x83, 0xf1, 0x53, 0x3a, 0xda, 0x70, 0x8d, 0x2b, 0x84, 0x7e,
	0x46, 0xe2, 0x86, 0x6b, 0x2c, 0x11, 0xfa, 0x39, 0x39, 0xc6, 0x70, 0x8d, 0x5f, 0x39, 0xfb, 0x00,
	0xf9, 0x61, 0x5f, 0x5f, 0x0e, 0xa1, 0x17, 0xe4, 0x21, 0xc3, 0x35, 0x2e, 0x9d, 0xbf, 0x18, 0xb9,
	0x49, 0x6c, 0x07, 0x6a, 0x43, 0x91, 0x0c, 0xbc, 0x79, 0xc7, 0xd8, 0x32, 0xb7, 0x9b, 0xbb, 0xaf,
	0x93, 0xca, 0x29, 0xb9, 0xa7, 0x68, 0x07, 0x91, 0x8c, 0x97, 0x6e, 0x6d, 0x4e, 0x40, 0xd9, 0xb1,
	0x95, 0x15, 0xc7, 0x76, 0x8f, 0xa0, 0x59, 0x10, 0x62, 0x6d, 0x30, 0x5f, 0xf1, 0xa5, 0x4e, 0x0b,
	0xfc, 0xcb, 0xde, 0x01, 0xeb, 0xc2, 0x0b, 0x16, 0x5c, 0xfb, 0xa8, 0x45, 0x17, 0x66, 0xfe, 0x76,
	0x15, 0xf1, 0xd3, 0xca, 0x27, 0x86, 0xf3, 0xf7, 0x0a, 0xac, 0xf7, 0xbd, 0x20, 0x38, 0x5c, 0x44,
	0x93, 0xa3, 0xe8, 0x5c, 0x94, 0x82, 0x66, 0x50, 0x3e, 0x64, 0x41, 0x43, 0xda, 0xd8, 0x8b, 0x67,
	0x5c, 0x1e, 0x4d, 0xb5, 0x52, 0x0d, 0xa9, 0x61, 0x4c, 0xcf, 0xc3, 0x58, 0x84, 0x47, 0x53, 0x72,
	0x82, 0xe9, 0xd6, 0xce, 0x09, 0x2a, 0x5b, 0x62, 0xad, 0xa6, 0x08, 0x83, 0x2a, 0xde, 0x4c, 0xb9,
	0x63, 0xbb, 0xd5, 0xf3, 0x45, 0x34, 0x61, 0xdb, 0x50, 0xc7, 0x93, 0x86, 0x22, 0xa1, 0xac, 0xb9,
	0xae, 0x7e, 0xfd, 0x5c, 0x91, 0xd1, 0xcc, 0xb1, 0x40, 0xbe, 0xc6, 0xcd, 0x66, 0x4a, 0x24, 0xb2,
	0xbb, 0x60, 0x3d, 0x27, 0x67, 0xd8, 0x94, 0xbf, 0xca, 0x78, 0xf6, 0x7d, 0xb0, 0x86, 0x5e, 0xec,
	0x85, 0x1d, 0xa0, 0x98, 0xdc, 0xed, 0xcd, 0x84, 0x98, 0x05, 0xba, 0x0c, 0xcf, 0x16, 0xe7, 0xbd,
	0xbd, 0x68, 0xe9, 0x5a, 0x73, 0x64, 0x61, 0xef, 0x41, 0x8d, 0x78, 0x93, 0x4e, 0x93, 0x98, 0xd5,
	0x45, 0x8f, 0xbc, 0xc4, 0x9f, 0x8c, 0x97, 0x73, 0xee, 0xd6, 0x88, 0x2d, 0x71, 0xfe, 0x64, 0x80,
	0x9d, 0x61, 0x59, 0x0b, 0x8c, 0x91, 0x72, 0xe1, 0x93, 0x35, 0xd7, 0x48, 0x10, 0x3e, 0x51, 0x6e,
	0x43, 0x38, 0x40, 0xf8, 0x50, 0x15, 0x24, 0xc2, 0xe7, 0x08, 0x1f, 0x91, 0xf3, 0x2c, 0x84, 0x7d,
	0x84, 0x1f, 0x91, 0xc7, 0x1a, 0x08, 0x9f, 0x21, 0xbc, 0x4f, 0x8e, 0x32, 0x10, 0x9e, 0xb2, 0x77,
	0xc0, 0xd8, 0xd3, 0x1e, 0xba, 0x51, 0x7b, 0xe4, 0xf2, 0x1e, 0xd5, 0xa0, 0xba, 0xef, 0x49, 0xcf,
	0x09, 0xc1, 0x3a, 0x88, 0x63, 0x11, 0xb3, 0x0e, 0xd4, 0x0f, 0xe2, 0x18, 0x35, 0xd4, 0xf1, 0xad,
	0x73, 0x05, 0x62, 0x08, 0x0f, 0xe2, 0x78, 0x90, 0xcc, 0x48, 0x4b, 0xdb, 0xad, 0x71, 0x82, 0x4a,
	0x29, 0x61, 0xae, 0xa4, 0xc4, 0x2d, 0x61, 0x77, 0xba, 0x50, 0x39, 0xda, 0xcf, 0x5d, 0xaf, 0x72,
	0x53, 0xb9, 0xde, 0xf9, 0xc2, 0x80, 0x8d, 0x81, 0xea, 0x7a, 0x63, 0x81, 0x3d, 0x8d, 0xed, 0x40,
	0x7d, 0x90, 0xcc, 0x32, 0x9d, 0x5a, 0xbb, 0xdf, 0x26, 0x0f, 0x97, 0x98, 0x7a, 0xe4, 0xea, 0x7a,
	0xa8, 0xf8, 0xd0, 0x8c, 0xbe, 0x88, 0x24, 0xbf, 0x92, 0x5a, 0xdb, 0xfa, 0x44, 0x81, 0x8e, 0x03,
	0x55, 0xe2, 0x00, 0xa8, 0x8d, 0xc5, 0x73, 0x9f, 0x5f, 0xb6, 0xd7, 0x58, 0x0b, 0x60, 0x2c, 0xf6,
	0xf9, 0xd9, 0x62, 0x76, 0x22, 0x66, 0xed, 0x8a, 0xf3, 0x5b, 0x03, 0xe0, 0x44, 0xcc, 0xf4, 0x05,
	0x6c, 0x07, 0x1a, 0x27, 0x62, 0x76, 0xc2, 0x2f, 0x78, 0xa0, 0x15, 0x78, 0x8d, 0x14, 0xc8, 0x59,
	0x7a, 0x44, 0x74, 0x1b, 0x81, 0x66, 0xfb, 0x92, 0xfb, 0x77, 0xc0, 0x52, 0x2c, 0x36, 0x58, 0x74,
	0x65, 0x7b, 0x8d, 0x35, 0xa0, 0x8a, 0xd5, 0xd5, 0x36, 0xf0, 0xdf, 0x0b, 0x2f, 0x8e, 0xda, 0x15,
	0x24, 0x1f, 0x7a, 0xd2, 0x0b, 0xda, 0xa6, 0xd3, 0x87, 0x8d, 0xc3, 0xd8, 0xe7, 0xd1, 0xd4, 0xe5,
	0x9f, 0x2f, 0x78, 0x72, 0x7b, 0xb3, 0xef, 0x42, 0x03, 0xf1, 0xd4, 0xad, 0xd5, 0xb5, 0x8d, 0x85,
	0x86, 0x9d, 0x77, 0x61, 0x63, 0xc4, 0xbd, 0x78, 0xf2, 0xf2, 0x98, 0x2f, 0x5f, 0x88, 0x78, 0x5a,
	0xf6, 0xbe, 0x9d, 0x7a, 0x7f, 0x07, 0xd6, 0x15, 0x9b, 0xcb, 0x93, 0x45, 0x20, 0xd9, 0x5b, 0x50,
	0x3d, 0xf1, 0x13, 0xa9, 0x7b, 0xd3, 0x06, 0xd9, 0x4d, 0x77, 0x47, 0xe7, 0xc2, 0xad, 0x06, 0x7e,
	0x22, 0x9d, 0x8f, 0xd5, 0xad, 0xc8, 0xc6, 0x3e, 0x00, 0x7b, 0xa1, 0xa9, 0xc9, 0xcd, 0x32, 0x39,
	0xdd, 0x49, 0x60, 0xfd, 0xb1, 0x17, 0xf2, 0x7e, 0xcc, 0xa9, 0x23, 0xb3, 0x7b, 0xd8, 0xbe, 0x45,
	0x88, 0x44, 0xdd, 0xe8, 0x95, 0x6c, 0x8a, 0xc4, 0xe6, 0xad, 0xfe, 0xb1, 0x4f, 0xa0, 0x35, 0x0c,
	0xbc, 0x25, 0x8f, 0x47, 0x3c, 0x49, 0x7c, 0x11, 0x25, 0x9d, 0x0a, 0x5d, 0xd6, 0x26, 0x01, 0x8d,
	0x24, 0x99, 0xd6, 0xbc, 0xc4, 0xe7, 0xdc, 0x87, 0xda, 0x90, 0x87, 0xc7, 0x9c, 0x1a, 0xe3, 0xf8,
	0x44, 0xd7, 0xa0, 0x6b, 0xca, 0x93, 0x11, 0x62, 0x46, 0xa3, 0x13, 0xed, 0x3a, 0x33, 0x19, 0x9d,
	0x38, 0x75, 0xb0, 0x0e, 0xc2, 0xb9, 0x5c, 0x3a, 0x77, 0x60, 0x13, 0xd5, 0x18, 0xc6, 0x7c, 0xee,
	0xc5, 0x1c, 0xf3, 0xc6, 0xf9, 0xbd, 0x01, 0x36, 0xea, 0x7f, 0x18, 0xe3, 0x30, 0xfc, 0x08, 0xea,
	0x07, 0x91, 0xf4, 0xe5, 0x32, 0xb5, 0xfb, 0x3b, 0xa4, 0x4a, 0xc6, 0xd0, 0xd3, 0x54, 0xd5, 0xc9,
	0xeb, 0x5c, 0x41, 0xdd, 0x63, 0x58, 0x2f, 0x12, 0x8a, 0xdd, 0xda, 0x56, 0xdd, 0xfa, 0xdd, 0x72,
	0xb7, 0x56, 0x13, 0x4d, 0xc9, 0x90, 0x81, 0x85, 0x76, 0xfd, 0x0f, 0x03, 0x20, 0xa7, 0x60, 0xfb,
	0x7c, 0xb6, 0xf0, 0xd3, 0x24, 0xa9, 0x2e, 0x16, 0x3e, 0x35, 0xe2, 0x31, 0xf7, 0xc2, 0xa7, 0x42,
	0xf5, 0x12, 0xb7, 0x26, 0x09, 0x62, 0xf7, 0x0b, 0x13, 0xf7, 0x96, 0xb9, 0x60, 0xcb, 0x6c, 0x24,
	0x6f, 0x41, 0xb3, 0xff, 0xd2, 0x8b, 0xbd, 0x89, 0xa4, 0x2c, 0x34, 0xe9, 0x82, 0xe6, 0x24, 0x47,
	0xb1, 0xfb, 0xd0, 0xdc, 0x9b, 0x48, 0xff, 0x82, 0xd3, 0x86, 0x40, 0x8d, 0xaa, 0xb9, 0x0b, 0x2a,
	0x3a, 0x88, 0x71, 0x9b, 0x5e, 0x4e, 0x46, 0xad, 0x06, 0x82, 0xc6, 0xb6, 0x6a, 0xf5, 0xb5, 0x90,
	0x20, 0xe7, 0x08, 0xac, 0x8c, 0x41, 0x1d, 0x47, 0xc6, 0x34, 0xdc, 0x9a, 0x92, 0x46, 0x13, 0x0b,
	0xd9, 0x5e, 0x8d, 0x30, 0x12, 0x59, 0x62, 0x9b, 0x85, 0x8e, 0xee, 0x00, 0x34, 0x9e, 0x88, 0x50,
	0x45, 0xee, 0x17, 0xd0, 0xc4, 0x60, 0x8e, 0xb8, 0x94, 0x7e, 0x34, 0xc3, 0x21, 0x34, 0xf0, 0xae,
	0x54, 0x3e, 0xd1, 0xf9, 0x96, 0x6b, 0x87, 0x29, 0x02, 0x8b, 0x0a, 0x83, 0x48, 0xed, 0x47, 0x17,
	0xd5, 0x4c, 0xc3, 0xd9, 0xf5, 0x66, 0x7e, 0xbd, 0xf3, 0x40, 0x65, 0x31, 0x95, 0xc3, 0xdb, 0x50,
	0xf5, 0x25, 0x0f, 0x75, 0x46, 0x6c, 0x66, 0xd9, 0xec, 0xf2, 0x0b, 0x9f, 0x5f, 0xba, 0x44, 0x74,
	0x7e, 0x53, 0xcd, 0xf3, 0xfe, 0xc6, 0x98, 0xdd, 0x64, 0x64, 0x51, 0x2b, 0x73, 0x45, 0xab, 0x37,
	0xc0, 0x3e, 0xbd, 0x8c, 0x78, 0x4c, 0x07, 0xa9, 0xc6, 0x6b, 0x8b, 0x14, 0xc1, 0x7e, 0x04, 0xa0,
	0x8a, 0x11, 0xef, 0xec, 0x58, 0xa4, 0xd9, 0x9b, 0xa5, 0x3a, 0xeb, 0xe5, 0x74, 0x95, 0xad, 0xb0,
	0xc8, 0x10, 0xec, 0x53, 0xb0, 0x5d, 0xee, 0x4d, 0x97, 0xc8, 0xd3, 0xa9, 0x91, 0xf4, 0x1b, 0x65,
	0xe9, 0x8c, 0xac, 0x84, 0xed, 0x38, 0x85, 0xd9, 0x87, 0x50, 0x1b, 0x49, 0x4f, 0x2e, 0xd4, 0xe8,
	0x6e, 0xed, 0x76, 0x56, 0x04, 0x31, 0x26, 0x44, 0x77, 0x6b, 0x09, 0xfd, 0xb2, 0x6d, 0xd8, 0x3c,
	0xe1, 0xe7, 0x72, 0xe0, 0x07, 0x81, 0x3f, 0xe2, 0x13, 0x11, 0x4d, 0x69, 0x9a, 0x9b, 0xee, 0x66,
	0x50, 0x46, 0x77, 0x4f, 0x60, 0x73, 0x45, 0xed, 0x1b, 0x36, 0x9f, 0xb7, 0xcb, 0xb5, 0xb4, 0xd2,
	0x9a, 0xf2, 0x4a, 0xea, 0x7e, 0x06, 0xad, 0xb2, 0x19, 0x37, 0x1c, 0x76, 0xb7, 0x78, 0x58, 0xa3,
	0x58, 0x87, 0x3f, 0x04, 0xc8, 0x6d, 0x61, 0x1b, 0x60, 0xab, 0xb6, 0xe1, 0x47, 0xd8, 0xec, 0x37,
	0xc0, 0x3e, 0x8d, 0x30, 0xb7, 0x10, 0x34, 0x70, 0x0e, 0x1d, 0x44, 0x53, 0xfc, 0x5f, 0x71, 0xfe,
	0x60, 0x28, 0x41, 0x95, 0x1e, 0xff, 0xaf, 0x5c, 0xc8, 0x73, 0xbb, 0xba, 0x9a, 0xdb, 0x0e, 0xac,
	0x2b, 0x87, 0x69, 0x06, 0x8b, 0x18, 0xd6, 0xfd, 0x02, 0xce, 0xf9, 0xab, 0xa1, 0xaa, 0x85, 0xe6,
	0x59, 0x24, 0x6f, 0xd4, 0xea, 0x63, 0xa8, 0x2b, 0xee, 0xb4, 0x0f, 0xe7, 0x09, 0xa5, 0xc5, 0x7a,
	0x9a, 0xae, 0xdb, 0x9f, 0x6a, 0xca, 0xd4, 0xfe, 0x8a, 0x84, 0xaf, 0xdb, 0xfe, 0x94, 0xcc, 0x6a,
	0xfb, 0xfb, 0x9b, 0x01, 0x90, 0x53, 0xd8, 0x3b, 0xb0, 0x91, 0x35, 0xa9, 0xbe, 0x98, 0xa6, 0x6b,
	0xc6, 0xc6, 0xa4, 0x88, 0x2c, 0x34, 0xc4, 0xca, 0x6a, 0x43, 0xcc, 0xa4, 0xc9, 0x71, 0x69, 0x43,
	0xcc, 0xb0, 0xae, 0x9d, 0x9d, 0x54, 0x98, 0xc8, 0xd6, 0xad, 0x13, 0xb9, 0x56, 0x9e, 0xc8, 0xb8,
	0x23, 0x1c, 0x25, 0x94, 0x65, 0x54, 0x0e, 0x0d, 0xb7, 0xee, 0x2b, 0xd0, 0xf9, 0x9d, 0x09, 0xcd,
	0xc2, 0x0c, 0x63, 0x0f, 0xc1, 0xc2, 0x5c, 0x4a, 0xd7, 0x9f, 0x37, 0x57, 0x87, 0x5c, 0xfa, 0x9f,
	0x98, 0x5c, 0x0b, 0x6b, 0x87, 0xb3, 0xcf, 0xa0, 0xd1, 0xf7, 0xe6, 0xde, 0xc4, 0x97, 0x4b, 0x32,
	0xad, 0xb5, 0xbb, 0x75, 0x9b, 0x5c, 0xca, 0xe7, 0x36, 0x26, 0xfa, 0x5f, 0x16, 0x65, 0xab, 0x10,
	0xe5, 0xb7, 0xc0, 0x3c, 0xe6, 0x4b, 0x4a, 0xb1, 0x34, 0x10, 0xfa, 0x80, 0x63, 0xbe, 0x54, 0xd1,
	0xba, 0xa7, 0xec, 0xa5, 0x11, 0x5e, 0xbd, 0xa9, 0xc6, 0x1a, 0xe9, 0xf8, 0x77, 0xa6, 0xb8, 0x69,
	0xe4, 0x6a, 0x63, 0x5d, 0x3c, 0x15, 0x1a, 0xd3, 0x5e, 0xc3, 0xfd, 0xe7, 0x31, 0x2e, 0x3b, 0x6d,
	0x83, 0xad, 0xeb, 0x43, 0xa7, 0x01, 0x6f, 0x57, 0x70, 0x59, 0xcb, 0x0b, 0xbd, 0x6d, 0xb2, 0x4d,
	0x68, 0xbe, 0xf0, 0x7c, 0x39, 0x16, 0x23, 0xe9, 0xc5, 0xb2, 0x5d, 0x65, 0x4d, 0x95, 0x8c, 0x58,
	0x52, 0x96, 0xd3, 0x87, 0xcd, 0x15, 0x23, 0x59, 0x0d, 0x2a, 0x8f, 0x07, 0x6a, 0xeb, 0xc3, 0x23,
	0x06, 0x5e, 0x22, 0x79, 0xdc, 0x36, 0x52, 0xb8, 0x1f, 0xf8, 0x3c, 0x92, 0xed, 0x0a, 0xee, 0x62,
	0x4f, 0x45, 0xc4, 0xdb, 0xa6, 0xf3, 0x3a, 0xd4, 0x47, 0x8b, 0xc9, 0x84, 0x27, 0xb8, 0xa6, 0x57,
	0xc4, 0x2b, 0x3d, 0x84, 0x2a, 0xe2, 0x95, 0x33, 0x80, 0xe6, 0x9e, 0x94, 0x71, 0x3a, 0x4a, 0x70,
	0x90, 0x71, 0xf9, 0x52, 0x4c, 0x75, 0x0a, 0xd7, 0x42, 0x82, 0x30, 0xaf, 0xd1, 0x75, 0x95, 0x3c,
	0xaf, 0x4b, 0x53, 0x2a, 0x5b, 0xbf, 0x1c, 0x80, 0xdc, 0xa5, 0xb7, 0xac, 0x68, 0x7f, 0xac, 0x20,
	0x53, 0x7c, 0xa1, 0xd3, 0xfc, 0x07, 0x29, 0x54, 0x58, 0x90, 0xef, 0xea, 0xe0, 0xa4, 0x4c, 0x6a,
	0x3b, 0x86, 0x24, 0xe3, 0xc3, 0xbe, 0x30, 0x5c, 0x9c, 0x05, 0xfe, 0x24, 0x57, 0xcb, 0x9e, 0xa7,
	0x08, 0x8c, 0xfe, 0x50, 0xc4, 0x32, 0x9d, 0x6b, 0x73, 0x11, 0x53, 0xdd, 0xef, 0x4d, 0xa7, 0xaa,
	0x16, 0x6c, 0xb7, 0xea, 0x4d, 0xa7, 0x31, 0x7b, 0x50, 0x54, 0x57, 0x0f, 0xf9, 0x6b, 0x89, 0x01,
	0x49, 0x6e, 0x51, 0x07, 0xea, 0x03, 0xef, 0xaa, 0x2f, 0xa2, 0x48, 0x3f, 0x08, 0xd4, 0x43, 0x05,
	0x22, 0xe5, 0xa9, 0xb8, 0x24, 0x8a, 0x7a, 0x0d, 0xa8, 0x47, 0x0a, 0x74, 0xde, 0xd7, 0x1b, 0x7b,
	0x0b, 0x00, 0xdb, 0x9c, 0xb2, 0xaa, 0xbd, 0x86, 0x81, 0xdf, 0x9b, 0xf1, 0x48, 0x6a, 0x84, 0xe1,
	0x7c, 0x46, 0x5b, 0xbb, 0x1f, 0xa9, 0x17, 0x91, 0x62, 0xe9, 0x19, 0x2b, 0xa5, 0x87, 0xf6, 0x25,
	0x97, 0xd3, 0xb4, 0x8b, 0xce, 0x93, 0xcb, 0xa9, 0x33, 0x82, 0xa6, 0xcb, 0x67, 0x7e, 0x22, 0xbf,
	0x91, 0x38, 0xc6, 0xea, 0x20, 0xf4, 0xfc, 0x20, 0x8d, 0x27, 0x47, 0xc0, 0xf9, 0x8f, 0x91, 0x17,
	0xc4, 0x57, 0x1d, 0x49, 0xf5, 0x56, 0x29, 0xd4, 0x5b, 0x1f, 0xd6, 0x4f, 0x2f, 0xa3, 0xbc, 0x0b,
	0x99, 0xd4, 0x5a, 0xbf, 0x57, 0x2a, 0xa8, 0x5e, 0x91, 0x43, 0x35, 0xd7, 0x75, 0x51, 0x40, 0x61,
	0x17, 0x7c, 0x96, 0xf0, 0x69, 0xb9, 0x97, 0x99, 0xee, 0xc6, 0xa2, 0x88, 0xec, 0x9e, 0xc2, 0x9d,
	0x6b, 0x07, 0x7d, 0xdd, 0x97, 0x83, 0xbc, 0x21, 0x16, 0x7a, 0xf1, 0xaf, 0x0d, 0xb0, 0x51, 0x47,
	0x55, 0xdb, 0x0f, 0xca, 0x0d, 0xec, 0xf5, 0xcc, 0x04, 0xc2, 0x66, 0xff, 0x16, 0x89, 0x6e, 0x5e,
	0x4e, 0x5f, 0x15, 0xb9, 0x9e, 0xa0, 0x2d, 0x80, 0xd3, 0x48, 0x7d, 0x26, 0xd0, 0x08, 0xb5, 0xc1,
	0xa2, 0x40, 0xb7, 0x0d, 0x2c, 0xf6, 0xd3, 0xf3, 0xf3, 0xc0, 0x8f, 0xb0, 0x35, 0x94, 0x46, 0xab,
	0xe9, 0x5c, 0x41, 0x3b, 0xd3, 0x2d, 0x2d, 0xd0, 0x9b, 0xa6, 0xd7, 0x16, 0x58, 0x7d, 0x11, 0x88,
	0x58, 0x5b, 0xa5, 0xb6, 0x54, 0xc2, 0xb8, 0xd6, 0x04, 0x7f, 0x58, 0x0f, 0xe0, 0xe0, 0xf3, 0x85,
	0x3f, 0x0f, 0x79, 0x24, 0x93, 0x4e, 0xa3, 0xf0, 0x99, 0x9f, 0xa1, 0x5d, 0xe0, 0x19, 0x87, 0xf3,
	0x85, 0x59, 0x98, 0x1e, 0x37, 0xde, 0x59, 0x1c, 0x4e, 0x85, 0xd5, 0x32, 0x1f, 0x4e, 0xb7, 0xed,
	0x97, 0xb9, 0xb6, 0xd5, 0xdb, 0xb4, 0xbd, 0xab, 0x3f, 0x31, 0xf5, 0x38, 0xb7, 0x02, 0xfa, 0xde,
	0x6c, 0x83, 0x79, 0x70, 0xa5, 0xde, 0xe1, 0x2c, 0xd7, 0xe4, 0x57, 0x73, 0xbd, 0x1b, 0x3c, 0xe1,
	0x5e, 0x20, 0x5f, 0x76, 0x40, 0xbd, 0xfd, 0x85, 0x29, 0x82, 0xbd, 0x07, 0xf5, 0xbd, 0x33, 0x3f,
	0xc0, 0xf1, 0x51, 0x2f, 0xbc, 0xba, 0x69, 0x9c, 0x5b, 0xf7, 0xd4, 0x9f, 0xff, 0xd5, 0x37, 0xec,
	0x3e, 0x54, 0xb1, 0x63, 0x76, 0x6c, 0xe2, 0xec, 0x94, 0x53, 0xa8, 0x87, 0x24, 0x95, 0xc6, 0x55,
	0x4f, 0xca, 0xb8, 0xfb, 0x31, 0xd8, 0x19, 0xea, 0x86, 0xed, 0xa0, 0xb4, 0x83, 0x55, 0x8a, 0x09,
	0xb8, 0xa3, 0xdd, 0xc4, 0xd6, 0xc1, 0x70, 0xf5, 0x56, 0x6f, 0x10, 0xf4, 0x58, 0x4f, 0x7a, 0x63,
	0x86, 0xd0, 0x23, 0x72, 0xae, 0xe5, 0x1a, 0x67, 0xce, 0xbf, 0x0c, 0xb0, 0x33, 0x9d, 0x33, 0xdf,
	0x1b, 0x05, 0xdf, 0x33, 0xd5, 0x8a, 0xd2, 0xc2, 0x97, 0x3a, 0x46, 0x14, 0x5d, 0xb3, 0x10, 0x5d,
	0x07, 0x6a, 0x74, 0x79, 0xd2, 0xa9, 0x92, 0x95, 0xc5, 0x20, 0xd5, 0x28, 0x48, 0x49, 0xd1, 0xbf,
	0xd6, 0x97, 0xf9, 0xb7, 0x05, 0x95, 0xfe, 0xbe, 0x0e, 0x5b, 0x65, 0xb2, 0xaf, 0x56, 0x0d, 0xef,
	0x2c, 0xe0, 0x14, 0x16, 0x0b, 0x57, 0x0d, 0x84, 0x30, 0x9a, 0x47, 0xd1, 0x05, 0x8f, 0xa4, 0x88,
	0x97, 0xb4, 0x24, 0x5b, 0xae, 0xed, 0xa7, 0x08, 0xe7, 0x32, 0xbb, 0x0d, 0xbd, 0xb8, 0x37, 0x3e,
	0xd6, 0x2e, 0x31, 0xbd, 0xf1, 0x31, 0x62, 0xf6, 0x0f, 0x0e, 0xb5, 0x5b, 0xcc, 0xe9, 0xc1, 0x21,
	0x7d, 0x09, 0x0f, 0xf7, 0xf5, 0x17, 0x94, 0x99, 0x0c, 0xf7, 0xc9, 0x74, 0x44, 0xd5, 0x08, 0x55,
	0x95, 0xa3, 0xe1, 0x3e, 0xaa, 0x36, 0x18, 0xea, 0xad, 0xb2, 0x12, 0x0e, 0x91, 0x67, 0xb0, 0x77,
	0x3c, 0xd6, 0x79, 0x57, 0x0d, 0xf7, 0x8e, 0xc7, 0xbb, 0x7f, 0x36, 0x60, 0x5d, 0x8d, 0xd4, 0xb1,
	0xc0, 0xf6, 0xcd, 0xee, 0x41, 0x33, 0x5d, 0xd2, 0xb0, 0xcf, 0x2a, 0xd7, 0xd0, 0xff, 0xae, 0xfa,
	0xaf, 0x3e, 0xb8, 0xd7, 0xb6, 0x0d, 0xb6, 0x03, 0x9b, 0xcf, 0xe6, 0x53, 0x4f, 0xf2, 0xfc, 0x33,
	0xbb, 0xc0, 0xd2, 0x6d, 0x95, 0xbf, 0xb0, 0x9d, 0xb5, 0x0f, 0x51, 0xa4, 0x3a, 0xf4, 0xe7, 0x9c,
	0x6d, 0xae, 0xbc, 0xd0, 0x74, 0xd9, 0xf5, 0x37, 0x23, 0xbc, 0xe3, 0x43, 0x63, 0x77, 0x4f, 0xcf,
	0x11, 0xad, 0xdf, 0x2e, 0xb4, 0xf6, 0x3e, 0x5f, 0xf8, 0x31, 0x5d, 0x4a, 0x9f, 0x3c, 0x77, 0xb2,
	0x7b, 0xd2, 0xa7, 0x8a, 0x6e, 0x53, 0xad, 0xa1, 0xf4, 0x90, 0xe0, 0xac, 0xed, 0xfe, 0xdb, 0x82,
	0x8d, 0xd4, 0x48, 0x3a, 0x8b, 0xed, 0x40, 0x5b, 0x9d, 0x52, 0x18, 0xe7, 0x45, 0xdd, 0x57, 0xa7,
	0xa4, 0xb3, 0x96, 0x8b, 0x9c, 0xca, 0x97, 0x3c, 0x56, 0xc7, 0xdc, 0x24, 0x92, 0x0e, 0x75, 0x67,
	0x8d, 0xdd, 0xd3, 0x8d, 0x30, 0x37, 0x57, 0x4f, 0xbf, 0x6e, 0x79, 0xed, 0x72, 0xd6, 0xd8, 0x03,
	0xd8, 0x20, 0xed, 0xf9, 0xde, 0x64, 0x22, 0x16, 0x91, 0x64, 0xea, 0xa9, 0xa4, 0x30, 0xf2, 0x52,
	0xf7, 0xc7, 0xb1, 0x88, 0x9d, 0x35, 0xac, 0xeb, 0x11, 0x97, 0x65, 0xee, 0xc2, 0xaa, 0xd3, 0x55,
	0xe9, 0xaa, 0xf7, 0x22, 0x67, 0x8d, 0x7d, 0x84, 0xfb, 0x9c, 0xcc, 0xbb, 0xde, 0x6b, 0xe5, 0xca,
	0xbe, 0x4d, 0x2c, 0xb3, 0x3a, 0x9f, 0xed, 0x5f, 0x65, 0x75, 0x0f, 0x40, 0x99, 0x42, 0xd1, 0x69,
	0x67, 0x9f, 0x1a, 0xb7, 0x5d, 0xf1, 0x36, 0x34, 0x7e, 0x2c, 0xd4, 0x37, 0x0d, 0xab, 0xab, 0x74,
	0xdb, 0xbf, 0xc6, 0xf4, 0x3e, 0xd8, 0xea, 0xd3, 0xcb, 0x9b, 0x96, 0x23, 0x75, 0xdd, 0xce, 0x3b,
	0x2a, 0x29, 0x8b, 0x1f, 0x45, 0x45, 0x81, 0xf6, 0xea, 0xb7, 0x0f, 0x25, 0xe6, 0x07, 0x00, 0x4a,
	0xec, 0x89, 0x58, 0x49, 0x63, 0x15, 0xaa, 0xec, 0x71, 0x02, 0x99, 0x1f, 0x40, 0x2b, 0xbf, 0x83,
	0x5e, 0x12, 0xae, 0x0b, 0xa4, 0xa4, 0xb2, 0x40, 0xf6, 0x12, 0x77, 0x5d, 0x20, 0x25, 0x7d, 0xc3,
	0x3a, 0x39, 0xab, 0xd1, 0xf3, 0xf1, 0xc3, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xce, 0x8b, 0xe8,
	0x3c, 0x94, 0x1a, 0x00, 0x00,
}
