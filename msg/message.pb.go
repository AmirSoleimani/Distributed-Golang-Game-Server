// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	Input
	TransForm
	Vector3
	Quaternion
	Position
	CallFuncInfo
	BasicType
	Error
	LoginInput
	RegistInput
	UserInfo
	UserState
	RoomInfo
	Character
	Color
	Equipment
	Ability
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserState_UserStatus int32

const (
	UserState_OnCreating UserState_UserStatus = 0
	UserState_Login      UserState_UserStatus = 1
	UserState_Offline    UserState_UserStatus = 2
	UserState_OnPlaying  UserState_UserStatus = 3
)

var UserState_UserStatus_name = map[int32]string{
	0: "OnCreating",
	1: "Login",
	2: "Offline",
	3: "OnPlaying",
}
var UserState_UserStatus_value = map[string]int32{
	"OnCreating": 0,
	"Login":      1,
	"Offline":    2,
	"OnPlaying":  3,
}

func (x UserState_UserStatus) String() string {
	return proto.EnumName(UserState_UserStatus_name, int32(x))
}
func (UserState_UserStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

type RoomInfo_RoomStatus int32

const (
	RoomInfo_Preparing RoomInfo_RoomStatus = 0
	RoomInfo_OnPlaying RoomInfo_RoomStatus = 1
	RoomInfo_Ending    RoomInfo_RoomStatus = 2
)

var RoomInfo_RoomStatus_name = map[int32]string{
	0: "Preparing",
	1: "OnPlaying",
	2: "Ending",
}
var RoomInfo_RoomStatus_value = map[string]int32{
	"Preparing": 0,
	"OnPlaying": 1,
	"Ending":    2,
}

func (x RoomInfo_RoomStatus) String() string {
	return proto.EnumName(RoomInfo_RoomStatus_name, int32(x))
}
func (RoomInfo_RoomStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12, 0} }

type Input struct {
	UserId     int64   `protobuf:"varint,1,opt,name=UserId,json=userId" json:"UserId,omitempty"`
	H_Movement float32 `protobuf:"fixed32,2,opt,name=H_Movement,json=hMovement" json:"H_Movement,omitempty"`
	V_Movement float32 `protobuf:"fixed32,3,opt,name=V_Movement,json=vMovement" json:"V_Movement,omitempty"`
	SkillName  string  `protobuf:"bytes,5,opt,name=SkillName,json=skillName" json:"SkillName,omitempty"`
	SkillForce float32 `protobuf:"fixed32,4,opt,name=SkillForce,json=skillForce" json:"SkillForce,omitempty"`
	TimeStamp  int64   `protobuf:"varint,6,opt,name=TimeStamp,json=timeStamp" json:"TimeStamp,omitempty"`
	RunnigNo   int64   `protobuf:"varint,7,opt,name=RunnigNo,json=runnigNo" json:"RunnigNo,omitempty"`
}

func (m *Input) Reset()                    { *m = Input{} }
func (m *Input) String() string            { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()               {}
func (*Input) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Input) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Input) GetH_Movement() float32 {
	if m != nil {
		return m.H_Movement
	}
	return 0
}

func (m *Input) GetV_Movement() float32 {
	if m != nil {
		return m.V_Movement
	}
	return 0
}

func (m *Input) GetSkillName() string {
	if m != nil {
		return m.SkillName
	}
	return ""
}

func (m *Input) GetSkillForce() float32 {
	if m != nil {
		return m.SkillForce
	}
	return 0
}

func (m *Input) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *Input) GetRunnigNo() int64 {
	if m != nil {
		return m.RunnigNo
	}
	return 0
}

type TransForm struct {
	Position *Vector3    `protobuf:"bytes,1,opt,name=Position,json=position" json:"Position,omitempty"`
	Rotation *Quaternion `protobuf:"bytes,2,opt,name=Rotation,json=rotation" json:"Rotation,omitempty"`
}

func (m *TransForm) Reset()                    { *m = TransForm{} }
func (m *TransForm) String() string            { return proto.CompactTextString(m) }
func (*TransForm) ProtoMessage()               {}
func (*TransForm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TransForm) GetPosition() *Vector3 {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *TransForm) GetRotation() *Quaternion {
	if m != nil {
		return m.Rotation
	}
	return nil
}

type Vector3 struct {
	X float64 `protobuf:"fixed64,1,opt,name=X,json=x" json:"X,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=Y,json=y" json:"Y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=Z,json=z" json:"Z,omitempty"`
}

func (m *Vector3) Reset()                    { *m = Vector3{} }
func (m *Vector3) String() string            { return proto.CompactTextString(m) }
func (*Vector3) ProtoMessage()               {}
func (*Vector3) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Vector3) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector3) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vector3) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type Quaternion struct {
	X float64 `protobuf:"fixed64,1,opt,name=X,json=x" json:"X,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=Y,json=y" json:"Y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=Z,json=z" json:"Z,omitempty"`
	W float64 `protobuf:"fixed64,4,opt,name=W,json=w" json:"W,omitempty"`
}

func (m *Quaternion) Reset()                    { *m = Quaternion{} }
func (m *Quaternion) String() string            { return proto.CompactTextString(m) }
func (*Quaternion) ProtoMessage()               {}
func (*Quaternion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Quaternion) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Quaternion) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Quaternion) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *Quaternion) GetW() float64 {
	if m != nil {
		return m.W
	}
	return 0
}

type Position struct {
	PosMap    map[int64]*TransForm `protobuf:"bytes,1,rep,name=PosMap,json=posMap" json:"PosMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TimeStamp int64                `protobuf:"varint,2,opt,name=TimeStamp,json=timeStamp" json:"TimeStamp,omitempty"`
}

func (m *Position) Reset()                    { *m = Position{} }
func (m *Position) String() string            { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()               {}
func (*Position) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Position) GetPosMap() map[int64]*TransForm {
	if m != nil {
		return m.PosMap
	}
	return nil
}

func (m *Position) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

type CallFuncInfo struct {
	RunnigNo  string                 `protobuf:"bytes,1,opt,name=RunnigNo,json=runnigNo" json:"RunnigNo,omitempty"`
	TargetId  int64                  `protobuf:"varint,2,opt,name=TargetId,json=targetId" json:"TargetId,omitempty"`
	FromId    int64                  `protobuf:"varint,4,opt,name=FromId,json=fromId" json:"FromId,omitempty"`
	TimeStamp int64                  `protobuf:"varint,5,opt,name=TimeStamp,json=timeStamp" json:"TimeStamp,omitempty"`
	Func      string                 `protobuf:"bytes,6,opt,name=Func,json=func" json:"Func,omitempty"`
	FromPos   *TransForm             `protobuf:"bytes,7,opt,name=FromPos,json=fromPos" json:"FromPos,omitempty"`
	ToPos     *TransForm             `protobuf:"bytes,8,opt,name=ToPos,json=toPos" json:"ToPos,omitempty"`
	Value     float32                `protobuf:"fixed32,9,opt,name=Value,json=value" json:"Value,omitempty"`
	Param     []*google_protobuf.Any `protobuf:"bytes,10,rep,name=Param,json=param" json:"Param,omitempty"`
	Params    []*BasicType           `protobuf:"bytes,11,rep,name=Params,json=params" json:"Params,omitempty"`
}

func (m *CallFuncInfo) Reset()                    { *m = CallFuncInfo{} }
func (m *CallFuncInfo) String() string            { return proto.CompactTextString(m) }
func (*CallFuncInfo) ProtoMessage()               {}
func (*CallFuncInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CallFuncInfo) GetRunnigNo() string {
	if m != nil {
		return m.RunnigNo
	}
	return ""
}

func (m *CallFuncInfo) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *CallFuncInfo) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

func (m *CallFuncInfo) GetTimeStamp() int64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *CallFuncInfo) GetFunc() string {
	if m != nil {
		return m.Func
	}
	return ""
}

func (m *CallFuncInfo) GetFromPos() *TransForm {
	if m != nil {
		return m.FromPos
	}
	return nil
}

func (m *CallFuncInfo) GetToPos() *TransForm {
	if m != nil {
		return m.ToPos
	}
	return nil
}

func (m *CallFuncInfo) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CallFuncInfo) GetParam() []*google_protobuf.Any {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *CallFuncInfo) GetParams() []*BasicType {
	if m != nil {
		return m.Params
	}
	return nil
}

type BasicType struct {
	// Types that are valid to be assigned to Data:
	//	*BasicType_S
	//	*BasicType_L
	//	*BasicType_F
	//	*BasicType_I
	//	*BasicType_B
	//	*BasicType_D
	//	*BasicType_A
	Data isBasicType_Data `protobuf_oneof:"Data"`
}

func (m *BasicType) Reset()                    { *m = BasicType{} }
func (m *BasicType) String() string            { return proto.CompactTextString(m) }
func (*BasicType) ProtoMessage()               {}
func (*BasicType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isBasicType_Data interface {
	isBasicType_Data()
}

type BasicType_S struct {
	S string `protobuf:"bytes,1,opt,name=S,json=s,oneof"`
}
type BasicType_L struct {
	L int64 `protobuf:"varint,2,opt,name=L,json=l,oneof"`
}
type BasicType_F struct {
	F float32 `protobuf:"fixed32,3,opt,name=F,json=f,oneof"`
}
type BasicType_I struct {
	I int32 `protobuf:"varint,4,opt,name=I,json=i,oneof"`
}
type BasicType_B struct {
	B bool `protobuf:"varint,5,opt,name=B,json=b,oneof"`
}
type BasicType_D struct {
	D float64 `protobuf:"fixed64,6,opt,name=D,json=d,oneof"`
}
type BasicType_A struct {
	A *google_protobuf.Any `protobuf:"bytes,7,opt,name=A,json=a,oneof"`
}

func (*BasicType_S) isBasicType_Data() {}
func (*BasicType_L) isBasicType_Data() {}
func (*BasicType_F) isBasicType_Data() {}
func (*BasicType_I) isBasicType_Data() {}
func (*BasicType_B) isBasicType_Data() {}
func (*BasicType_D) isBasicType_Data() {}
func (*BasicType_A) isBasicType_Data() {}

func (m *BasicType) GetData() isBasicType_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BasicType) GetS() string {
	if x, ok := m.GetData().(*BasicType_S); ok {
		return x.S
	}
	return ""
}

func (m *BasicType) GetL() int64 {
	if x, ok := m.GetData().(*BasicType_L); ok {
		return x.L
	}
	return 0
}

func (m *BasicType) GetF() float32 {
	if x, ok := m.GetData().(*BasicType_F); ok {
		return x.F
	}
	return 0
}

func (m *BasicType) GetI() int32 {
	if x, ok := m.GetData().(*BasicType_I); ok {
		return x.I
	}
	return 0
}

func (m *BasicType) GetB() bool {
	if x, ok := m.GetData().(*BasicType_B); ok {
		return x.B
	}
	return false
}

func (m *BasicType) GetD() float64 {
	if x, ok := m.GetData().(*BasicType_D); ok {
		return x.D
	}
	return 0
}

func (m *BasicType) GetA() *google_protobuf.Any {
	if x, ok := m.GetData().(*BasicType_A); ok {
		return x.A
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BasicType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BasicType_OneofMarshaler, _BasicType_OneofUnmarshaler, _BasicType_OneofSizer, []interface{}{
		(*BasicType_S)(nil),
		(*BasicType_L)(nil),
		(*BasicType_F)(nil),
		(*BasicType_I)(nil),
		(*BasicType_B)(nil),
		(*BasicType_D)(nil),
		(*BasicType_A)(nil),
	}
}

func _BasicType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BasicType)
	// Data
	switch x := m.Data.(type) {
	case *BasicType_S:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.S)
	case *BasicType_L:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.L))
	case *BasicType_F:
		b.EncodeVarint(3<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.F)))
	case *BasicType_I:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.I))
	case *BasicType_B:
		t := uint64(0)
		if x.B {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *BasicType_D:
		b.EncodeVarint(6<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.D))
	case *BasicType_A:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.A); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BasicType.Data has unexpected type %T", x)
	}
	return nil
}

func _BasicType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BasicType)
	switch tag {
	case 1: // Data.S
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &BasicType_S{x}
		return true, err
	case 2: // Data.L
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &BasicType_L{int64(x)}
		return true, err
	case 3: // Data.F
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Data = &BasicType_F{math.Float32frombits(uint32(x))}
		return true, err
	case 4: // Data.I
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &BasicType_I{int32(x)}
		return true, err
	case 5: // Data.B
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Data = &BasicType_B{x != 0}
		return true, err
	case 6: // Data.D
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Data = &BasicType_D{math.Float64frombits(x)}
		return true, err
	case 7: // Data.A
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Any)
		err := b.DecodeMessage(msg)
		m.Data = &BasicType_A{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BasicType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BasicType)
	// Data
	switch x := m.Data.(type) {
	case *BasicType_S:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.S)))
		n += len(x.S)
	case *BasicType_L:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.L))
	case *BasicType_F:
		n += proto.SizeVarint(3<<3 | proto.WireFixed32)
		n += 4
	case *BasicType_I:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.I))
	case *BasicType_B:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case *BasicType_D:
		n += proto.SizeVarint(6<<3 | proto.WireFixed64)
		n += 8
	case *BasicType_A:
		s := proto.Size(x.A)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Error struct {
	ErrType  string `protobuf:"bytes,1,opt,name=ErrType,json=errType" json:"ErrType,omitempty"`
	ErrMsg   string `protobuf:"bytes,2,opt,name=ErrMsg,json=errMsg" json:"ErrMsg,omitempty"`
	RunnigNo string `protobuf:"bytes,3,opt,name=RunnigNo,json=runnigNo" json:"RunnigNo,omitempty"`
	FromId   int64  `protobuf:"varint,4,opt,name=FromId,json=fromId" json:"FromId,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Error) GetErrType() string {
	if m != nil {
		return m.ErrType
	}
	return ""
}

func (m *Error) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *Error) GetRunnigNo() string {
	if m != nil {
		return m.RunnigNo
	}
	return ""
}

func (m *Error) GetFromId() int64 {
	if m != nil {
		return m.FromId
	}
	return 0
}

type LoginInput struct {
	UserName string `protobuf:"bytes,1,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	Pswd     string `protobuf:"bytes,2,opt,name=Pswd,json=pswd" json:"Pswd,omitempty"`
}

func (m *LoginInput) Reset()                    { *m = LoginInput{} }
func (m *LoginInput) String() string            { return proto.CompactTextString(m) }
func (*LoginInput) ProtoMessage()               {}
func (*LoginInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LoginInput) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LoginInput) GetPswd() string {
	if m != nil {
		return m.Pswd
	}
	return ""
}

type RegistInput struct {
	UserName string `protobuf:"bytes,1,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	Pswd     string `protobuf:"bytes,2,opt,name=Pswd,json=pswd" json:"Pswd,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=Email,json=email" json:"Email,omitempty"`
}

func (m *RegistInput) Reset()                    { *m = RegistInput{} }
func (m *RegistInput) String() string            { return proto.CompactTextString(m) }
func (*RegistInput) ProtoMessage()               {}
func (*RegistInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RegistInput) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *RegistInput) GetPswd() string {
	if m != nil {
		return m.Pswd
	}
	return ""
}

func (m *RegistInput) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UserInfo struct {
	UserName      string               `protobuf:"bytes,1,opt,name=UserName,json=userName" json:"UserName,omitempty"`
	Uuid          int64                `protobuf:"varint,2,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	OwnCharacter  map[int64]*Character `protobuf:"bytes,3,rep,name=OwnCharacter,json=ownCharacter" json:"OwnCharacter,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UsedCharacter int64                `protobuf:"varint,4,opt,name=UsedCharacter,json=usedCharacter" json:"UsedCharacter,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UserInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserInfo) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *UserInfo) GetOwnCharacter() map[int64]*Character {
	if m != nil {
		return m.OwnCharacter
	}
	return nil
}

func (m *UserInfo) GetUsedCharacter() int64 {
	if m != nil {
		return m.UsedCharacter
	}
	return 0
}

type UserState struct {
	State UserState_UserStatus `protobuf:"varint,1,opt,name=State,json=state,enum=msg.UserState_UserStatus" json:"State,omitempty"`
}

func (m *UserState) Reset()                    { *m = UserState{} }
func (m *UserState) String() string            { return proto.CompactTextString(m) }
func (*UserState) ProtoMessage()               {}
func (*UserState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UserState) GetState() UserState_UserStatus {
	if m != nil {
		return m.State
	}
	return UserState_OnCreating
}

type RoomInfo struct {
	Uuid            int64               `protobuf:"varint,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	Name            string              `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	GameType        string              `protobuf:"bytes,3,opt,name=GameType,json=gameType" json:"GameType,omitempty"`
	OwnerUuid       int64               `protobuf:"varint,4,opt,name=OwnerUuid,json=ownerUuid" json:"OwnerUuid,omitempty"`
	UserInRoom      map[int64]*UserInfo `protobuf:"bytes,5,rep,name=UserInRoom,json=userInRoom" json:"UserInRoom,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ReadyUser       map[int64]bool      `protobuf:"bytes,6,rep,name=ReadyUser,json=readyUser" json:"ReadyUser,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Status          RoomInfo_RoomStatus `protobuf:"varint,7,opt,name=Status,json=status,enum=msg.RoomInfo_RoomStatus" json:"Status,omitempty"`
	LeftMilliSecond int64               `protobuf:"varint,8,opt,name=LeftMilliSecond,json=leftMilliSecond" json:"LeftMilliSecond,omitempty"`
}

func (m *RoomInfo) Reset()                    { *m = RoomInfo{} }
func (m *RoomInfo) String() string            { return proto.CompactTextString(m) }
func (*RoomInfo) ProtoMessage()               {}
func (*RoomInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RoomInfo) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *RoomInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomInfo) GetGameType() string {
	if m != nil {
		return m.GameType
	}
	return ""
}

func (m *RoomInfo) GetOwnerUuid() int64 {
	if m != nil {
		return m.OwnerUuid
	}
	return 0
}

func (m *RoomInfo) GetUserInRoom() map[int64]*UserInfo {
	if m != nil {
		return m.UserInRoom
	}
	return nil
}

func (m *RoomInfo) GetReadyUser() map[int64]bool {
	if m != nil {
		return m.ReadyUser
	}
	return nil
}

func (m *RoomInfo) GetStatus() RoomInfo_RoomStatus {
	if m != nil {
		return m.Status
	}
	return RoomInfo_Preparing
}

func (m *RoomInfo) GetLeftMilliSecond() int64 {
	if m != nil {
		return m.LeftMilliSecond
	}
	return 0
}

// character 即是沒有實體之腳色
// entity 則藉由character來初始化
type Character struct {
	Uuid          int64   `protobuf:"varint,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	CharacterType string  `protobuf:"bytes,2,opt,name=CharacterType,json=characterType" json:"CharacterType,omitempty"`
	Name          string  `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name,omitempty"`
	Color         *Color  `protobuf:"bytes,4,opt,name=Color,json=color" json:"Color,omitempty"`
	Level         int32   `protobuf:"varint,5,opt,name=Level,json=level" json:"Level,omitempty"`
	Exp           int32   `protobuf:"varint,6,opt,name=Exp,json=exp" json:"Exp,omitempty"`
	MaxHealth     float32 `protobuf:"fixed32,10,opt,name=MaxHealth,json=maxHealth" json:"MaxHealth,omitempty"`
	// 基本能力值
	Ability      *Ability             `protobuf:"bytes,7,opt,name=Ability,json=ability" json:"Ability,omitempty"`
	EquipmentMap map[int64]*Equipment `protobuf:"bytes,8,rep,name=EquipmentMap,json=equipmentMap" json:"EquipmentMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 戰鬥時添加的狀態
	Attr map[string]float32 `protobuf:"bytes,9,rep,name=Attr,json=attr" json:"Attr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
}

func (m *Character) Reset()                    { *m = Character{} }
func (m *Character) String() string            { return proto.CompactTextString(m) }
func (*Character) ProtoMessage()               {}
func (*Character) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Character) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *Character) GetCharacterType() string {
	if m != nil {
		return m.CharacterType
	}
	return ""
}

func (m *Character) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Character) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *Character) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Character) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *Character) GetMaxHealth() float32 {
	if m != nil {
		return m.MaxHealth
	}
	return 0
}

func (m *Character) GetAbility() *Ability {
	if m != nil {
		return m.Ability
	}
	return nil
}

func (m *Character) GetEquipmentMap() map[int64]*Equipment {
	if m != nil {
		return m.EquipmentMap
	}
	return nil
}

func (m *Character) GetAttr() map[string]float32 {
	if m != nil {
		return m.Attr
	}
	return nil
}

type Color struct {
	R int32 `protobuf:"varint,1,opt,name=R,json=r" json:"R,omitempty"`
	G int32 `protobuf:"varint,2,opt,name=G,json=g" json:"G,omitempty"`
	B int32 `protobuf:"varint,3,opt,name=B,json=b" json:"B,omitempty"`
}

func (m *Color) Reset()                    { *m = Color{} }
func (m *Color) String() string            { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()               {}
func (*Color) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Color) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *Color) GetG() int32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *Color) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type Equipment struct {
	Name      string   `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Type      string   `protobuf:"bytes,2,opt,name=Type,json=type" json:"Type,omitempty"`
	Uuid      int64    `protobuf:"varint,3,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	Color     *Color   `protobuf:"bytes,4,opt,name=Color,json=color" json:"Color,omitempty"`
	Ability   *Ability `protobuf:"bytes,5,opt,name=Ability,json=ability" json:"Ability,omitempty"`
	CD        int32    `protobuf:"varint,6,opt,name=CD,json=cD" json:"CD,omitempty"`
	Usable    int32    `protobuf:"varint,7,opt,name=Usable,json=usable" json:"Usable,omitempty"`
	Inventory int32    `protobuf:"varint,8,opt,name=Inventory,json=inventory" json:"Inventory,omitempty"`
}

func (m *Equipment) Reset()                    { *m = Equipment{} }
func (m *Equipment) String() string            { return proto.CompactTextString(m) }
func (*Equipment) ProtoMessage()               {}
func (*Equipment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Equipment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Equipment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Equipment) GetUuid() int64 {
	if m != nil {
		return m.Uuid
	}
	return 0
}

func (m *Equipment) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *Equipment) GetAbility() *Ability {
	if m != nil {
		return m.Ability
	}
	return nil
}

func (m *Equipment) GetCD() int32 {
	if m != nil {
		return m.CD
	}
	return 0
}

func (m *Equipment) GetUsable() int32 {
	if m != nil {
		return m.Usable
	}
	return 0
}

func (m *Equipment) GetInventory() int32 {
	if m != nil {
		return m.Inventory
	}
	return 0
}

type Ability struct {
	ATK  int32   `protobuf:"varint,1,opt,name=ATK,json=aTK" json:"ATK,omitempty"`
	DEF  int32   `protobuf:"varint,2,opt,name=DEF,json=dEF" json:"DEF,omitempty"`
	SPD  float32 `protobuf:"fixed32,3,opt,name=SPD,json=sPD" json:"SPD,omitempty"`
	TSPD float32 `protobuf:"fixed32,6,opt,name=TSPD,json=tSPD" json:"TSPD,omitempty"`
	MP   int32   `protobuf:"varint,4,opt,name=MP,json=mP" json:"MP,omitempty"`
	MAKT int32   `protobuf:"varint,5,opt,name=MAKT,json=mAKT" json:"MAKT,omitempty"`
}

func (m *Ability) Reset()                    { *m = Ability{} }
func (m *Ability) String() string            { return proto.CompactTextString(m) }
func (*Ability) ProtoMessage()               {}
func (*Ability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Ability) GetATK() int32 {
	if m != nil {
		return m.ATK
	}
	return 0
}

func (m *Ability) GetDEF() int32 {
	if m != nil {
		return m.DEF
	}
	return 0
}

func (m *Ability) GetSPD() float32 {
	if m != nil {
		return m.SPD
	}
	return 0
}

func (m *Ability) GetTSPD() float32 {
	if m != nil {
		return m.TSPD
	}
	return 0
}

func (m *Ability) GetMP() int32 {
	if m != nil {
		return m.MP
	}
	return 0
}

func (m *Ability) GetMAKT() int32 {
	if m != nil {
		return m.MAKT
	}
	return 0
}

func init() {
	proto.RegisterType((*Input)(nil), "msg.Input")
	proto.RegisterType((*TransForm)(nil), "msg.TransForm")
	proto.RegisterType((*Vector3)(nil), "msg.Vector3")
	proto.RegisterType((*Quaternion)(nil), "msg.Quaternion")
	proto.RegisterType((*Position)(nil), "msg.Position")
	proto.RegisterType((*CallFuncInfo)(nil), "msg.CallFuncInfo")
	proto.RegisterType((*BasicType)(nil), "msg.BasicType")
	proto.RegisterType((*Error)(nil), "msg.Error")
	proto.RegisterType((*LoginInput)(nil), "msg.LoginInput")
	proto.RegisterType((*RegistInput)(nil), "msg.RegistInput")
	proto.RegisterType((*UserInfo)(nil), "msg.UserInfo")
	proto.RegisterType((*UserState)(nil), "msg.UserState")
	proto.RegisterType((*RoomInfo)(nil), "msg.RoomInfo")
	proto.RegisterType((*Character)(nil), "msg.Character")
	proto.RegisterType((*Color)(nil), "msg.Color")
	proto.RegisterType((*Equipment)(nil), "msg.Equipment")
	proto.RegisterType((*Ability)(nil), "msg.Ability")
	proto.RegisterEnum("msg.UserState_UserStatus", UserState_UserStatus_name, UserState_UserStatus_value)
	proto.RegisterEnum("msg.RoomInfo_RoomStatus", RoomInfo_RoomStatus_name, RoomInfo_RoomStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rpc service

type RpcClient interface {
	SyncPos(ctx context.Context, opts ...grpc.CallOption) (Rpc_SyncPosClient, error)
	CallMethod(ctx context.Context, opts ...grpc.CallOption) (Rpc_CallMethodClient, error)
	ErrorPipLine(ctx context.Context, opts ...grpc.CallOption) (Rpc_ErrorPipLineClient, error)
	Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*UserInfo, error)
	CreateAccount(ctx context.Context, in *RegistInput, opts ...grpc.CallOption) (*Error, error)
}

type rpcClient struct {
	cc *grpc.ClientConn
}

func NewRpcClient(cc *grpc.ClientConn) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) SyncPos(ctx context.Context, opts ...grpc.CallOption) (Rpc_SyncPosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Rpc_serviceDesc.Streams[0], c.cc, "/msg.Rpc/SyncPos", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcSyncPosClient{stream}
	return x, nil
}

type Rpc_SyncPosClient interface {
	Send(*Input) error
	Recv() (*Position, error)
	grpc.ClientStream
}

type rpcSyncPosClient struct {
	grpc.ClientStream
}

func (x *rpcSyncPosClient) Send(m *Input) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcSyncPosClient) Recv() (*Position, error) {
	m := new(Position)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcClient) CallMethod(ctx context.Context, opts ...grpc.CallOption) (Rpc_CallMethodClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Rpc_serviceDesc.Streams[1], c.cc, "/msg.Rpc/CallMethod", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcCallMethodClient{stream}
	return x, nil
}

type Rpc_CallMethodClient interface {
	Send(*CallFuncInfo) error
	Recv() (*CallFuncInfo, error)
	grpc.ClientStream
}

type rpcCallMethodClient struct {
	grpc.ClientStream
}

func (x *rpcCallMethodClient) Send(m *CallFuncInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcCallMethodClient) Recv() (*CallFuncInfo, error) {
	m := new(CallFuncInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcClient) ErrorPipLine(ctx context.Context, opts ...grpc.CallOption) (Rpc_ErrorPipLineClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Rpc_serviceDesc.Streams[2], c.cc, "/msg.Rpc/ErrorPipLine", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcErrorPipLineClient{stream}
	return x, nil
}

type Rpc_ErrorPipLineClient interface {
	Send(*Error) error
	Recv() (*Error, error)
	grpc.ClientStream
}

type rpcErrorPipLineClient struct {
	grpc.ClientStream
}

func (x *rpcErrorPipLineClient) Send(m *Error) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rpcErrorPipLineClient) Recv() (*Error, error) {
	m := new(Error)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcClient) Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/msg.Rpc/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) CreateAccount(ctx context.Context, in *RegistInput, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := grpc.Invoke(ctx, "/msg.Rpc/CreateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rpc service

type RpcServer interface {
	SyncPos(Rpc_SyncPosServer) error
	CallMethod(Rpc_CallMethodServer) error
	ErrorPipLine(Rpc_ErrorPipLineServer) error
	Login(context.Context, *LoginInput) (*UserInfo, error)
	CreateAccount(context.Context, *RegistInput) (*Error, error)
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_SyncPos_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).SyncPos(&rpcSyncPosServer{stream})
}

type Rpc_SyncPosServer interface {
	Send(*Position) error
	Recv() (*Input, error)
	grpc.ServerStream
}

type rpcSyncPosServer struct {
	grpc.ServerStream
}

func (x *rpcSyncPosServer) Send(m *Position) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcSyncPosServer) Recv() (*Input, error) {
	m := new(Input)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Rpc_CallMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).CallMethod(&rpcCallMethodServer{stream})
}

type Rpc_CallMethodServer interface {
	Send(*CallFuncInfo) error
	Recv() (*CallFuncInfo, error)
	grpc.ServerStream
}

type rpcCallMethodServer struct {
	grpc.ServerStream
}

func (x *rpcCallMethodServer) Send(m *CallFuncInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcCallMethodServer) Recv() (*CallFuncInfo, error) {
	m := new(CallFuncInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Rpc_ErrorPipLine_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RpcServer).ErrorPipLine(&rpcErrorPipLineServer{stream})
}

type Rpc_ErrorPipLineServer interface {
	Send(*Error) error
	Recv() (*Error, error)
	grpc.ServerStream
}

type rpcErrorPipLineServer struct {
	grpc.ServerStream
}

func (x *rpcErrorPipLineServer) Send(m *Error) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rpcErrorPipLineServer) Recv() (*Error, error) {
	m := new(Error)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Rpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Rpc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Login(ctx, req.(*LoginInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Rpc/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).CreateAccount(ctx, req.(*RegistInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Rpc_Login_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Rpc_CreateAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncPos",
			Handler:       _Rpc_SyncPos_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CallMethod",
			Handler:       _Rpc_CallMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ErrorPipLine",
			Handler:       _Rpc_ErrorPipLine_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0x78, 0xbd, 0x6b, 0xef, 0x49, 0x9c, 0xa4, 0xa3, 0x0a, 0x2d, 0x56, 0x0b, 0xd1, 0x12,
	0x55, 0xa6, 0x54, 0x6e, 0x9b, 0x4a, 0x50, 0x55, 0xe5, 0xc2, 0x89, 0x9d, 0xd6, 0x4a, 0xdc, 0x98,
	0xb1, 0x5b, 0x7e, 0x6e, 0xd0, 0xc4, 0x1e, 0x3b, 0xab, 0xee, 0x8f, 0xd9, 0x9f, 0x24, 0xe6, 0x8e,
	0x2b, 0x9e, 0x81, 0x17, 0xe0, 0x61, 0xb8, 0x47, 0x3c, 0x02, 0x4f, 0x00, 0xd7, 0x68, 0xce, 0x8c,
	0xd7, 0xeb, 0x24, 0x94, 0x8a, 0x2b, 0xef, 0x77, 0xfe, 0xe6, 0xcc, 0x39, 0xdf, 0x1c, 0x1f, 0xa8,
	0x05, 0x22, 0x49, 0xf8, 0x54, 0x34, 0x67, 0x71, 0x94, 0x46, 0xd4, 0x08, 0x92, 0x69, 0xdd, 0xe6,
	0xe1, 0x5c, 0x61, 0xf7, 0x77, 0x02, 0x66, 0x37, 0x9c, 0x65, 0x29, 0xfd, 0x00, 0xac, 0xd7, 0x89,
	0x88, 0xbb, 0x63, 0x87, 0xec, 0x90, 0x86, 0xc1, 0xac, 0x0c, 0x11, 0xbd, 0x0b, 0xf0, 0xf2, 0xfb,
	0x5e, 0x74, 0x2e, 0x02, 0x11, 0xa6, 0x4e, 0x69, 0x87, 0x34, 0x4a, 0xcc, 0x3e, 0x5b, 0x08, 0xa4,
	0xfa, 0xcd, 0x52, 0x6d, 0x28, 0xf5, 0x79, 0xae, 0xbe, 0x03, 0xf6, 0xe0, 0xad, 0xe7, 0xfb, 0xaf,
	0x78, 0x20, 0x1c, 0x73, 0x87, 0x34, 0x6c, 0x66, 0x27, 0x0b, 0x01, 0xfd, 0x08, 0x00, 0xb5, 0x87,
	0x51, 0x3c, 0x12, 0x4e, 0x19, 0x9d, 0x21, 0xc9, 0x25, 0xd2, 0x7b, 0xe8, 0x05, 0x62, 0x90, 0xf2,
	0x60, 0xe6, 0x58, 0x98, 0x96, 0x9d, 0x2e, 0x04, 0xb4, 0x0e, 0x55, 0x96, 0x85, 0xa1, 0x37, 0x7d,
	0x15, 0x39, 0x15, 0x54, 0x56, 0x63, 0x8d, 0xdd, 0x53, 0xb0, 0x87, 0x31, 0x0f, 0x93, 0xc3, 0x28,
	0x0e, 0x68, 0x03, 0xaa, 0xfd, 0x28, 0xf1, 0x52, 0x2f, 0x0a, 0xf1, 0x72, 0xeb, 0x7b, 0x1b, 0xcd,
	0x20, 0x99, 0x36, 0xdf, 0x88, 0x51, 0x1a, 0xc5, 0x4f, 0x58, 0x75, 0xa6, 0xb5, 0xf4, 0x33, 0xa8,
	0xb2, 0x28, 0xe5, 0x68, 0x59, 0x42, 0xcb, 0x2d, 0xb4, 0xfc, 0x2a, 0xe3, 0xa9, 0x88, 0x43, 0x2f,
	0x0a, 0x59, 0x35, 0xd6, 0x06, 0xee, 0x13, 0xa8, 0xe8, 0x08, 0x74, 0x03, 0xc8, 0x37, 0x18, 0x9a,
	0x30, 0x72, 0x29, 0xd1, 0xb7, 0xe8, 0x4e, 0x18, 0x99, 0x4b, 0xf4, 0x1d, 0x16, 0x86, 0x30, 0xf2,
	0xa3, 0xdb, 0x06, 0x58, 0x06, 0x7b, 0x7f, 0x3f, 0x89, 0xbe, 0xc6, 0x0a, 0x11, 0x46, 0x2e, 0xdc,
	0x5f, 0xc9, 0xf2, 0x4a, 0xf4, 0x31, 0x58, 0xfd, 0x28, 0xe9, 0xf1, 0x99, 0x43, 0x76, 0x8c, 0xc6,
	0xfa, 0xde, 0x87, 0x98, 0xf2, 0x42, 0xdd, 0x54, 0xba, 0x4e, 0x98, 0xc6, 0x73, 0x66, 0xcd, 0x10,
	0xac, 0x16, 0xb6, 0x74, 0xa5, 0xb0, 0xf5, 0x2e, 0xac, 0x17, 0x9c, 0xe8, 0x36, 0x18, 0x6f, 0xc5,
	0x5c, 0xd3, 0x42, 0x7e, 0xd2, 0x5d, 0x30, 0xcf, 0xb9, 0x9f, 0x09, 0x5d, 0xa3, 0x4d, 0x3c, 0x30,
	0xaf, 0x37, 0x53, 0xca, 0x67, 0xa5, 0xa7, 0xc4, 0xfd, 0xad, 0x04, 0x1b, 0x07, 0xdc, 0xf7, 0x0f,
	0xb3, 0x70, 0xd4, 0x0d, 0x27, 0xd1, 0x4a, 0xd3, 0x08, 0xf2, 0x21, 0x6f, 0x9a, 0xd4, 0x0d, 0x79,
	0x3c, 0x15, 0x69, 0x77, 0xac, 0x93, 0xaa, 0xa6, 0x1a, 0x4b, 0x7a, 0x1e, 0xc6, 0x51, 0xd0, 0x1d,
	0x63, 0x11, 0x0c, 0x66, 0x4d, 0x10, 0xad, 0xde, 0xc4, 0xbc, 0x4a, 0x11, 0x0a, 0x65, 0x79, 0x32,
	0x72, 0xc7, 0x66, 0xe5, 0x49, 0x16, 0x8e, 0x68, 0x03, 0x2a, 0x32, 0x52, 0x3f, 0x4a, 0x90, 0x35,
	0xd7, 0xd3, 0xaf, 0x4c, 0x94, 0x5a, 0x5e, 0x73, 0x18, 0x49, 0xbb, 0xea, 0xcd, 0xd7, 0x4c, 0xa5,
	0x92, 0xde, 0x06, 0xf3, 0x0d, 0x16, 0xc3, 0x46, 0xfe, 0xaa, 0xcb, 0xd3, 0xfb, 0x60, 0xf6, 0x79,
	0xcc, 0x03, 0x07, 0xb0, 0x27, 0xb7, 0x9b, 0xd3, 0x28, 0x9a, 0xfa, 0xfa, 0x19, 0x9e, 0x66, 0x93,
	0x66, 0x2b, 0x9c, 0x33, 0x73, 0x26, 0x4d, 0xe8, 0x3d, 0xb0, 0xd0, 0x36, 0x71, 0xd6, 0xd1, 0x58,
	0x1d, 0xb4, 0xcf, 0x13, 0x6f, 0x34, 0x9c, 0xcf, 0x04, 0xb3, 0xd0, 0x2c, 0x71, 0x7f, 0x21, 0x60,
	0xe7, 0x52, 0xba, 0x09, 0x64, 0xa0, 0x4a, 0xf8, 0x72, 0x8d, 0x91, 0x44, 0xe2, 0x63, 0x55, 0x36,
	0x89, 0x7d, 0x89, 0x0f, 0xd5, 0x83, 0x94, 0x78, 0x22, 0x71, 0x17, 0x8b, 0x67, 0x4a, 0xec, 0x49,
	0xbc, 0x8f, 0x15, 0xab, 0x4a, 0x7c, 0x2a, 0x71, 0x1b, 0x0b, 0x45, 0x24, 0x1e, 0xd3, 0x5d, 0x20,
	0x2d, 0x5d, 0xa1, 0x1b, 0xb3, 0x97, 0x56, 0x7c, 0xdf, 0x82, 0x72, 0x9b, 0xa7, 0xdc, 0x0d, 0xc0,
	0xec, 0xc4, 0x71, 0x14, 0x53, 0x07, 0x2a, 0x9d, 0x38, 0x96, 0x19, 0xea, 0xfe, 0x56, 0x84, 0x82,
	0xb2, 0x85, 0x9d, 0x38, 0xee, 0x25, 0x53, 0xcc, 0xd2, 0x66, 0x96, 0x40, 0xb4, 0x42, 0x09, 0xe3,
	0x0a, 0x25, 0xfe, 0xa5, 0xed, 0xee, 0x73, 0x80, 0xe3, 0x68, 0xea, 0x85, 0x6a, 0x76, 0xd5, 0xa1,
	0x2a, 0x67, 0x17, 0x0e, 0x19, 0x4d, 0xaa, 0x4c, 0x63, 0x49, 0x81, 0x7e, 0x72, 0x31, 0xd6, 0x67,
	0x96, 0x67, 0xc9, 0xc5, 0xd8, 0x1d, 0xc0, 0x3a, 0x13, 0x53, 0x2f, 0x49, 0xff, 0x97, 0xbb, 0xec,
	0x78, 0x27, 0xe0, 0x9e, 0xaf, 0xb3, 0x35, 0x85, 0x04, 0xee, 0xdf, 0x44, 0x85, 0x59, 0xd0, 0xfc,
	0x5d, 0x21, 0x5f, 0x67, 0xde, 0x82, 0xe2, 0xe5, 0x2c, 0xf3, 0xc6, 0xf4, 0x00, 0x36, 0x4e, 0x2e,
	0xc2, 0x83, 0x33, 0x1e, 0xf3, 0x51, 0x2a, 0x62, 0xc7, 0x40, 0x22, 0x7c, 0x8c, 0x44, 0x58, 0x04,
	0x6d, 0x16, 0x2d, 0xd4, 0x7b, 0xde, 0x88, 0x0a, 0x22, 0xba, 0x0b, 0xb5, 0xd7, 0x89, 0x18, 0x2f,
	0xa3, 0xa8, 0x9a, 0xd5, 0xb2, 0xa2, 0xb0, 0x7e, 0x02, 0xb7, 0xae, 0x05, 0x7a, 0xdf, 0x37, 0x9e,
	0x7b, 0x15, 0xdf, 0xf8, 0x4f, 0x04, 0x6c, 0x99, 0xe3, 0x20, 0xe5, 0xa9, 0xa0, 0x0f, 0xc1, 0xc4,
	0x0f, 0x8c, 0xb5, 0xa9, 0x87, 0x51, 0xae, 0xce, 0xbf, 0xb2, 0x84, 0x99, 0x89, 0x94, 0xb8, 0x07,
	0x00, 0x4b, 0x21, 0xdd, 0x04, 0x38, 0x09, 0x0f, 0x62, 0xc1, 0x53, 0x2f, 0x9c, 0x6e, 0xaf, 0x51,
	0x1b, 0x4c, 0x6c, 0xf4, 0x36, 0xa1, 0xeb, 0x50, 0x39, 0x99, 0x4c, 0x7c, 0x2f, 0x14, 0xdb, 0x25,
	0x5a, 0x03, 0xfb, 0x24, 0xec, 0xfb, 0x7c, 0x2e, 0xcd, 0x0c, 0xf7, 0xe7, 0xb2, 0x9c, 0xdc, 0x51,
	0x80, 0xc5, 0x5f, 0x14, 0x98, 0x14, 0x0a, 0x4c, 0xa1, 0x8c, 0xcd, 0xd0, 0x7d, 0x0c, 0x65, 0x23,
	0xea, 0x50, 0x7d, 0xc1, 0x03, 0x81, 0x5c, 0xd5, 0xc4, 0x9b, 0x6a, 0x2c, 0xe7, 0xca, 0xc9, 0x45,
	0x28, 0x62, 0x0c, 0xa4, 0xea, 0x68, 0x47, 0x0b, 0x01, 0xfd, 0x52, 0xe5, 0xdc, 0x0d, 0xe5, 0x99,
	0x8e, 0x89, 0xcd, 0xba, 0x8b, 0x37, 0x5d, 0x24, 0xd1, 0x5c, 0xea, 0x55, 0xab, 0x20, 0xcb, 0x05,
	0xf4, 0x19, 0xd8, 0x4c, 0xf0, 0xf1, 0x5c, 0xda, 0x38, 0x16, 0x7a, 0xdf, 0x59, 0xf5, 0xce, 0xd5,
	0xca, 0xd9, 0x8e, 0x17, 0x98, 0x3e, 0x02, 0x4b, 0x95, 0x0a, 0xdf, 0xe6, 0xe6, 0x9e, 0x73, 0xc5,
	0x31, 0x8a, 0x02, 0x5d, 0x5f, 0x2b, 0x51, 0x25, 0x6d, 0xc0, 0xd6, 0xb1, 0x98, 0xa4, 0x3d, 0xcf,
	0xf7, 0xbd, 0x81, 0x18, 0x45, 0xe1, 0x18, 0x07, 0x9a, 0xc1, 0xb6, 0xfc, 0x55, 0x71, 0xfd, 0x18,
	0xb6, 0xae, 0xa4, 0x7d, 0x03, 0x31, 0x3e, 0x59, 0x25, 0x46, 0x6d, 0x85, 0xa3, 0x05, 0x5e, 0xd4,
	0x9f, 0xc3, 0xe6, 0xea, 0x35, 0x6e, 0x08, 0x76, 0xbb, 0x18, 0xac, 0x5a, 0x64, 0xd5, 0xe7, 0x00,
	0xcb, 0xbb, 0xc8, 0x76, 0xf7, 0x63, 0x31, 0xe3, 0xb1, 0x62, 0xc5, 0x4a, 0xf7, 0x09, 0x05, 0xb0,
	0x3a, 0xe1, 0x58, 0x7e, 0x97, 0xdc, 0x3f, 0x0d, 0xb0, 0x97, 0x4f, 0xe2, 0x26, 0x2a, 0xec, 0x42,
	0x2d, 0x37, 0xc0, 0xde, 0x2b, 0x4e, 0xd4, 0x46, 0x45, 0x61, 0x4e, 0x18, 0xa3, 0x40, 0x98, 0x1d,
	0x30, 0x0f, 0x22, 0x3f, 0x52, 0x0f, 0x6b, 0x7d, 0x0f, 0xd4, 0x9b, 0x90, 0x12, 0x66, 0x8e, 0xe4,
	0x8f, 0xbc, 0xcf, 0xb1, 0x38, 0x17, 0x3e, 0x0e, 0x56, 0x93, 0x99, 0xbe, 0x04, 0xf2, 0xde, 0x9d,
	0x4b, 0xb5, 0xc1, 0x98, 0xcc, 0x10, 0x97, 0xf8, 0x07, 0xdc, 0xe3, 0x97, 0x2f, 0x05, 0xf7, 0xd3,
	0x33, 0x07, 0xd4, 0xd6, 0x14, 0x2c, 0x04, 0xf4, 0x1e, 0x54, 0x5a, 0xa7, 0x9e, 0xef, 0xa5, 0x73,
	0x3d, 0x80, 0xd5, 0xbe, 0xa2, 0x65, 0xac, 0xc2, 0xd5, 0x07, 0x6d, 0xc3, 0x46, 0xe7, 0x87, 0xcc,
	0x9b, 0xc9, 0x55, 0x4b, 0xfe, 0xff, 0x57, 0x91, 0x4a, 0x3b, 0xab, 0x4f, 0xb5, 0x59, 0x34, 0xd1,
	0x63, 0x43, 0x14, 0x44, 0xf4, 0x01, 0x94, 0x5b, 0x69, 0x1a, 0x3b, 0x36, 0x7a, 0x3b, 0x57, 0xbc,
	0xa5, 0x4a, 0x79, 0x95, 0x79, 0x9a, 0xe2, 0xf8, 0xb8, 0x16, 0xf0, 0x7d, 0xc7, 0x47, 0xee, 0x58,
	0xa4, 0xc9, 0x17, 0x60, 0xe7, 0x67, 0x14, 0x03, 0xd9, 0x37, 0x30, 0xa4, 0x54, 0x64, 0xc8, 0x63,
	0xdd, 0x0d, 0xb9, 0x1b, 0x31, 0x74, 0x31, 0x19, 0x41, 0xf4, 0x02, 0x8d, 0x4d, 0x46, 0xa6, 0x12,
	0xed, 0x63, 0x0f, 0x4d, 0x46, 0x4e, 0xdd, 0x3f, 0x08, 0xd8, 0x79, 0x12, 0x79, 0x8b, 0x49, 0xa1,
	0xc5, 0x14, 0xca, 0x05, 0x4e, 0x94, 0x53, 0x4d, 0x05, 0x24, 0x91, 0x51, 0x20, 0xd1, 0x7f, 0x53,
	0xa1, 0xd0, 0x44, 0xf3, 0x5d, 0x4d, 0xdc, 0x84, 0xd2, 0x41, 0x5b, 0x73, 0xa3, 0x34, 0x6a, 0xab,
	0x45, 0x9c, 0x9f, 0xfa, 0x02, 0x7b, 0x6f, 0xca, 0x45, 0x5c, 0x22, 0x49, 0x99, 0x6e, 0x78, 0x2e,
	0xc2, 0x34, 0x8a, 0xe7, 0xf8, 0x80, 0x4d, 0x66, 0x7b, 0x0b, 0x81, 0x7b, 0x91, 0x9f, 0x26, 0x6b,
	0xd8, 0x1a, 0x1e, 0xe9, 0x82, 0x18, 0x7c, 0x78, 0x24, 0x25, 0xed, 0xce, 0xa1, 0x2e, 0x8a, 0x31,
	0xee, 0x1c, 0x4a, 0xc9, 0xa0, 0xdf, 0xd6, 0xfb, 0xba, 0x91, 0xf4, 0xdb, 0x78, 0x71, 0x29, 0xb2,
	0x50, 0x54, 0x4e, 0x07, 0xfd, 0xb6, 0x4c, 0xad, 0xd7, 0x57, 0x3b, 0x03, 0x2b, 0x05, 0x7d, 0x69,
	0xd3, 0x6b, 0x1d, 0x0d, 0x35, 0xb9, 0xcb, 0x41, 0xeb, 0x68, 0xb8, 0xf7, 0x17, 0x01, 0x83, 0xcd,
	0x46, 0xf4, 0x3e, 0x54, 0x06, 0xf3, 0x70, 0x24, 0x37, 0x22, 0x55, 0x0c, 0xfc, 0x6f, 0xad, 0xd7,
	0x56, 0x96, 0x51, 0x77, 0xad, 0x41, 0x1e, 0x11, 0xfa, 0x14, 0x40, 0x2e, 0x85, 0x3d, 0x91, 0x9e,
	0x45, 0x63, 0x7a, 0x4b, 0xd5, 0xae, 0xb0, 0x25, 0xd6, 0xaf, 0x8b, 0xb4, 0xe7, 0x03, 0xd8, 0xc0,
	0x35, 0xa3, 0xef, 0xcd, 0x8e, 0xbd, 0x50, 0xe8, 0xa3, 0x50, 0x54, 0x2f, 0x7c, 0x6b, 0xeb, 0x4f,
	0xf5, 0x9f, 0x07, 0x55, 0x5b, 0xfc, 0x72, 0x63, 0xa8, 0xaf, 0x4e, 0x2d, 0x77, 0x8d, 0x3e, 0x84,
	0x1a, 0xfe, 0xeb, 0x88, 0xd6, 0x68, 0x14, 0x65, 0x61, 0x4a, 0xb7, 0xd5, 0x5c, 0x5d, 0xae, 0x09,
	0xab, 0xf1, 0x4f, 0x2d, 0xdc, 0x85, 0x9e, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x56, 0x01,
	0x17, 0x61, 0x0d, 0x00, 0x00,
}
