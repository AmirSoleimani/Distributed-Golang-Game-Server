// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	ClientFunc
	ServerFunc
	Vector3
	Rotation
	Pos
	PosReply
	Callin
	Reply
	ClientStart
	User
	UserRegister
	UserRegisterInfo
	UserInfo
	Color
	Equipment
	Ability
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientFuncF int32

const (
	ClientFunc_shoot         ClientFuncF = 0
	ClientFunc_behit         ClientFuncF = 1
	ClientFunc_die           ClientFuncF = 2
	ClientFunc_kick          ClientFuncF = 3
	ClientFunc_creatEntity   ClientFuncF = 4
	ClientFunc_destoryEntity ClientFuncF = 5
)

var ClientFuncF_name = map[int32]string{
	0: "shoot",
	1: "behit",
	2: "die",
	3: "kick",
	4: "creatEntity",
	5: "destoryEntity",
}
var ClientFuncF_value = map[string]int32{
	"shoot":         0,
	"behit":         1,
	"die":           2,
	"kick":          3,
	"creatEntity":   4,
	"destoryEntity": 5,
}

func (x ClientFuncF) String() string {
	return proto.EnumName(ClientFuncF_name, int32(x))
}
func (ClientFuncF) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ServerFuncF int32

const (
	ServerFunc_shoot ServerFuncF = 0
)

var ServerFuncF_name = map[int32]string{
	0: "shoot",
}
var ServerFuncF_value = map[string]int32{
	"shoot": 0,
}

func (x ServerFuncF) String() string {
	return proto.EnumName(ServerFuncF_name, int32(x))
}
func (ServerFuncF) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type ClientFunc struct {
}

func (m *ClientFunc) Reset()                    { *m = ClientFunc{} }
func (m *ClientFunc) String() string            { return proto.CompactTextString(m) }
func (*ClientFunc) ProtoMessage()               {}
func (*ClientFunc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServerFunc struct {
}

func (m *ServerFunc) Reset()                    { *m = ServerFunc{} }
func (m *ServerFunc) String() string            { return proto.CompactTextString(m) }
func (*ServerFunc) ProtoMessage()               {}
func (*ServerFunc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Vector3 struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (m *Vector3) Reset()                    { *m = Vector3{} }
func (m *Vector3) String() string            { return proto.CompactTextString(m) }
func (*Vector3) ProtoMessage()               {}
func (*Vector3) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Vector3) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector3) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vector3) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

type Rotation struct {
	Yaw   float32 `protobuf:"fixed32,1,opt,name=yaw" json:"yaw,omitempty"`
	Pitch float32 `protobuf:"fixed32,2,opt,name=pitch" json:"pitch,omitempty"`
	Row   float32 `protobuf:"fixed32,3,opt,name=row" json:"row,omitempty"`
}

func (m *Rotation) Reset()                    { *m = Rotation{} }
func (m *Rotation) String() string            { return proto.CompactTextString(m) }
func (*Rotation) ProtoMessage()               {}
func (*Rotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Rotation) GetYaw() float32 {
	if m != nil {
		return m.Yaw
	}
	return 0
}

func (m *Rotation) GetPitch() float32 {
	if m != nil {
		return m.Pitch
	}
	return 0
}

func (m *Rotation) GetRow() float32 {
	if m != nil {
		return m.Row
	}
	return 0
}

type Pos struct {
	Id       string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rotation *Rotation `protobuf:"bytes,2,opt,name=rotation" json:"rotation,omitempty"`
	Vector3  *Vector3  `protobuf:"bytes,3,opt,name=vector3" json:"vector3,omitempty"`
}

func (m *Pos) Reset()                    { *m = Pos{} }
func (m *Pos) String() string            { return proto.CompactTextString(m) }
func (*Pos) ProtoMessage()               {}
func (*Pos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Pos) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Pos) GetRotation() *Rotation {
	if m != nil {
		return m.Rotation
	}
	return nil
}

func (m *Pos) GetVector3() *Vector3 {
	if m != nil {
		return m.Vector3
	}
	return nil
}

type PosReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *PosReply) Reset()                    { *m = PosReply{} }
func (m *PosReply) String() string            { return proto.CompactTextString(m) }
func (*PosReply) ProtoMessage()               {}
func (*PosReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PosReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PosReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Callin struct {
	Id     string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Method ServerFuncF                     `protobuf:"varint,2,opt,name=method,enum=msg.ServerFuncF" json:"method,omitempty"`
	Stamp  int64                           `protobuf:"varint,4,opt,name=stamp" json:"stamp,omitempty"`
	Param  map[string]*google_protobuf.Any `protobuf:"bytes,3,rep,name=param" json:"param,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Callin) Reset()                    { *m = Callin{} }
func (m *Callin) String() string            { return proto.CompactTextString(m) }
func (*Callin) ProtoMessage()               {}
func (*Callin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Callin) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Callin) GetMethod() ServerFuncF {
	if m != nil {
		return m.Method
	}
	return ServerFunc_shoot
}

func (m *Callin) GetStamp() int64 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

func (m *Callin) GetParam() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Param
	}
	return nil
}

type Reply struct {
	Error string                          `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Cb    ClientFuncF                     `protobuf:"varint,2,opt,name=cb,enum=msg.ClientFuncF" json:"cb,omitempty"`
	Param map[string]*google_protobuf.Any `protobuf:"bytes,3,rep,name=param" json:"param,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	To    string                          `protobuf:"bytes,5,opt,name=To,json=to" json:"To,omitempty"`
	Stamp int64                           `protobuf:"varint,4,opt,name=stamp" json:"stamp,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Reply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Reply) GetCb() ClientFuncF {
	if m != nil {
		return m.Cb
	}
	return ClientFunc_shoot
}

func (m *Reply) GetParam() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *Reply) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Reply) GetStamp() int64 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

type ClientStart struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Stamp int64  `protobuf:"varint,2,opt,name=stamp" json:"stamp,omitempty"`
}

func (m *ClientStart) Reset()                    { *m = ClientStart{} }
func (m *ClientStart) String() string            { return proto.CompactTextString(m) }
func (*ClientStart) ProtoMessage()               {}
func (*ClientStart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ClientStart) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientStart) GetStamp() int64 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

type User struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Pswd string `protobuf:"bytes,2,opt,name=Pswd,json=pswd" json:"Pswd,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPswd() string {
	if m != nil {
		return m.Pswd
	}
	return ""
}

type UserRegister struct {
	Name  string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Pswd  string `protobuf:"bytes,2,opt,name=Pswd,json=pswd" json:"Pswd,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=Email,json=email" json:"Email,omitempty"`
}

func (m *UserRegister) Reset()                    { *m = UserRegister{} }
func (m *UserRegister) String() string            { return proto.CompactTextString(m) }
func (*UserRegister) ProtoMessage()               {}
func (*UserRegister) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UserRegister) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserRegister) GetPswd() string {
	if m != nil {
		return m.Pswd
	}
	return ""
}

func (m *UserRegister) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UserRegisterInfo struct {
	Error string `protobuf:"bytes,1,opt,name=Error,json=error" json:"Error,omitempty"`
}

func (m *UserRegisterInfo) Reset()                    { *m = UserRegisterInfo{} }
func (m *UserRegisterInfo) String() string            { return proto.CompactTextString(m) }
func (*UserRegisterInfo) ProtoMessage()               {}
func (*UserRegisterInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UserRegisterInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UserInfo struct {
	Id           string                `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Error        string                `protobuf:"bytes,2,opt,name=Error,json=error" json:"Error,omitempty"`
	Color        *Color                `protobuf:"bytes,3,opt,name=Color,json=color" json:"Color,omitempty"`
	Level        int32                 `protobuf:"varint,4,opt,name=Level,json=level" json:"Level,omitempty"`
	Exp          int32                 `protobuf:"varint,5,opt,name=Exp,json=exp" json:"Exp,omitempty"`
	Ability      *Ability              `protobuf:"bytes,6,opt,name=Ability,json=ability" json:"Ability,omitempty"`
	EquipmentMap map[string]*Equipment `protobuf:"bytes,7,rep,name=EquipmentMap,json=equipmentMap" json:"EquipmentMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UserInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserInfo) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *UserInfo) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *UserInfo) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *UserInfo) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *UserInfo) GetAbility() *Ability {
	if m != nil {
		return m.Ability
	}
	return nil
}

func (m *UserInfo) GetEquipmentMap() map[string]*Equipment {
	if m != nil {
		return m.EquipmentMap
	}
	return nil
}

type Color struct {
	R int32 `protobuf:"varint,1,opt,name=R,json=r" json:"R,omitempty"`
	G int32 `protobuf:"varint,2,opt,name=G,json=g" json:"G,omitempty"`
	B int32 `protobuf:"varint,3,opt,name=B,json=b" json:"B,omitempty"`
}

func (m *Color) Reset()                    { *m = Color{} }
func (m *Color) String() string            { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()               {}
func (*Color) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Color) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *Color) GetG() int32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *Color) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

type Equipment struct {
	Name      string   `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Type      string   `protobuf:"bytes,2,opt,name=Type,json=type" json:"Type,omitempty"`
	Id        string   `protobuf:"bytes,3,opt,name=Id,json=id" json:"Id,omitempty"`
	Color     *Color   `protobuf:"bytes,4,opt,name=Color,json=color" json:"Color,omitempty"`
	Ability   *Ability `protobuf:"bytes,5,opt,name=Ability,json=ability" json:"Ability,omitempty"`
	CD        int32    `protobuf:"varint,6,opt,name=CD,json=cD" json:"CD,omitempty"`
	Usable    int32    `protobuf:"varint,7,opt,name=Usable,json=usable" json:"Usable,omitempty"`
	Inventory int32    `protobuf:"varint,8,opt,name=Inventory,json=inventory" json:"Inventory,omitempty"`
}

func (m *Equipment) Reset()                    { *m = Equipment{} }
func (m *Equipment) String() string            { return proto.CompactTextString(m) }
func (*Equipment) ProtoMessage()               {}
func (*Equipment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Equipment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Equipment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Equipment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Equipment) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *Equipment) GetAbility() *Ability {
	if m != nil {
		return m.Ability
	}
	return nil
}

func (m *Equipment) GetCD() int32 {
	if m != nil {
		return m.CD
	}
	return 0
}

func (m *Equipment) GetUsable() int32 {
	if m != nil {
		return m.Usable
	}
	return 0
}

func (m *Equipment) GetInventory() int32 {
	if m != nil {
		return m.Inventory
	}
	return 0
}

type Ability struct {
	ATK  int32   `protobuf:"varint,1,opt,name=ATK,json=aTK" json:"ATK,omitempty"`
	DEF  int32   `protobuf:"varint,2,opt,name=DEF,json=dEF" json:"DEF,omitempty"`
	SPD  float32 `protobuf:"fixed32,3,opt,name=SPD,json=sPD" json:"SPD,omitempty"`
	MP   int32   `protobuf:"varint,4,opt,name=MP,json=mP" json:"MP,omitempty"`
	MAKT int32   `protobuf:"varint,5,opt,name=MAKT,json=mAKT" json:"MAKT,omitempty"`
}

func (m *Ability) Reset()                    { *m = Ability{} }
func (m *Ability) String() string            { return proto.CompactTextString(m) }
func (*Ability) ProtoMessage()               {}
func (*Ability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Ability) GetATK() int32 {
	if m != nil {
		return m.ATK
	}
	return 0
}

func (m *Ability) GetDEF() int32 {
	if m != nil {
		return m.DEF
	}
	return 0
}

func (m *Ability) GetSPD() float32 {
	if m != nil {
		return m.SPD
	}
	return 0
}

func (m *Ability) GetMP() int32 {
	if m != nil {
		return m.MP
	}
	return 0
}

func (m *Ability) GetMAKT() int32 {
	if m != nil {
		return m.MAKT
	}
	return 0
}

func init() {
	proto.RegisterType((*ClientFunc)(nil), "msg.ClientFunc")
	proto.RegisterType((*ServerFunc)(nil), "msg.ServerFunc")
	proto.RegisterType((*Vector3)(nil), "msg.Vector3")
	proto.RegisterType((*Rotation)(nil), "msg.Rotation")
	proto.RegisterType((*Pos)(nil), "msg.Pos")
	proto.RegisterType((*PosReply)(nil), "msg.PosReply")
	proto.RegisterType((*Callin)(nil), "msg.Callin")
	proto.RegisterType((*Reply)(nil), "msg.Reply")
	proto.RegisterType((*ClientStart)(nil), "msg.ClientStart")
	proto.RegisterType((*User)(nil), "msg.User")
	proto.RegisterType((*UserRegister)(nil), "msg.UserRegister")
	proto.RegisterType((*UserRegisterInfo)(nil), "msg.UserRegisterInfo")
	proto.RegisterType((*UserInfo)(nil), "msg.UserInfo")
	proto.RegisterType((*Color)(nil), "msg.Color")
	proto.RegisterType((*Equipment)(nil), "msg.Equipment")
	proto.RegisterType((*Ability)(nil), "msg.Ability")
	proto.RegisterEnum("msg.ClientFuncF", ClientFuncF_name, ClientFuncF_value)
	proto.RegisterEnum("msg.ServerFuncF", ServerFuncF_name, ServerFuncF_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rpc service

type RpcClient interface {
	SyncPostion(ctx context.Context, in *Pos, opts ...grpc.CallOption) (*PosReply, error)
	CallServer(ctx context.Context, in *Callin, opts ...grpc.CallOption) (*Reply, error)
	CallClient(ctx context.Context, in *ClientStart, opts ...grpc.CallOption) (Rpc_CallClientClient, error)
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserInfo, error)
	CreateAccount(ctx context.Context, in *UserRegister, opts ...grpc.CallOption) (*UserRegisterInfo, error)
}

type rpcClient struct {
	cc *grpc.ClientConn
}

func NewRpcClient(cc *grpc.ClientConn) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) SyncPostion(ctx context.Context, in *Pos, opts ...grpc.CallOption) (*PosReply, error) {
	out := new(PosReply)
	err := grpc.Invoke(ctx, "/msg.Rpc/syncPostion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) CallServer(ctx context.Context, in *Callin, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/msg.Rpc/callServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) CallClient(ctx context.Context, in *ClientStart, opts ...grpc.CallOption) (Rpc_CallClientClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Rpc_serviceDesc.Streams[0], c.cc, "/msg.Rpc/callClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &rpcCallClientClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rpc_CallClientClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type rpcCallClientClient struct {
	grpc.ClientStream
}

func (x *rpcCallClientClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rpcClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := grpc.Invoke(ctx, "/msg.Rpc/login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) CreateAccount(ctx context.Context, in *UserRegister, opts ...grpc.CallOption) (*UserRegisterInfo, error) {
	out := new(UserRegisterInfo)
	err := grpc.Invoke(ctx, "/msg.Rpc/createAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rpc service

type RpcServer interface {
	SyncPostion(context.Context, *Pos) (*PosReply, error)
	CallServer(context.Context, *Callin) (*Reply, error)
	CallClient(*ClientStart, Rpc_CallClientServer) error
	Login(context.Context, *User) (*UserInfo, error)
	CreateAccount(context.Context, *UserRegister) (*UserRegisterInfo, error)
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_SyncPostion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).SyncPostion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Rpc/SyncPostion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).SyncPostion(ctx, req.(*Pos))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_CallServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Callin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).CallServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Rpc/CallServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).CallServer(ctx, req.(*Callin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_CallClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientStart)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RpcServer).CallClient(m, &rpcCallClientServer{stream})
}

type Rpc_CallClientServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type rpcCallClientServer struct {
	grpc.ServerStream
}

func (x *rpcCallClientServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

func _Rpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Rpc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Rpc/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).CreateAccount(ctx, req.(*UserRegister))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "syncPostion",
			Handler:    _Rpc_SyncPostion_Handler,
		},
		{
			MethodName: "callServer",
			Handler:    _Rpc_CallServer_Handler,
		},
		{
			MethodName: "login",
			Handler:    _Rpc_Login_Handler,
		},
		{
			MethodName: "createAccount",
			Handler:    _Rpc_CreateAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "callClient",
			Handler:       _Rpc_CallClient_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}

func init() { proto.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 953 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4b, 0x8f, 0xe3, 0x44,
	0x10, 0x1e, 0xdb, 0x71, 0x1e, 0x95, 0x07, 0x99, 0xd6, 0xee, 0xca, 0x8a, 0x56, 0x62, 0x30, 0x08,
	0xc2, 0x43, 0xd6, 0x92, 0xb9, 0x20, 0x38, 0x85, 0x24, 0x83, 0x46, 0xb3, 0xb3, 0x58, 0x3d, 0x59,
	0x8e, 0x48, 0x1d, 0xa7, 0x93, 0x58, 0xb1, 0xdd, 0xc6, 0xee, 0x64, 0xc6, 0xfb, 0xcb, 0xf8, 0x1f,
	0x1c, 0xf8, 0x01, 0xdc, 0xf8, 0x15, 0xa8, 0x1f, 0xf1, 0x38, 0x64, 0x16, 0x71, 0xd8, 0x93, 0xbb,
	0xaa, 0xbf, 0x7a, 0x7d, 0x55, 0x5d, 0x86, 0x6e, 0x4c, 0xf3, 0x9c, 0xac, 0xa9, 0x97, 0x66, 0x8c,
	0x33, 0x64, 0xc5, 0xf9, 0x7a, 0xd0, 0x22, 0x49, 0xa1, 0x64, 0xf7, 0x57, 0x80, 0x49, 0x14, 0xd2,
	0x84, 0x5f, 0xed, 0x92, 0xc0, 0xf5, 0xc1, 0x58, 0xa1, 0x16, 0xd8, 0xf9, 0x86, 0x31, 0xde, 0x3f,
	0x13, 0xc7, 0x05, 0xdd, 0x84, 0xbc, 0x6f, 0xa0, 0x06, 0x58, 0xcb, 0x90, 0xf6, 0x4d, 0xd4, 0x84,
	0xda, 0x36, 0x0c, 0xb6, 0x7d, 0x0b, 0x7d, 0x04, 0xed, 0x20, 0xa3, 0x84, 0xcf, 0x12, 0x1e, 0xf2,
	0xa2, 0x5f, 0x43, 0xe7, 0xd0, 0x5d, 0xd2, 0x9c, 0xb3, 0xac, 0xd0, 0x2a, 0xdb, 0x7d, 0x09, 0x70,
	0x47, 0xb3, 0x3d, 0xcd, 0xa4, 0xff, 0xde, 0xb1, 0x7f, 0xf7, 0x12, 0x1a, 0xbf, 0xd0, 0x80, 0xb3,
	0xec, 0x12, 0x75, 0xc0, 0x78, 0x70, 0x8c, 0x0b, 0x63, 0x68, 0x62, 0xe3, 0x41, 0x48, 0x85, 0x63,
	0x2a, 0xa9, 0x10, 0xd2, 0x3b, 0xc7, 0x52, 0xd2, 0x3b, 0x77, 0x0a, 0x4d, 0xcc, 0x38, 0xe1, 0x21,
	0x4b, 0x50, 0x1f, 0xac, 0x82, 0xdc, 0x6b, 0x3b, 0x71, 0x44, 0xcf, 0xc0, 0x4e, 0x43, 0x1e, 0x6c,
	0xb4, 0xb5, 0x12, 0x04, 0x2e, 0x63, 0xf7, 0xda, 0x87, 0x38, 0xba, 0x1b, 0xb0, 0x7c, 0x96, 0xa3,
	0x1e, 0x98, 0xe1, 0x52, 0xda, 0xb7, 0xb0, 0x19, 0x2e, 0xd1, 0x97, 0xd0, 0xcc, 0xb4, 0x73, 0xe9,
	0xa1, 0x3d, 0xea, 0x7a, 0x71, 0xbe, 0xf6, 0x0e, 0x11, 0x71, 0x79, 0x8d, 0x3e, 0x87, 0xc6, 0x5e,
	0x25, 0x2f, 0xfd, 0xb6, 0x47, 0x1d, 0x89, 0xd4, 0x05, 0xe1, 0xc3, 0xa5, 0xfb, 0x0a, 0x9a, 0x3e,
	0xcb, 0x31, 0x4d, 0xa3, 0x42, 0x84, 0x63, 0x5b, 0x19, 0xae, 0x89, 0x4d, 0xb6, 0x15, 0xd9, 0xd2,
	0x2c, 0x63, 0x99, 0x8c, 0xd5, 0xc2, 0x4a, 0x70, 0xff, 0x34, 0xa0, 0x3e, 0x21, 0x51, 0x14, 0x26,
	0x4f, 0xe4, 0x57, 0x8f, 0x29, 0xdf, 0xb0, 0xa5, 0xb4, 0xe8, 0x8d, 0xce, 0x65, 0xcc, 0x47, 0x8a,
	0xbd, 0x15, 0xd6, 0x00, 0xe1, 0x3b, 0xe7, 0x24, 0x4e, 0x9d, 0xda, 0x85, 0x31, 0xb4, 0xb0, 0x12,
	0xd0, 0x37, 0x60, 0xa7, 0x24, 0x23, 0xb1, 0x63, 0x5d, 0x58, 0xc3, 0xf6, 0xe8, 0x85, 0xb4, 0x57,
	0xc1, 0x3c, 0x5f, 0x5c, 0xcc, 0x12, 0x9e, 0x15, 0x58, 0x81, 0x06, 0x6f, 0x00, 0x1e, 0x95, 0x82,
	0xc5, 0x2d, 0x2d, 0x74, 0x36, 0xe2, 0x88, 0xbe, 0x02, 0x7b, 0x4f, 0xa2, 0x1d, 0xd5, 0x5c, 0x3d,
	0xf3, 0xd6, 0x8c, 0xad, 0x23, 0x3d, 0x6c, 0x8b, 0xdd, 0xca, 0x1b, 0x27, 0x05, 0x56, 0x90, 0xef,
	0xcd, 0xef, 0x0c, 0xf7, 0x2f, 0x03, 0x6c, 0xc5, 0x44, 0x59, 0xb9, 0x51, 0xa9, 0x1c, 0x7d, 0x02,
	0x66, 0xb0, 0x38, 0x2a, 0xed, 0x71, 0x3a, 0xbd, 0x15, 0x36, 0x83, 0x05, 0xfa, 0xfa, 0xb8, 0x80,
	0xe7, 0xaa, 0x3d, 0xc2, 0xe7, 0x69, 0xfe, 0x82, 0xbe, 0x39, 0x73, 0x6c, 0x45, 0x1f, 0x67, 0x4f,
	0x73, 0xf2, 0xc1, 0xab, 0xbc, 0x84, 0xb6, 0x4a, 0xfb, 0x8e, 0x93, 0x8c, 0x9f, 0xf4, 0xb0, 0x4c,
	0xc2, 0xac, 0x24, 0xe1, 0x7a, 0x50, 0x7b, 0x9b, 0xd3, 0x0c, 0x21, 0xa8, 0xbd, 0x21, 0x31, 0xd5,
	0xf8, 0x5a, 0x42, 0x62, 0x2a, 0x74, 0x7e, 0x7e, 0xbf, 0xd4, 0x53, 0x52, 0x4b, 0xf3, 0xfb, 0xa5,
	0xfb, 0x1a, 0x3a, 0x02, 0x8f, 0xe9, 0x3a, 0xcc, 0xf9, 0xff, 0xb7, 0x13, 0xd1, 0x67, 0x31, 0x09,
	0x23, 0x39, 0xb4, 0x82, 0x78, 0x21, 0xb8, 0x43, 0xe8, 0x57, 0xbd, 0x5d, 0x27, 0x2b, 0x49, 0xd6,
	0xec, 0xa4, 0x45, 0xee, 0xef, 0x26, 0x34, 0x05, 0x54, 0x42, 0x7a, 0x60, 0x5e, 0xff, 0xab, 0xb4,
	0xd9, 0xc9, 0x3c, 0xa3, 0x0b, 0xb0, 0x27, 0x2c, 0x62, 0x99, 0x7e, 0x27, 0xa0, 0x1a, 0x2b, 0x34,
	0xd8, 0x0e, 0xc4, 0x47, 0xd8, 0xbd, 0xa6, 0x7b, 0x1a, 0xc9, 0xbe, 0xd8, 0xd8, 0x8e, 0x84, 0x20,
	0x3a, 0x31, 0x7b, 0x48, 0x65, 0xfb, 0x6c, 0x6c, 0xd1, 0x87, 0x54, 0xbc, 0xb9, 0xf1, 0x22, 0x8c,
	0x42, 0x5e, 0x38, 0xf5, 0xca, 0x9b, 0xd3, 0x3a, 0xdc, 0x20, 0xea, 0x80, 0x26, 0xd0, 0x99, 0xfd,
	0xb6, 0x0b, 0xd3, 0x98, 0x26, 0xfc, 0x96, 0xa4, 0x4e, 0x43, 0xce, 0xca, 0xc7, 0x12, 0x7c, 0x48,
	0xde, 0xab, 0x22, 0xd4, 0xd4, 0x74, 0x68, 0x45, 0x35, 0xf8, 0x19, 0xce, 0x4f, 0x20, 0x4f, 0x4c,
	0xc7, 0x67, 0xc7, 0xd3, 0xd1, 0x93, 0x41, 0x4a, 0xc3, 0xea, 0x5c, 0x7c, 0xab, 0x79, 0x10, 0x0b,
	0x0d, 0x4b, 0x17, 0x36, 0x36, 0xa4, 0xf4, 0x93, 0x34, 0xb6, 0xb1, 0xb1, 0x16, 0xd2, 0x8f, 0x92,
	0x28, 0x1b, 0x1b, 0x0b, 0xf7, 0x0f, 0x03, 0x5a, 0xa5, 0xaf, 0xf7, 0xf5, 0x78, 0x5e, 0xa4, 0xf4,
	0xd0, 0x63, 0x5e, 0xa4, 0x54, 0xb7, 0xc5, 0x2a, 0xdb, 0x52, 0x36, 0xa0, 0xf6, 0xbe, 0x06, 0x54,
	0x88, 0xb5, 0xff, 0x8b, 0xd8, 0x1e, 0x98, 0x93, 0xa9, 0xe4, 0xde, 0xc6, 0x66, 0x30, 0x45, 0x2f,
	0xa0, 0xfe, 0x36, 0x27, 0x8b, 0x88, 0x3a, 0x0d, 0xa9, 0xab, 0xef, 0xa4, 0x84, 0x5e, 0x42, 0xeb,
	0x3a, 0xd9, 0xd3, 0x44, 0xfc, 0x0c, 0x9c, 0xa6, 0xbc, 0x6a, 0x85, 0x07, 0x85, 0x1b, 0x94, 0xd1,
	0x04, 0x9f, 0xe3, 0xf9, 0x8d, 0x26, 0xc3, 0x22, 0xf3, 0x1b, 0xa1, 0x99, 0xce, 0xae, 0x34, 0x21,
	0xd6, 0x72, 0x76, 0x25, 0x34, 0x77, 0xfe, 0xf4, 0xb0, 0xbd, 0x73, 0x7f, 0x2a, 0xd2, 0xb8, 0xf5,
	0xf5, 0xb0, 0x98, 0xb1, 0x2f, 0x48, 0xb8, 0x1d, 0xdf, 0xcc, 0xf5, 0xa8, 0xd4, 0xe2, 0xf1, 0xcd,
	0x7c, 0xf4, 0xb7, 0x01, 0x16, 0x4e, 0x03, 0x34, 0x84, 0x76, 0x5e, 0x24, 0x81, 0xcf, 0x72, 0xb9,
	0xb6, 0x9b, 0xb2, 0x30, 0x9f, 0xe5, 0x83, 0xee, 0xe1, 0x24, 0xb7, 0x87, 0x7b, 0x86, 0xbe, 0x00,
	0x08, 0x48, 0x14, 0xa9, 0x6d, 0x8a, 0xda, 0x95, 0xd5, 0x38, 0x80, 0xc7, 0x35, 0xe3, 0x9e, 0x21,
	0x4f, 0x01, 0xd5, 0x23, 0x47, 0xfd, 0xca, 0xa2, 0x92, 0x2f, 0xfe, 0x18, 0xfd, 0xca, 0x40, 0x9f,
	0x82, 0x1d, 0xb1, 0x75, 0x98, 0xa0, 0x56, 0x39, 0x81, 0x3a, 0xfa, 0x61, 0x18, 0xdd, 0x33, 0xf4,
	0x03, 0x74, 0xe5, 0xef, 0x94, 0x8e, 0x83, 0x80, 0xed, 0x12, 0x8e, 0xce, 0x4b, 0xc4, 0xe1, 0x59,
	0x0e, 0x9e, 0x9f, 0xa8, 0x94, 0xf1, 0xa2, 0x2e, 0x77, 0xd1, 0xe5, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xcc, 0x4f, 0x64, 0x60, 0xef, 0x07, 0x00, 0x00,
}
