// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msg {

  /// <summary>Holder for reflection information generated from message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tZXNzYWdlLnByb3RvEgNtc2caCWFueS5wcm90byJVCglUcmFuc0Zvcm0S",
            "CQoBWBgBIAEoAhIJCgFZGAIgASgCEgkKAVoYAyABKAISCwoDWWF3GAQgASgC",
            "Eg0KBVBpdGNoGAUgASgCEgsKA1JvdxgGIAEoAiKUAQoIUG9zaXRpb24SKQoG",
            "UG9zTWFwGAEgAygLMhkubXNnLlBvc2l0aW9uLlBvc01hcEVudHJ5Eg4KBkZy",
            "b21JZBgCIAEoAxIOCgZSb29tSWQYAyABKAMaPQoLUG9zTWFwRW50cnkSCwoD",
            "a2V5GAEgASgDEh0KBXZhbHVlGAIgASgLMg4ubXNnLlRyYW5zRm9ybToCOAEi",
            "9wEKDENhbGxGdW5jSW5mbxIQCghSdW5uaWdObxgBIAEoCRIQCghUYXJnZXRJ",
            "ZBgCIAEoAxIOCgZGcm9tSWQYBCABKAMSEQoJVGltZVN0YW1wGAUgASgDEgwK",
            "BEZ1bmMYBiABKAkSHwoHRnJvbVBvcxgHIAEoCzIOLm1zZy5UcmFuc0Zvcm0S",
            "HQoFVG9Qb3MYCCABKAsyDi5tc2cuVHJhbnNGb3JtEg0KBVZhbHVlGAkgASgC",
            "EiMKBVBhcmFtGAogAygLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRIeCgZQYXJh",
            "bXMYCyADKAsyDi5tc2cuQmFzaWNUeXBlIoQBCglCYXNpY1R5cGUSCwoBUxgB",
            "IAEoCUgAEgsKAUwYAiABKANIABILCgFGGAMgASgCSAASCwoBSRgEIAEoBUgA",
            "EgsKAUIYBSABKAhIABILCgFEGAYgASgBSAASIQoBQRgHIAEoCzIULmdvb2ds",
            "ZS5wcm90b2J1Zi5BbnlIAEIGCgR0eXBlIkoKBUVycm9yEg8KB0VyclR5cGUY",
            "ASABKAkSDgoGRXJyTXNnGAIgASgJEhAKCFJ1bm5pZ05vGAMgASgJEg4KBkZy",
            "b21JZBgEIAEoAyIsCgpMb2dpbklucHV0EhAKCFVzZXJOYW1lGAEgASgJEgwK",
            "BFBzd2QYAiABKAkiPAoLUmVnaXN0SW5wdXQSEAoIVXNlck5hbWUYASABKAkS",
            "DAoEUHN3ZBgCIAEoCRINCgVFbWFpbBgDIAEoCSKmAQoIVXNlckluZm8SEAoI",
            "VXNlck5hbWUYASABKAkSDAoEVXVpZBgCIAEoAxI1CgxPd25DaGFyYWN0ZXIY",
            "AyADKAsyHy5tc2cuVXNlckluZm8uT3duQ2hhcmFjdGVyRW50cnkaQwoRT3du",
            "Q2hhcmFjdGVyRW50cnkSCwoDa2V5GAEgASgDEh0KBXZhbHVlGAIgASgLMg4u",
            "bXNnLkNoYXJhY3RlcjoCOAEiegoJVXNlclN0YXRlEigKBVN0YXRlGAEgASgO",
            "MhkubXNnLlVzZXJTdGF0ZS5Vc2VyU3RhdHVzIkMKClVzZXJTdGF0dXMSDgoK",
            "T25DcmVhdGluZxAAEgkKBUxvZ2luEAESCwoHT2ZmbGluZRACEg0KCU9uUGxh",
            "eWluZxADIp4DCghSb29tSW5mbxIMCgRVdWlkGAEgASgDEgwKBE5hbWUYAiAB",
            "KAkSEAoIR2FtZVR5cGUYAyABKAkSEQoJT3duZXJVdWlkGAQgASgDEjEKClVz",
            "ZXJJblJvb20YBSADKAsyHS5tc2cuUm9vbUluZm8uVXNlckluUm9vbUVudHJ5",
            "Ei8KCVJlYWR5VXNlchgGIAMoCzIcLm1zZy5Sb29tSW5mby5SZWFkeVVzZXJF",
            "bnRyeRIoCgZTdGF0dXMYByABKA4yGC5tc2cuUm9vbUluZm8uUm9vbVN0YXR1",
            "cxIXCg9MZWZ0TWlsbGlTZWNvbmQYCCABKAMaQAoPVXNlckluUm9vbUVudHJ5",
            "EgsKA2tleRgBIAEoAxIcCgV2YWx1ZRgCIAEoCzINLm1zZy5Vc2VySW5mbzoC",
            "OAEaMAoOUmVhZHlVc2VyRW50cnkSCwoDa2V5GAEgASgDEg0KBXZhbHVlGAIg",
            "ASgIOgI4ASI2CgpSb29tU3RhdHVzEg0KCVByZXBhcmluZxAAEg0KCU9uUGxh",
            "eWluZxABEgoKBkVuZGluZxACIuYCCglDaGFyYWN0ZXISDAoEVXVpZBgBIAEo",
            "AxIVCg1DaGFyYWN0ZXJUeXBlGAIgASgJEgwKBE5hbWUYAyABKAkSGQoFQ29s",
            "b3IYBCABKAsyCi5tc2cuQ29sb3ISDQoFTGV2ZWwYBSABKAUSCwoDRXhwGAYg",
            "ASgFEh0KB0FiaWxpdHkYByABKAsyDC5tc2cuQWJpbGl0eRI2CgxFcXVpcG1l",
            "bnRNYXAYCCADKAsyIC5tc2cuQ2hhcmFjdGVyLkVxdWlwbWVudE1hcEVudHJ5",
            "EiYKBEF0dHIYCSADKAsyGC5tc2cuQ2hhcmFjdGVyLkF0dHJFbnRyeRpDChFF",
            "cXVpcG1lbnRNYXBFbnRyeRILCgNrZXkYASABKAMSHQoFdmFsdWUYAiABKAsy",
            "Di5tc2cuRXF1aXBtZW50OgI4ARorCglBdHRyRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgCOgI4ASIoCgVDb2xvchIJCgFSGAEgASgFEgkKAUcY",
            "AiABKAUSCQoBQhgDIAEoBSKeAQoJRXF1aXBtZW50EgwKBE5hbWUYASABKAkS",
            "DAoEVHlwZRgCIAEoCRIMCgRVdWlkGAMgASgDEhkKBUNvbG9yGAQgASgLMgou",
            "bXNnLkNvbG9yEh0KB0FiaWxpdHkYBSABKAsyDC5tc2cuQWJpbGl0eRIKCgJD",
            "RBgGIAEoBRIOCgZVc2FibGUYByABKAUSEQoJSW52ZW50b3J5GAggASgFIkoK",
            "B0FiaWxpdHkSCwoDQVRLGAEgASgFEgsKA0RFRhgCIAEoBRILCgNTUEQYAyAB",
            "KAISCgoCTVAYBCABKAUSDAoETUFLVBgFIAEoBTL4AQoDUnBjEi0KB1N5bmNQ",
            "b3MSDS5tc2cuUG9zaXRpb24aDS5tc2cuUG9zaXRpb24iACgBMAESOAoKQ2Fs",
            "bE1ldGhvZBIRLm1zZy5DYWxsRnVuY0luZm8aES5tc2cuQ2FsbEZ1bmNJbmZv",
            "IgAoATABEiwKDEVycm9yUGlwTGluZRIKLm1zZy5FcnJvchoKLm1zZy5FcnJv",
            "ciIAKAEwARIpCgVMb2dpbhIPLm1zZy5Mb2dpbklucHV0Gg0ubXNnLlVzZXJJ",
            "bmZvIgASLwoNQ3JlYXRlQWNjb3VudBIQLm1zZy5SZWdpc3RJbnB1dBoKLm1z",
            "Zy5FcnJvciIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.TransForm), global::Msg.TransForm.Parser, new[]{ "X", "Y", "Z", "Yaw", "Pitch", "Row" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Position), global::Msg.Position.Parser, new[]{ "PosMap", "FromId", "RoomId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CallFuncInfo), global::Msg.CallFuncInfo.Parser, new[]{ "RunnigNo", "TargetId", "FromId", "TimeStamp", "Func", "FromPos", "ToPos", "Value", "Param", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.BasicType), global::Msg.BasicType.Parser, new[]{ "S", "L", "F", "I", "B", "D", "A" }, new[]{ "Type" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Error), global::Msg.Error.Parser, new[]{ "ErrType", "ErrMsg", "RunnigNo", "FromId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LoginInput), global::Msg.LoginInput.Parser, new[]{ "UserName", "Pswd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RegistInput), global::Msg.RegistInput.Parser, new[]{ "UserName", "Pswd", "Email" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.UserInfo), global::Msg.UserInfo.Parser, new[]{ "UserName", "Uuid", "OwnCharacter" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.UserState), global::Msg.UserState.Parser, new[]{ "State" }, null, new[]{ typeof(global::Msg.UserState.Types.UserStatus) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomInfo), global::Msg.RoomInfo.Parser, new[]{ "Uuid", "Name", "GameType", "OwnerUuid", "UserInRoom", "ReadyUser", "Status", "LeftMilliSecond" }, null, new[]{ typeof(global::Msg.RoomInfo.Types.RoomStatus) }, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Character), global::Msg.Character.Parser, new[]{ "Uuid", "CharacterType", "Name", "Color", "Level", "Exp", "Ability", "EquipmentMap", "Attr" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Color), global::Msg.Color.Parser, new[]{ "R", "G", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Equipment), global::Msg.Equipment.Parser, new[]{ "Name", "Type", "Uuid", "Color", "Ability", "CD", "Usable", "Inventory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Ability), global::Msg.Ability.Parser, new[]{ "ATK", "DEF", "SPD", "MP", "MAKT" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TransForm : pb::IMessage<TransForm> {
    private static readonly pb::MessageParser<TransForm> _parser = new pb::MessageParser<TransForm>(() => new TransForm());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransForm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransForm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransForm(TransForm other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      yaw_ = other.yaw_;
      pitch_ = other.pitch_;
      row_ = other.row_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransForm Clone() {
      return new TransForm(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "Yaw" field.</summary>
    public const int YawFieldNumber = 4;
    private float yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "Pitch" field.</summary>
    public const int PitchFieldNumber = 5;
    private float pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "Row" field.</summary>
    public const int RowFieldNumber = 6;
    private float row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransForm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransForm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Yaw != other.Yaw) return false;
      if (Pitch != other.Pitch) return false;
      if (Row != other.Row) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (Yaw != 0F) hash ^= Yaw.GetHashCode();
      if (Pitch != 0F) hash ^= Pitch.GetHashCode();
      if (Row != 0F) hash ^= Row.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (Yaw != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Yaw);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Pitch);
      }
      if (Row != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Row);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Yaw != 0F) {
        size += 1 + 4;
      }
      if (Pitch != 0F) {
        size += 1 + 4;
      }
      if (Row != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransForm other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Yaw != 0F) {
        Yaw = other.Yaw;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.Row != 0F) {
        Row = other.Row;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            Yaw = input.ReadFloat();
            break;
          }
          case 45: {
            Pitch = input.ReadFloat();
            break;
          }
          case 53: {
            Row = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      posMap_ = other.posMap_.Clone();
      fromId_ = other.fromId_;
      roomId_ = other.roomId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "PosMap" field.</summary>
    public const int PosMapFieldNumber = 1;
    private static readonly pbc::MapField<long, global::Msg.TransForm>.Codec _map_posMap_codec
        = new pbc::MapField<long, global::Msg.TransForm>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Msg.TransForm.Parser), 10);
    private readonly pbc::MapField<long, global::Msg.TransForm> posMap_ = new pbc::MapField<long, global::Msg.TransForm>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Msg.TransForm> PosMap {
      get { return posMap_; }
    }

    /// <summary>Field number for the "FromId" field.</summary>
    public const int FromIdFieldNumber = 2;
    private long fromId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "RoomId" field.</summary>
    public const int RoomIdFieldNumber = 3;
    private long roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PosMap.Equals(other.PosMap)) return false;
      if (FromId != other.FromId) return false;
      if (RoomId != other.RoomId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PosMap.GetHashCode();
      if (FromId != 0L) hash ^= FromId.GetHashCode();
      if (RoomId != 0L) hash ^= RoomId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      posMap_.WriteTo(output, _map_posMap_codec);
      if (FromId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FromId);
      }
      if (RoomId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RoomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += posMap_.CalculateSize(_map_posMap_codec);
      if (FromId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      posMap_.Add(other.posMap_);
      if (other.FromId != 0L) {
        FromId = other.FromId;
      }
      if (other.RoomId != 0L) {
        RoomId = other.RoomId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            posMap_.AddEntriesFrom(input, _map_posMap_codec);
            break;
          }
          case 16: {
            FromId = input.ReadInt64();
            break;
          }
          case 24: {
            RoomId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallFuncInfo : pb::IMessage<CallFuncInfo> {
    private static readonly pb::MessageParser<CallFuncInfo> _parser = new pb::MessageParser<CallFuncInfo>(() => new CallFuncInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallFuncInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncInfo(CallFuncInfo other) : this() {
      runnigNo_ = other.runnigNo_;
      targetId_ = other.targetId_;
      fromId_ = other.fromId_;
      timeStamp_ = other.timeStamp_;
      func_ = other.func_;
      FromPos = other.fromPos_ != null ? other.FromPos.Clone() : null;
      ToPos = other.toPos_ != null ? other.ToPos.Clone() : null;
      value_ = other.value_;
      param_ = other.param_.Clone();
      params_ = other.params_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncInfo Clone() {
      return new CallFuncInfo(this);
    }

    /// <summary>Field number for the "RunnigNo" field.</summary>
    public const int RunnigNoFieldNumber = 1;
    private string runnigNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunnigNo {
      get { return runnigNo_; }
      set {
        runnigNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private long targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "FromId" field.</summary>
    public const int FromIdFieldNumber = 4;
    private long fromId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 5;
    private long timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "Func" field.</summary>
    public const int FuncFieldNumber = 6;
    private string func_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Func {
      get { return func_; }
      set {
        func_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FromPos" field.</summary>
    public const int FromPosFieldNumber = 7;
    private global::Msg.TransForm fromPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.TransForm FromPos {
      get { return fromPos_; }
      set {
        fromPos_ = value;
      }
    }

    /// <summary>Field number for the "ToPos" field.</summary>
    public const int ToPosFieldNumber = 8;
    private global::Msg.TransForm toPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.TransForm ToPos {
      get { return toPos_; }
      set {
        toPos_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 9;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "Param" field.</summary>
    public const int ParamFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Any> _repeated_param_codec
        = pb::FieldCodec.ForMessage(82, global::Google.Protobuf.WellKnownTypes.Any.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> param_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> Param {
      get { return param_; }
    }

    /// <summary>Field number for the "Params" field.</summary>
    public const int ParamsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Msg.BasicType> _repeated_params_codec
        = pb::FieldCodec.ForMessage(90, global::Msg.BasicType.Parser);
    private readonly pbc::RepeatedField<global::Msg.BasicType> params_ = new pbc::RepeatedField<global::Msg.BasicType>();
    /// <summary>
    /// repeated google.protobuf.Any param = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.BasicType> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallFuncInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallFuncInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunnigNo != other.RunnigNo) return false;
      if (TargetId != other.TargetId) return false;
      if (FromId != other.FromId) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (Func != other.Func) return false;
      if (!object.Equals(FromPos, other.FromPos)) return false;
      if (!object.Equals(ToPos, other.ToPos)) return false;
      if (Value != other.Value) return false;
      if(!param_.Equals(other.param_)) return false;
      if(!params_.Equals(other.params_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunnigNo.Length != 0) hash ^= RunnigNo.GetHashCode();
      if (TargetId != 0L) hash ^= TargetId.GetHashCode();
      if (FromId != 0L) hash ^= FromId.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (Func.Length != 0) hash ^= Func.GetHashCode();
      if (fromPos_ != null) hash ^= FromPos.GetHashCode();
      if (toPos_ != null) hash ^= ToPos.GetHashCode();
      if (Value != 0F) hash ^= Value.GetHashCode();
      hash ^= param_.GetHashCode();
      hash ^= params_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunnigNo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunnigNo);
      }
      if (TargetId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetId);
      }
      if (FromId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FromId);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeStamp);
      }
      if (Func.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Func);
      }
      if (fromPos_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(FromPos);
      }
      if (toPos_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ToPos);
      }
      if (Value != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Value);
      }
      param_.WriteTo(output, _repeated_param_codec);
      params_.WriteTo(output, _repeated_params_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunnigNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunnigNo);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      if (FromId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromId);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (Func.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Func);
      }
      if (fromPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromPos);
      }
      if (toPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToPos);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      size += param_.CalculateSize(_repeated_param_codec);
      size += params_.CalculateSize(_repeated_params_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallFuncInfo other) {
      if (other == null) {
        return;
      }
      if (other.RunnigNo.Length != 0) {
        RunnigNo = other.RunnigNo;
      }
      if (other.TargetId != 0L) {
        TargetId = other.TargetId;
      }
      if (other.FromId != 0L) {
        FromId = other.FromId;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.Func.Length != 0) {
        Func = other.Func;
      }
      if (other.fromPos_ != null) {
        if (fromPos_ == null) {
          fromPos_ = new global::Msg.TransForm();
        }
        FromPos.MergeFrom(other.FromPos);
      }
      if (other.toPos_ != null) {
        if (toPos_ == null) {
          toPos_ = new global::Msg.TransForm();
        }
        ToPos.MergeFrom(other.ToPos);
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      param_.Add(other.param_);
      params_.Add(other.params_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RunnigNo = input.ReadString();
            break;
          }
          case 16: {
            TargetId = input.ReadInt64();
            break;
          }
          case 32: {
            FromId = input.ReadInt64();
            break;
          }
          case 40: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 50: {
            Func = input.ReadString();
            break;
          }
          case 58: {
            if (fromPos_ == null) {
              fromPos_ = new global::Msg.TransForm();
            }
            input.ReadMessage(fromPos_);
            break;
          }
          case 66: {
            if (toPos_ == null) {
              toPos_ = new global::Msg.TransForm();
            }
            input.ReadMessage(toPos_);
            break;
          }
          case 77: {
            Value = input.ReadFloat();
            break;
          }
          case 82: {
            param_.AddEntriesFrom(input, _repeated_param_codec);
            break;
          }
          case 90: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BasicType : pb::IMessage<BasicType> {
    private static readonly pb::MessageParser<BasicType> _parser = new pb::MessageParser<BasicType>(() => new BasicType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BasicType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicType(BasicType other) : this() {
      switch (other.TypeCase) {
        case TypeOneofCase.S:
          S = other.S;
          break;
        case TypeOneofCase.L:
          L = other.L;
          break;
        case TypeOneofCase.F:
          F = other.F;
          break;
        case TypeOneofCase.I:
          I = other.I;
          break;
        case TypeOneofCase.B:
          B = other.B;
          break;
        case TypeOneofCase.D:
          D = other.D;
          break;
        case TypeOneofCase.A:
          A = other.A.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BasicType Clone() {
      return new BasicType(this);
    }

    /// <summary>Field number for the "S" field.</summary>
    public const int SFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string S {
      get { return typeCase_ == TypeOneofCase.S ? (string) type_ : ""; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        typeCase_ = TypeOneofCase.S;
      }
    }

    /// <summary>Field number for the "L" field.</summary>
    public const int LFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long L {
      get { return typeCase_ == TypeOneofCase.L ? (long) type_ : 0L; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.L;
      }
    }

    /// <summary>Field number for the "F" field.</summary>
    public const int FFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float F {
      get { return typeCase_ == TypeOneofCase.F ? (float) type_ : 0F; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.F;
      }
    }

    /// <summary>Field number for the "I" field.</summary>
    public const int IFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int I {
      get { return typeCase_ == TypeOneofCase.I ? (int) type_ : 0; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.I;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool B {
      get { return typeCase_ == TypeOneofCase.B ? (bool) type_ : false; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.B;
      }
    }

    /// <summary>Field number for the "D" field.</summary>
    public const int DFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double D {
      get { return typeCase_ == TypeOneofCase.D ? (double) type_ : 0D; }
      set {
        type_ = value;
        typeCase_ = TypeOneofCase.D;
      }
    }

    /// <summary>Field number for the "A" field.</summary>
    public const int AFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any A {
      get { return typeCase_ == TypeOneofCase.A ? (global::Google.Protobuf.WellKnownTypes.Any) type_ : null; }
      set {
        type_ = value;
        typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.A;
      }
    }

    private object type_;
    /// <summary>Enum of possible cases for the "type" oneof.</summary>
    public enum TypeOneofCase {
      None = 0,
      S = 1,
      L = 2,
      F = 3,
      I = 4,
      B = 5,
      D = 6,
      A = 7,
    }
    private TypeOneofCase typeCase_ = TypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeOneofCase TypeCase {
      get { return typeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      typeCase_ = TypeOneofCase.None;
      type_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BasicType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BasicType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (S != other.S) return false;
      if (L != other.L) return false;
      if (F != other.F) return false;
      if (I != other.I) return false;
      if (B != other.B) return false;
      if (D != other.D) return false;
      if (!object.Equals(A, other.A)) return false;
      if (TypeCase != other.TypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (typeCase_ == TypeOneofCase.S) hash ^= S.GetHashCode();
      if (typeCase_ == TypeOneofCase.L) hash ^= L.GetHashCode();
      if (typeCase_ == TypeOneofCase.F) hash ^= F.GetHashCode();
      if (typeCase_ == TypeOneofCase.I) hash ^= I.GetHashCode();
      if (typeCase_ == TypeOneofCase.B) hash ^= B.GetHashCode();
      if (typeCase_ == TypeOneofCase.D) hash ^= D.GetHashCode();
      if (typeCase_ == TypeOneofCase.A) hash ^= A.GetHashCode();
      hash ^= (int) typeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (typeCase_ == TypeOneofCase.S) {
        output.WriteRawTag(10);
        output.WriteString(S);
      }
      if (typeCase_ == TypeOneofCase.L) {
        output.WriteRawTag(16);
        output.WriteInt64(L);
      }
      if (typeCase_ == TypeOneofCase.F) {
        output.WriteRawTag(29);
        output.WriteFloat(F);
      }
      if (typeCase_ == TypeOneofCase.I) {
        output.WriteRawTag(32);
        output.WriteInt32(I);
      }
      if (typeCase_ == TypeOneofCase.B) {
        output.WriteRawTag(40);
        output.WriteBool(B);
      }
      if (typeCase_ == TypeOneofCase.D) {
        output.WriteRawTag(49);
        output.WriteDouble(D);
      }
      if (typeCase_ == TypeOneofCase.A) {
        output.WriteRawTag(58);
        output.WriteMessage(A);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (typeCase_ == TypeOneofCase.S) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(S);
      }
      if (typeCase_ == TypeOneofCase.L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(L);
      }
      if (typeCase_ == TypeOneofCase.F) {
        size += 1 + 4;
      }
      if (typeCase_ == TypeOneofCase.I) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(I);
      }
      if (typeCase_ == TypeOneofCase.B) {
        size += 1 + 1;
      }
      if (typeCase_ == TypeOneofCase.D) {
        size += 1 + 8;
      }
      if (typeCase_ == TypeOneofCase.A) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(A);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BasicType other) {
      if (other == null) {
        return;
      }
      switch (other.TypeCase) {
        case TypeOneofCase.S:
          S = other.S;
          break;
        case TypeOneofCase.L:
          L = other.L;
          break;
        case TypeOneofCase.F:
          F = other.F;
          break;
        case TypeOneofCase.I:
          I = other.I;
          break;
        case TypeOneofCase.B:
          B = other.B;
          break;
        case TypeOneofCase.D:
          D = other.D;
          break;
        case TypeOneofCase.A:
          A = other.A;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            S = input.ReadString();
            break;
          }
          case 16: {
            L = input.ReadInt64();
            break;
          }
          case 29: {
            F = input.ReadFloat();
            break;
          }
          case 32: {
            I = input.ReadInt32();
            break;
          }
          case 40: {
            B = input.ReadBool();
            break;
          }
          case 49: {
            D = input.ReadDouble();
            break;
          }
          case 58: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (typeCase_ == TypeOneofCase.A) {
              subBuilder.MergeFrom(A);
            }
            input.ReadMessage(subBuilder);
            A = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      errType_ = other.errType_;
      errMsg_ = other.errMsg_;
      runnigNo_ = other.runnigNo_;
      fromId_ = other.fromId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "ErrType" field.</summary>
    public const int ErrTypeFieldNumber = 1;
    private string errType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrType {
      get { return errType_; }
      set {
        errType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RunnigNo" field.</summary>
    public const int RunnigNoFieldNumber = 3;
    private string runnigNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunnigNo {
      get { return runnigNo_; }
      set {
        runnigNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FromId" field.</summary>
    public const int FromIdFieldNumber = 4;
    private long fromId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromId {
      get { return fromId_; }
      set {
        fromId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrType != other.ErrType) return false;
      if (ErrMsg != other.ErrMsg) return false;
      if (RunnigNo != other.RunnigNo) return false;
      if (FromId != other.FromId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrType.Length != 0) hash ^= ErrType.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      if (RunnigNo.Length != 0) hash ^= RunnigNo.GetHashCode();
      if (FromId != 0L) hash ^= FromId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ErrType);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
      if (RunnigNo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RunnigNo);
      }
      if (FromId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FromId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrType);
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (RunnigNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunnigNo);
      }
      if (FromId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.ErrType.Length != 0) {
        ErrType = other.ErrType;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
      if (other.RunnigNo.Length != 0) {
        RunnigNo = other.RunnigNo;
      }
      if (other.FromId != 0L) {
        FromId = other.FromId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ErrType = input.ReadString();
            break;
          }
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
          case 26: {
            RunnigNo = input.ReadString();
            break;
          }
          case 32: {
            FromId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginInput : pb::IMessage<LoginInput> {
    private static readonly pb::MessageParser<LoginInput> _parser = new pb::MessageParser<LoginInput>(() => new LoginInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInput(LoginInput other) : this() {
      userName_ = other.userName_;
      pswd_ = other.pswd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInput Clone() {
      return new LoginInput(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Pswd" field.</summary>
    public const int PswdFieldNumber = 2;
    private string pswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pswd {
      get { return pswd_; }
      set {
        pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Pswd != other.Pswd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Pswd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pswd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Pswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginInput other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Pswd.Length != 0) {
        Pswd = other.Pswd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Pswd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegistInput : pb::IMessage<RegistInput> {
    private static readonly pb::MessageParser<RegistInput> _parser = new pb::MessageParser<RegistInput>(() => new RegistInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistInput(RegistInput other) : this() {
      userName_ = other.userName_;
      pswd_ = other.pswd_;
      email_ = other.email_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistInput Clone() {
      return new RegistInput(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Pswd" field.</summary>
    public const int PswdFieldNumber = 2;
    private string pswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pswd {
      get { return pswd_; }
      set {
        pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Pswd != other.Pswd) return false;
      if (Email != other.Email) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Pswd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pswd);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Pswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistInput other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Pswd.Length != 0) {
        Pswd = other.Pswd;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Pswd = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      userName_ = other.userName_;
      uuid_ = other.uuid_;
      ownCharacter_ = other.ownCharacter_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "OwnCharacter" field.</summary>
    public const int OwnCharacterFieldNumber = 3;
    private static readonly pbc::MapField<long, global::Msg.Character>.Codec _map_ownCharacter_codec
        = new pbc::MapField<long, global::Msg.Character>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Msg.Character.Parser), 26);
    private readonly pbc::MapField<long, global::Msg.Character> ownCharacter_ = new pbc::MapField<long, global::Msg.Character>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Msg.Character> OwnCharacter {
      get { return ownCharacter_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Uuid != other.Uuid) return false;
      if (!OwnCharacter.Equals(other.OwnCharacter)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      hash ^= OwnCharacter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uuid);
      }
      ownCharacter_.WriteTo(output, _map_ownCharacter_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      size += ownCharacter_.CalculateSize(_map_ownCharacter_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      ownCharacter_.Add(other.ownCharacter_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 16: {
            Uuid = input.ReadInt64();
            break;
          }
          case 26: {
            ownCharacter_.AddEntriesFrom(input, _map_ownCharacter_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserState : pb::IMessage<UserState> {
    private static readonly pb::MessageParser<UserState> _parser = new pb::MessageParser<UserState>(() => new UserState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserState(UserState other) : this() {
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserState Clone() {
      return new UserState(this);
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Msg.UserState.Types.UserStatus state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.UserState.Types.UserStatus State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserState other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Msg.UserState.Types.UserStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum UserStatus {
        [pbr::OriginalName("OnCreating")] OnCreating = 0,
        [pbr::OriginalName("Login")] Login = 1,
        [pbr::OriginalName("Offline")] Offline = 2,
        [pbr::OriginalName("OnPlaying")] OnPlaying = 3,
      }

    }
    #endregion

  }

  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      uuid_ = other.uuid_;
      name_ = other.name_;
      gameType_ = other.gameType_;
      ownerUuid_ = other.ownerUuid_;
      userInRoom_ = other.userInRoom_.Clone();
      readyUser_ = other.readyUser_.Clone();
      status_ = other.status_;
      leftMilliSecond_ = other.leftMilliSecond_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GameType" field.</summary>
    public const int GameTypeFieldNumber = 3;
    private string gameType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameType {
      get { return gameType_; }
      set {
        gameType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OwnerUuid" field.</summary>
    public const int OwnerUuidFieldNumber = 4;
    private long ownerUuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OwnerUuid {
      get { return ownerUuid_; }
      set {
        ownerUuid_ = value;
      }
    }

    /// <summary>Field number for the "UserInRoom" field.</summary>
    public const int UserInRoomFieldNumber = 5;
    private static readonly pbc::MapField<long, global::Msg.UserInfo>.Codec _map_userInRoom_codec
        = new pbc::MapField<long, global::Msg.UserInfo>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Msg.UserInfo.Parser), 42);
    private readonly pbc::MapField<long, global::Msg.UserInfo> userInRoom_ = new pbc::MapField<long, global::Msg.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Msg.UserInfo> UserInRoom {
      get { return userInRoom_; }
    }

    /// <summary>Field number for the "ReadyUser" field.</summary>
    public const int ReadyUserFieldNumber = 6;
    private static readonly pbc::MapField<long, bool>.Codec _map_readyUser_codec
        = new pbc::MapField<long, bool>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForBool(16), 50);
    private readonly pbc::MapField<long, bool> readyUser_ = new pbc::MapField<long, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, bool> ReadyUser {
      get { return readyUser_; }
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::Msg.RoomInfo.Types.RoomStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RoomInfo.Types.RoomStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "LeftMilliSecond" field.</summary>
    public const int LeftMilliSecondFieldNumber = 8;
    private long leftMilliSecond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LeftMilliSecond {
      get { return leftMilliSecond_; }
      set {
        leftMilliSecond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Name != other.Name) return false;
      if (GameType != other.GameType) return false;
      if (OwnerUuid != other.OwnerUuid) return false;
      if (!UserInRoom.Equals(other.UserInRoom)) return false;
      if (!ReadyUser.Equals(other.ReadyUser)) return false;
      if (Status != other.Status) return false;
      if (LeftMilliSecond != other.LeftMilliSecond) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (GameType.Length != 0) hash ^= GameType.GetHashCode();
      if (OwnerUuid != 0L) hash ^= OwnerUuid.GetHashCode();
      hash ^= UserInRoom.GetHashCode();
      hash ^= ReadyUser.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (LeftMilliSecond != 0L) hash ^= LeftMilliSecond.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (GameType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameType);
      }
      if (OwnerUuid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(OwnerUuid);
      }
      userInRoom_.WriteTo(output, _map_userInRoom_codec);
      readyUser_.WriteTo(output, _map_readyUser_codec);
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (LeftMilliSecond != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LeftMilliSecond);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (GameType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameType);
      }
      if (OwnerUuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OwnerUuid);
      }
      size += userInRoom_.CalculateSize(_map_userInRoom_codec);
      size += readyUser_.CalculateSize(_map_readyUser_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (LeftMilliSecond != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeftMilliSecond);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.GameType.Length != 0) {
        GameType = other.GameType;
      }
      if (other.OwnerUuid != 0L) {
        OwnerUuid = other.OwnerUuid;
      }
      userInRoom_.Add(other.userInRoom_);
      readyUser_.Add(other.readyUser_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.LeftMilliSecond != 0L) {
        LeftMilliSecond = other.LeftMilliSecond;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            GameType = input.ReadString();
            break;
          }
          case 32: {
            OwnerUuid = input.ReadInt64();
            break;
          }
          case 42: {
            userInRoom_.AddEntriesFrom(input, _map_userInRoom_codec);
            break;
          }
          case 50: {
            readyUser_.AddEntriesFrom(input, _map_readyUser_codec);
            break;
          }
          case 56: {
            status_ = (global::Msg.RoomInfo.Types.RoomStatus) input.ReadEnum();
            break;
          }
          case 64: {
            LeftMilliSecond = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RoomInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum RoomStatus {
        [pbr::OriginalName("Preparing")] Preparing = 0,
        [pbr::OriginalName("OnPlaying")] OnPlaying = 1,
        [pbr::OriginalName("Ending")] Ending = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// character 即是沒有實體之腳色
  /// entity 則藉由character來初始化
  /// </summary>
  public sealed partial class Character : pb::IMessage<Character> {
    private static readonly pb::MessageParser<Character> _parser = new pb::MessageParser<Character>(() => new Character());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Character> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character(Character other) : this() {
      uuid_ = other.uuid_;
      characterType_ = other.characterType_;
      name_ = other.name_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      level_ = other.level_;
      exp_ = other.exp_;
      Ability = other.ability_ != null ? other.Ability.Clone() : null;
      equipmentMap_ = other.equipmentMap_.Clone();
      attr_ = other.attr_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character Clone() {
      return new Character(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "CharacterType" field.</summary>
    public const int CharacterTypeFieldNumber = 2;
    private string characterType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharacterType {
      get { return characterType_; }
      set {
        characterType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 4;
    private global::Msg.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 6;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "Ability" field.</summary>
    public const int AbilityFieldNumber = 7;
    private global::Msg.Ability ability_;
    /// <summary>
    /// 基本能力值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Ability Ability {
      get { return ability_; }
      set {
        ability_ = value;
      }
    }

    /// <summary>Field number for the "EquipmentMap" field.</summary>
    public const int EquipmentMapFieldNumber = 8;
    private static readonly pbc::MapField<long, global::Msg.Equipment>.Codec _map_equipmentMap_codec
        = new pbc::MapField<long, global::Msg.Equipment>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForMessage(18, global::Msg.Equipment.Parser), 66);
    private readonly pbc::MapField<long, global::Msg.Equipment> equipmentMap_ = new pbc::MapField<long, global::Msg.Equipment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, global::Msg.Equipment> EquipmentMap {
      get { return equipmentMap_; }
    }

    /// <summary>Field number for the "Attr" field.</summary>
    public const int AttrFieldNumber = 9;
    private static readonly pbc::MapField<string, float>.Codec _map_attr_codec
        = new pbc::MapField<string, float>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForFloat(21), 74);
    private readonly pbc::MapField<string, float> attr_ = new pbc::MapField<string, float>();
    /// <summary>
    /// 戰鬥時添加的狀態
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, float> Attr {
      get { return attr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Character);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Character other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (CharacterType != other.CharacterType) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (!object.Equals(Ability, other.Ability)) return false;
      if (!EquipmentMap.Equals(other.EquipmentMap)) return false;
      if (!Attr.Equals(other.Attr)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (CharacterType.Length != 0) hash ^= CharacterType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (ability_ != null) hash ^= Ability.GetHashCode();
      hash ^= EquipmentMap.GetHashCode();
      hash ^= Attr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uuid);
      }
      if (CharacterType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CharacterType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (color_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Color);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Exp);
      }
      if (ability_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Ability);
      }
      equipmentMap_.WriteTo(output, _map_equipmentMap_codec);
      attr_.WriteTo(output, _map_attr_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (CharacterType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (ability_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ability);
      }
      size += equipmentMap_.CalculateSize(_map_equipmentMap_codec);
      size += attr_.CalculateSize(_map_attr_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Character other) {
      if (other == null) {
        return;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.CharacterType.Length != 0) {
        CharacterType = other.CharacterType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Msg.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.ability_ != null) {
        if (ability_ == null) {
          ability_ = new global::Msg.Ability();
        }
        Ability.MergeFrom(other.Ability);
      }
      equipmentMap_.Add(other.equipmentMap_);
      attr_.Add(other.attr_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uuid = input.ReadInt64();
            break;
          }
          case 18: {
            CharacterType = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (color_ == null) {
              color_ = new global::Msg.Color();
            }
            input.ReadMessage(color_);
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            Exp = input.ReadInt32();
            break;
          }
          case 58: {
            if (ability_ == null) {
              ability_ = new global::Msg.Ability();
            }
            input.ReadMessage(ability_);
            break;
          }
          case 66: {
            equipmentMap_.AddEntriesFrom(input, _map_equipmentMap_codec);
            break;
          }
          case 74: {
            attr_.AddEntriesFrom(input, _map_attr_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "R" field.</summary>
    public const int RFieldNumber = 1;
    private int r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "G" field.</summary>
    public const int GFieldNumber = 2;
    private int g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 3;
    private int b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(B);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            R = input.ReadInt32();
            break;
          }
          case 16: {
            G = input.ReadInt32();
            break;
          }
          case 24: {
            B = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Equipment : pb::IMessage<Equipment> {
    private static readonly pb::MessageParser<Equipment> _parser = new pb::MessageParser<Equipment>(() => new Equipment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Equipment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equipment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equipment(Equipment other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      uuid_ = other.uuid_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      Ability = other.ability_ != null ? other.Ability.Clone() : null;
      cD_ = other.cD_;
      usable_ = other.usable_;
      inventory_ = other.inventory_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equipment Clone() {
      return new Equipment(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 3;
    private long uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uuid {
      get { return uuid_; }
      set {
        uuid_ = value;
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 4;
    private global::Msg.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "Ability" field.</summary>
    public const int AbilityFieldNumber = 5;
    private global::Msg.Ability ability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Ability Ability {
      get { return ability_; }
      set {
        ability_ = value;
      }
    }

    /// <summary>Field number for the "CD" field.</summary>
    public const int CDFieldNumber = 6;
    private int cD_;
    /// <summary>
    /// Cool down time tick
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CD {
      get { return cD_; }
      set {
        cD_ = value;
      }
    }

    /// <summary>Field number for the "Usable" field.</summary>
    public const int UsableFieldNumber = 7;
    private int usable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Usable {
      get { return usable_; }
      set {
        usable_ = value;
      }
    }

    /// <summary>Field number for the "Inventory" field.</summary>
    public const int InventoryFieldNumber = 8;
    private int inventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Inventory {
      get { return inventory_; }
      set {
        inventory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Equipment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Equipment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Uuid != other.Uuid) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (!object.Equals(Ability, other.Ability)) return false;
      if (CD != other.CD) return false;
      if (Usable != other.Usable) return false;
      if (Inventory != other.Inventory) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Uuid != 0L) hash ^= Uuid.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (ability_ != null) hash ^= Ability.GetHashCode();
      if (CD != 0) hash ^= CD.GetHashCode();
      if (Usable != 0) hash ^= Usable.GetHashCode();
      if (Inventory != 0) hash ^= Inventory.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Uuid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Uuid);
      }
      if (color_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Color);
      }
      if (ability_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ability);
      }
      if (CD != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CD);
      }
      if (Usable != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Usable);
      }
      if (Inventory != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Inventory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Uuid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uuid);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (ability_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ability);
      }
      if (CD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CD);
      }
      if (Usable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Usable);
      }
      if (Inventory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inventory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Equipment other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Uuid != 0L) {
        Uuid = other.Uuid;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Msg.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.ability_ != null) {
        if (ability_ == null) {
          ability_ = new global::Msg.Ability();
        }
        Ability.MergeFrom(other.Ability);
      }
      if (other.CD != 0) {
        CD = other.CD;
      }
      if (other.Usable != 0) {
        Usable = other.Usable;
      }
      if (other.Inventory != 0) {
        Inventory = other.Inventory;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            Uuid = input.ReadInt64();
            break;
          }
          case 34: {
            if (color_ == null) {
              color_ = new global::Msg.Color();
            }
            input.ReadMessage(color_);
            break;
          }
          case 42: {
            if (ability_ == null) {
              ability_ = new global::Msg.Ability();
            }
            input.ReadMessage(ability_);
            break;
          }
          case 48: {
            CD = input.ReadInt32();
            break;
          }
          case 56: {
            Usable = input.ReadInt32();
            break;
          }
          case 64: {
            Inventory = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ability : pb::IMessage<Ability> {
    private static readonly pb::MessageParser<Ability> _parser = new pb::MessageParser<Ability>(() => new Ability());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability(Ability other) : this() {
      aTK_ = other.aTK_;
      dEF_ = other.dEF_;
      sPD_ = other.sPD_;
      mP_ = other.mP_;
      mAKT_ = other.mAKT_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability Clone() {
      return new Ability(this);
    }

    /// <summary>Field number for the "ATK" field.</summary>
    public const int ATKFieldNumber = 1;
    private int aTK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ATK {
      get { return aTK_; }
      set {
        aTK_ = value;
      }
    }

    /// <summary>Field number for the "DEF" field.</summary>
    public const int DEFFieldNumber = 2;
    private int dEF_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DEF {
      get { return dEF_; }
      set {
        dEF_ = value;
      }
    }

    /// <summary>Field number for the "SPD" field.</summary>
    public const int SPDFieldNumber = 3;
    private float sPD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SPD {
      get { return sPD_; }
      set {
        sPD_ = value;
      }
    }

    /// <summary>Field number for the "MP" field.</summary>
    public const int MPFieldNumber = 4;
    private int mP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MP {
      get { return mP_; }
      set {
        mP_ = value;
      }
    }

    /// <summary>Field number for the "MAKT" field.</summary>
    public const int MAKTFieldNumber = 5;
    private int mAKT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MAKT {
      get { return mAKT_; }
      set {
        mAKT_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ATK != other.ATK) return false;
      if (DEF != other.DEF) return false;
      if (SPD != other.SPD) return false;
      if (MP != other.MP) return false;
      if (MAKT != other.MAKT) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ATK != 0) hash ^= ATK.GetHashCode();
      if (DEF != 0) hash ^= DEF.GetHashCode();
      if (SPD != 0F) hash ^= SPD.GetHashCode();
      if (MP != 0) hash ^= MP.GetHashCode();
      if (MAKT != 0) hash ^= MAKT.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ATK != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ATK);
      }
      if (DEF != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DEF);
      }
      if (SPD != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SPD);
      }
      if (MP != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MP);
      }
      if (MAKT != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MAKT);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ATK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ATK);
      }
      if (DEF != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DEF);
      }
      if (SPD != 0F) {
        size += 1 + 4;
      }
      if (MP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MP);
      }
      if (MAKT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MAKT);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ability other) {
      if (other == null) {
        return;
      }
      if (other.ATK != 0) {
        ATK = other.ATK;
      }
      if (other.DEF != 0) {
        DEF = other.DEF;
      }
      if (other.SPD != 0F) {
        SPD = other.SPD;
      }
      if (other.MP != 0) {
        MP = other.MP;
      }
      if (other.MAKT != 0) {
        MAKT = other.MAKT;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ATK = input.ReadInt32();
            break;
          }
          case 16: {
            DEF = input.ReadInt32();
            break;
          }
          case 29: {
            SPD = input.ReadFloat();
            break;
          }
          case 32: {
            MP = input.ReadInt32();
            break;
          }
          case 40: {
            MAKT = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
