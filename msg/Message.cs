// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msg {

  /// <summary>Holder for reflection information generated from message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tZXNzYWdlLnByb3RvEgNtc2caCWFueS5wcm90byJVCglUcmFuc0Zvcm0S",
            "CQoBWBgBIAEoAhIJCgFZGAIgASgCEgkKAVoYAyABKAISCwoDWWF3GAQgASgC",
            "Eg0KBVBpdGNoGAUgASgCEgsKA1JvdxgGIAEoAiJ0CghQb3NpdGlvbhIpCgZQ",
            "b3NNYXAYASADKAsyGS5tc2cuUG9zaXRpb24uUG9zTWFwRW50cnkaPQoLUG9z",
            "TWFwRW50cnkSCwoDa2V5GAEgASgJEh0KBXZhbHVlGAIgASgLMg4ubXNnLlRy",
            "YW5zRm9ybToCOAEiigEKDENhbGxGdW5jSW5mbxIQCghSdW5uaWdObxgBIAEo",
            "CRIQCghUYXJnZXRJZBgCIAEoCRISCgpUcmFnZXRUeXBlGAMgASgMEgoKAkNi",
            "GAQgASgJEiMKBVBhcmFtGAUgAygLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRIR",
            "CglUaW1lU3RhbXAYBiABKAMiKAoFRXJyb3ISDwoHRXJyVHlwZRgBIAEoCRIO",
            "CgZFcnJNc2cYAiABKAkiLAoKTG9naW5JbnB1dBIQCghVc2VyTmFtZRgBIAEo",
            "CRIMCgRQc3dkGAIgASgJIjwKC1JlZ2lzdElucHV0EhAKCFVzZXJOYW1lGAEg",
            "ASgJEgwKBFBzd2QYAiABKAkSDQoFRW1haWwYAyABKAkipgEKCFVzZXJJbmZv",
            "EhAKCFVzZXJOYW1lGAEgASgJEgwKBFV1aWQYAiABKAkSNQoMT3duQ2hhcmFj",
            "dGVyGAMgAygLMh8ubXNnLlVzZXJJbmZvLk93bkNoYXJhY3RlckVudHJ5GkMK",
            "EU93bkNoYXJhY3RlckVudHJ5EgsKA2tleRgBIAEoCRIdCgV2YWx1ZRgCIAEo",
            "CzIOLm1zZy5DaGFyYWN0ZXI6AjgBIsABCghSb29tSW5mbxIMCgRVdWlkGAEg",
            "ASgJEgwKBE5hbWUYAiABKAkSEAoIR2FtZVR5cGUYAyABKAkSEQoJT3duZXJV",
            "dWlkGAQgASgJEjEKClVzZXJJblJvb20YBSADKAsyHS5tc2cuUm9vbUluZm8u",
            "VXNlckluUm9vbUVudHJ5GkAKD1VzZXJJblJvb21FbnRyeRILCgNrZXkYASAB",
            "KAkSHAoFdmFsdWUYAiABKAsyDS5tc2cuVXNlckluZm86AjgBIpECCglDaGFy",
            "YWN0ZXISDAoEVXVpZBgBIAEoCRIVCg1DaGFyYWN0ZXJUeXBlGAIgASgJEgwK",
            "BE5hbWUYAyABKAkSGQoFQ29sb3IYBCABKAsyCi5tc2cuQ29sb3ISDQoFTGV2",
            "ZWwYBSABKAUSCwoDRXhwGAYgASgFEh0KB0FiaWxpdHkYByABKAsyDC5tc2cu",
            "QWJpbGl0eRI2CgxFcXVpcG1lbnRNYXAYCCADKAsyIC5tc2cuQ2hhcmFjdGVy",
            "LkVxdWlwbWVudE1hcEVudHJ5GkMKEUVxdWlwbWVudE1hcEVudHJ5EgsKA2tl",
            "eRgBIAEoCRIdCgV2YWx1ZRgCIAEoCzIOLm1zZy5FcXVpcG1lbnQ6AjgBIigK",
            "BUNvbG9yEgkKAVIYASABKAUSCQoBRxgCIAEoBRIJCgFCGAMgASgFIp4BCglF",
            "cXVpcG1lbnQSDAoETmFtZRgBIAEoCRIMCgRUeXBlGAIgASgJEgwKBFV1aWQY",
            "AyABKAkSGQoFQ29sb3IYBCABKAsyCi5tc2cuQ29sb3ISHQoHQWJpbGl0eRgF",
            "IAEoCzIMLm1zZy5BYmlsaXR5EgoKAkNEGAYgASgFEg4KBlVzYWJsZRgHIAEo",
            "BRIRCglJbnZlbnRvcnkYCCABKAUiSgoHQWJpbGl0eRILCgNBVEsYASABKAUS",
            "CwoDREVGGAIgASgFEgsKA1NQRBgDIAEoAhIKCgJNUBgEIAEoBRIMCgRNQUtU",
            "GAUgASgFMvgBCgNScGMSLQoHU3luY1BvcxINLm1zZy5Qb3NpdGlvbhoNLm1z",
            "Zy5Qb3NpdGlvbiIAKAEwARI4CgpDYWxsTWV0aG9kEhEubXNnLkNhbGxGdW5j",
            "SW5mbxoRLm1zZy5DYWxsRnVuY0luZm8iACgBMAESLAoMRXJyb3JQaXBMaW5l",
            "EgoubXNnLkVycm9yGgoubXNnLkVycm9yIgAoATABEikKBUxvZ2luEg8ubXNn",
            "LkxvZ2luSW5wdXQaDS5tc2cuVXNlckluZm8iABIvCg1DcmVhdGVBY2NvdW50",
            "EhAubXNnLlJlZ2lzdElucHV0GgoubXNnLkVycm9yIgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.TransForm), global::Msg.TransForm.Parser, new[]{ "X", "Y", "Z", "Yaw", "Pitch", "Row" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Position), global::Msg.Position.Parser, new[]{ "PosMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.CallFuncInfo), global::Msg.CallFuncInfo.Parser, new[]{ "RunnigNo", "TargetId", "TragetType", "Cb", "Param", "TimeStamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Error), global::Msg.Error.Parser, new[]{ "ErrType", "ErrMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.LoginInput), global::Msg.LoginInput.Parser, new[]{ "UserName", "Pswd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RegistInput), global::Msg.RegistInput.Parser, new[]{ "UserName", "Pswd", "Email" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.UserInfo), global::Msg.UserInfo.Parser, new[]{ "UserName", "Uuid", "OwnCharacter" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.RoomInfo), global::Msg.RoomInfo.Parser, new[]{ "Uuid", "Name", "GameType", "OwnerUuid", "UserInRoom" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Character), global::Msg.Character.Parser, new[]{ "Uuid", "CharacterType", "Name", "Color", "Level", "Exp", "Ability", "EquipmentMap" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Color), global::Msg.Color.Parser, new[]{ "R", "G", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Equipment), global::Msg.Equipment.Parser, new[]{ "Name", "Type", "Uuid", "Color", "Ability", "CD", "Usable", "Inventory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.Ability), global::Msg.Ability.Parser, new[]{ "ATK", "DEF", "SPD", "MP", "MAKT" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TransForm : pb::IMessage<TransForm> {
    private static readonly pb::MessageParser<TransForm> _parser = new pb::MessageParser<TransForm>(() => new TransForm());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransForm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransForm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransForm(TransForm other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      yaw_ = other.yaw_;
      pitch_ = other.pitch_;
      row_ = other.row_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransForm Clone() {
      return new TransForm(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "Yaw" field.</summary>
    public const int YawFieldNumber = 4;
    private float yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "Pitch" field.</summary>
    public const int PitchFieldNumber = 5;
    private float pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "Row" field.</summary>
    public const int RowFieldNumber = 6;
    private float row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransForm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransForm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Yaw != other.Yaw) return false;
      if (Pitch != other.Pitch) return false;
      if (Row != other.Row) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (Yaw != 0F) hash ^= Yaw.GetHashCode();
      if (Pitch != 0F) hash ^= Pitch.GetHashCode();
      if (Row != 0F) hash ^= Row.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (Yaw != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Yaw);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Pitch);
      }
      if (Row != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Row);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Yaw != 0F) {
        size += 1 + 4;
      }
      if (Pitch != 0F) {
        size += 1 + 4;
      }
      if (Row != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransForm other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Yaw != 0F) {
        Yaw = other.Yaw;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.Row != 0F) {
        Row = other.Row;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            Yaw = input.ReadFloat();
            break;
          }
          case 45: {
            Pitch = input.ReadFloat();
            break;
          }
          case 53: {
            Row = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      posMap_ = other.posMap_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "PosMap" field.</summary>
    public const int PosMapFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Msg.TransForm>.Codec _map_posMap_codec
        = new pbc::MapField<string, global::Msg.TransForm>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Msg.TransForm.Parser), 10);
    private readonly pbc::MapField<string, global::Msg.TransForm> posMap_ = new pbc::MapField<string, global::Msg.TransForm>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Msg.TransForm> PosMap {
      get { return posMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!PosMap.Equals(other.PosMap)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= PosMap.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      posMap_.WriteTo(output, _map_posMap_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += posMap_.CalculateSize(_map_posMap_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      posMap_.Add(other.posMap_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            posMap_.AddEntriesFrom(input, _map_posMap_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CallFuncInfo : pb::IMessage<CallFuncInfo> {
    private static readonly pb::MessageParser<CallFuncInfo> _parser = new pb::MessageParser<CallFuncInfo>(() => new CallFuncInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CallFuncInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncInfo(CallFuncInfo other) : this() {
      runnigNo_ = other.runnigNo_;
      targetId_ = other.targetId_;
      tragetType_ = other.tragetType_;
      cb_ = other.cb_;
      param_ = other.param_.Clone();
      timeStamp_ = other.timeStamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallFuncInfo Clone() {
      return new CallFuncInfo(this);
    }

    /// <summary>Field number for the "RunnigNo" field.</summary>
    public const int RunnigNoFieldNumber = 1;
    private string runnigNo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunnigNo {
      get { return runnigNo_; }
      set {
        runnigNo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private string targetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetId {
      get { return targetId_; }
      set {
        targetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TragetType" field.</summary>
    public const int TragetTypeFieldNumber = 3;
    private pb::ByteString tragetType_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TragetType {
      get { return tragetType_; }
      set {
        tragetType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Cb" field.</summary>
    public const int CbFieldNumber = 4;
    private string cb_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cb {
      get { return cb_; }
      set {
        cb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Param" field.</summary>
    public const int ParamFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Protobuf.WellKnownTypes.Any> _repeated_param_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Protobuf.WellKnownTypes.Any.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> param_ = new pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.WellKnownTypes.Any> Param {
      get { return param_; }
    }

    /// <summary>Field number for the "TimeStamp" field.</summary>
    public const int TimeStampFieldNumber = 6;
    private long timeStamp_;
    /// <summary>
    /// repeated google.protobuf.Any param = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CallFuncInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CallFuncInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RunnigNo != other.RunnigNo) return false;
      if (TargetId != other.TargetId) return false;
      if (TragetType != other.TragetType) return false;
      if (Cb != other.Cb) return false;
      if(!param_.Equals(other.param_)) return false;
      if (TimeStamp != other.TimeStamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RunnigNo.Length != 0) hash ^= RunnigNo.GetHashCode();
      if (TargetId.Length != 0) hash ^= TargetId.GetHashCode();
      if (TragetType.Length != 0) hash ^= TragetType.GetHashCode();
      if (Cb.Length != 0) hash ^= Cb.GetHashCode();
      hash ^= param_.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RunnigNo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RunnigNo);
      }
      if (TargetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetId);
      }
      if (TragetType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TragetType);
      }
      if (Cb.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Cb);
      }
      param_.WriteTo(output, _repeated_param_codec);
      if (TimeStamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TimeStamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RunnigNo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunnigNo);
      }
      if (TargetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetId);
      }
      if (TragetType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TragetType);
      }
      if (Cb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cb);
      }
      size += param_.CalculateSize(_repeated_param_codec);
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CallFuncInfo other) {
      if (other == null) {
        return;
      }
      if (other.RunnigNo.Length != 0) {
        RunnigNo = other.RunnigNo;
      }
      if (other.TargetId.Length != 0) {
        TargetId = other.TargetId;
      }
      if (other.TragetType.Length != 0) {
        TragetType = other.TragetType;
      }
      if (other.Cb.Length != 0) {
        Cb = other.Cb;
      }
      param_.Add(other.param_);
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RunnigNo = input.ReadString();
            break;
          }
          case 18: {
            TargetId = input.ReadString();
            break;
          }
          case 26: {
            TragetType = input.ReadBytes();
            break;
          }
          case 34: {
            Cb = input.ReadString();
            break;
          }
          case 42: {
            param_.AddEntriesFrom(input, _repeated_param_codec);
            break;
          }
          case 48: {
            TimeStamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      errType_ = other.errType_;
      errMsg_ = other.errMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "ErrType" field.</summary>
    public const int ErrTypeFieldNumber = 1;
    private string errType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrType {
      get { return errType_; }
      set {
        errType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ErrMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrType != other.ErrType) return false;
      if (ErrMsg != other.ErrMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrType.Length != 0) hash ^= ErrType.GetHashCode();
      if (ErrMsg.Length != 0) hash ^= ErrMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ErrType);
      }
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrType);
      }
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.ErrType.Length != 0) {
        ErrType = other.ErrType;
      }
      if (other.ErrMsg.Length != 0) {
        ErrMsg = other.ErrMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ErrType = input.ReadString();
            break;
          }
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginInput : pb::IMessage<LoginInput> {
    private static readonly pb::MessageParser<LoginInput> _parser = new pb::MessageParser<LoginInput>(() => new LoginInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInput(LoginInput other) : this() {
      userName_ = other.userName_;
      pswd_ = other.pswd_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginInput Clone() {
      return new LoginInput(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Pswd" field.</summary>
    public const int PswdFieldNumber = 2;
    private string pswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pswd {
      get { return pswd_; }
      set {
        pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Pswd != other.Pswd) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Pswd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pswd);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Pswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginInput other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Pswd.Length != 0) {
        Pswd = other.Pswd;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Pswd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegistInput : pb::IMessage<RegistInput> {
    private static readonly pb::MessageParser<RegistInput> _parser = new pb::MessageParser<RegistInput>(() => new RegistInput());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistInput(RegistInput other) : this() {
      userName_ = other.userName_;
      pswd_ = other.pswd_;
      email_ = other.email_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistInput Clone() {
      return new RegistInput(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Pswd" field.</summary>
    public const int PswdFieldNumber = 2;
    private string pswd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pswd {
      get { return pswd_; }
      set {
        pswd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Pswd != other.Pswd) return false;
      if (Email != other.Email) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Pswd.Length != 0) hash ^= Pswd.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Pswd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pswd);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Pswd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pswd);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistInput other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Pswd.Length != 0) {
        Pswd = other.Pswd;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Pswd = input.ReadString();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInfo : pb::IMessage<UserInfo> {
    private static readonly pb::MessageParser<UserInfo> _parser = new pb::MessageParser<UserInfo>(() => new UserInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo(UserInfo other) : this() {
      userName_ = other.userName_;
      uuid_ = other.uuid_;
      ownCharacter_ = other.ownCharacter_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInfo Clone() {
      return new UserInfo(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OwnCharacter" field.</summary>
    public const int OwnCharacterFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Msg.Character>.Codec _map_ownCharacter_codec
        = new pbc::MapField<string, global::Msg.Character>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Msg.Character.Parser), 26);
    private readonly pbc::MapField<string, global::Msg.Character> ownCharacter_ = new pbc::MapField<string, global::Msg.Character>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Msg.Character> OwnCharacter {
      get { return ownCharacter_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Uuid != other.Uuid) return false;
      if (!OwnCharacter.Equals(other.OwnCharacter)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      hash ^= OwnCharacter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      ownCharacter_.WriteTo(output, _map_ownCharacter_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      size += ownCharacter_.CalculateSize(_map_ownCharacter_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      ownCharacter_.Add(other.ownCharacter_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
          case 26: {
            ownCharacter_.AddEntriesFrom(input, _map_ownCharacter_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo(RoomInfo other) : this() {
      uuid_ = other.uuid_;
      name_ = other.name_;
      gameType_ = other.gameType_;
      ownerUuid_ = other.ownerUuid_;
      userInRoom_ = other.userInRoom_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfo Clone() {
      return new RoomInfo(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GameType" field.</summary>
    public const int GameTypeFieldNumber = 3;
    private string gameType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameType {
      get { return gameType_; }
      set {
        gameType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "OwnerUuid" field.</summary>
    public const int OwnerUuidFieldNumber = 4;
    private string ownerUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerUuid {
      get { return ownerUuid_; }
      set {
        ownerUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserInRoom" field.</summary>
    public const int UserInRoomFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Msg.UserInfo>.Codec _map_userInRoom_codec
        = new pbc::MapField<string, global::Msg.UserInfo>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Msg.UserInfo.Parser), 42);
    private readonly pbc::MapField<string, global::Msg.UserInfo> userInRoom_ = new pbc::MapField<string, global::Msg.UserInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Msg.UserInfo> UserInRoom {
      get { return userInRoom_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Name != other.Name) return false;
      if (GameType != other.GameType) return false;
      if (OwnerUuid != other.OwnerUuid) return false;
      if (!UserInRoom.Equals(other.UserInRoom)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (GameType.Length != 0) hash ^= GameType.GetHashCode();
      if (OwnerUuid.Length != 0) hash ^= OwnerUuid.GetHashCode();
      hash ^= UserInRoom.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (GameType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameType);
      }
      if (OwnerUuid.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OwnerUuid);
      }
      userInRoom_.WriteTo(output, _map_userInRoom_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (GameType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameType);
      }
      if (OwnerUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerUuid);
      }
      size += userInRoom_.CalculateSize(_map_userInRoom_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfo other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.GameType.Length != 0) {
        GameType = other.GameType;
      }
      if (other.OwnerUuid.Length != 0) {
        OwnerUuid = other.OwnerUuid;
      }
      userInRoom_.Add(other.userInRoom_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            GameType = input.ReadString();
            break;
          }
          case 34: {
            OwnerUuid = input.ReadString();
            break;
          }
          case 42: {
            userInRoom_.AddEntriesFrom(input, _map_userInRoom_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// character 即是沒有實體之腳色
  /// entity 則藉由character來初始化
  /// </summary>
  public sealed partial class Character : pb::IMessage<Character> {
    private static readonly pb::MessageParser<Character> _parser = new pb::MessageParser<Character>(() => new Character());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Character> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character(Character other) : this() {
      uuid_ = other.uuid_;
      characterType_ = other.characterType_;
      name_ = other.name_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      level_ = other.level_;
      exp_ = other.exp_;
      Ability = other.ability_ != null ? other.Ability.Clone() : null;
      equipmentMap_ = other.equipmentMap_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Character Clone() {
      return new Character(this);
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CharacterType" field.</summary>
    public const int CharacterTypeFieldNumber = 2;
    private string characterType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharacterType {
      get { return characterType_; }
      set {
        characterType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 4;
    private global::Msg.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 6;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "Ability" field.</summary>
    public const int AbilityFieldNumber = 7;
    private global::Msg.Ability ability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Ability Ability {
      get { return ability_; }
      set {
        ability_ = value;
      }
    }

    /// <summary>Field number for the "EquipmentMap" field.</summary>
    public const int EquipmentMapFieldNumber = 8;
    private static readonly pbc::MapField<string, global::Msg.Equipment>.Codec _map_equipmentMap_codec
        = new pbc::MapField<string, global::Msg.Equipment>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Msg.Equipment.Parser), 66);
    private readonly pbc::MapField<string, global::Msg.Equipment> equipmentMap_ = new pbc::MapField<string, global::Msg.Equipment>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Msg.Equipment> EquipmentMap {
      get { return equipmentMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Character);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Character other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (CharacterType != other.CharacterType) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (!object.Equals(Ability, other.Ability)) return false;
      if (!EquipmentMap.Equals(other.EquipmentMap)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (CharacterType.Length != 0) hash ^= CharacterType.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (ability_ != null) hash ^= Ability.GetHashCode();
      hash ^= EquipmentMap.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (CharacterType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CharacterType);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (color_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Color);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Exp);
      }
      if (ability_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Ability);
      }
      equipmentMap_.WriteTo(output, _map_equipmentMap_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (CharacterType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterType);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (ability_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ability);
      }
      size += equipmentMap_.CalculateSize(_map_equipmentMap_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Character other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.CharacterType.Length != 0) {
        CharacterType = other.CharacterType;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Msg.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.ability_ != null) {
        if (ability_ == null) {
          ability_ = new global::Msg.Ability();
        }
        Ability.MergeFrom(other.Ability);
      }
      equipmentMap_.Add(other.equipmentMap_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 18: {
            CharacterType = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (color_ == null) {
              color_ = new global::Msg.Color();
            }
            input.ReadMessage(color_);
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 48: {
            Exp = input.ReadInt32();
            break;
          }
          case 58: {
            if (ability_ == null) {
              ability_ = new global::Msg.Ability();
            }
            input.ReadMessage(ability_);
            break;
          }
          case 66: {
            equipmentMap_.AddEntriesFrom(input, _map_equipmentMap_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Color : pb::IMessage<Color> {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "R" field.</summary>
    public const int RFieldNumber = 1;
    private int r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "G" field.</summary>
    public const int GFieldNumber = 2;
    private int g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 3;
    private int b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(B);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(B);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            R = input.ReadInt32();
            break;
          }
          case 16: {
            G = input.ReadInt32();
            break;
          }
          case 24: {
            B = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Equipment : pb::IMessage<Equipment> {
    private static readonly pb::MessageParser<Equipment> _parser = new pb::MessageParser<Equipment>(() => new Equipment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Equipment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equipment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equipment(Equipment other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      uuid_ = other.uuid_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      Ability = other.ability_ != null ? other.Ability.Clone() : null;
      cD_ = other.cD_;
      usable_ = other.usable_;
      inventory_ = other.inventory_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Equipment Clone() {
      return new Equipment(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 3;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Color" field.</summary>
    public const int ColorFieldNumber = 4;
    private global::Msg.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "Ability" field.</summary>
    public const int AbilityFieldNumber = 5;
    private global::Msg.Ability ability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Ability Ability {
      get { return ability_; }
      set {
        ability_ = value;
      }
    }

    /// <summary>Field number for the "CD" field.</summary>
    public const int CDFieldNumber = 6;
    private int cD_;
    /// <summary>
    /// Cool down time tick
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CD {
      get { return cD_; }
      set {
        cD_ = value;
      }
    }

    /// <summary>Field number for the "Usable" field.</summary>
    public const int UsableFieldNumber = 7;
    private int usable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Usable {
      get { return usable_; }
      set {
        usable_ = value;
      }
    }

    /// <summary>Field number for the "Inventory" field.</summary>
    public const int InventoryFieldNumber = 8;
    private int inventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Inventory {
      get { return inventory_; }
      set {
        inventory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Equipment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Equipment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (Uuid != other.Uuid) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (!object.Equals(Ability, other.Ability)) return false;
      if (CD != other.CD) return false;
      if (Usable != other.Usable) return false;
      if (Inventory != other.Inventory) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (ability_ != null) hash ^= Ability.GetHashCode();
      if (CD != 0) hash ^= CD.GetHashCode();
      if (Usable != 0) hash ^= Usable.GetHashCode();
      if (Inventory != 0) hash ^= Inventory.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Uuid);
      }
      if (color_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Color);
      }
      if (ability_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ability);
      }
      if (CD != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CD);
      }
      if (Usable != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Usable);
      }
      if (Inventory != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Inventory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (ability_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ability);
      }
      if (CD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CD);
      }
      if (Usable != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Usable);
      }
      if (Inventory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Inventory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Equipment other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::Msg.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.ability_ != null) {
        if (ability_ == null) {
          ability_ = new global::Msg.Ability();
        }
        Ability.MergeFrom(other.Ability);
      }
      if (other.CD != 0) {
        CD = other.CD;
      }
      if (other.Usable != 0) {
        Usable = other.Usable;
      }
      if (other.Inventory != 0) {
        Inventory = other.Inventory;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            Uuid = input.ReadString();
            break;
          }
          case 34: {
            if (color_ == null) {
              color_ = new global::Msg.Color();
            }
            input.ReadMessage(color_);
            break;
          }
          case 42: {
            if (ability_ == null) {
              ability_ = new global::Msg.Ability();
            }
            input.ReadMessage(ability_);
            break;
          }
          case 48: {
            CD = input.ReadInt32();
            break;
          }
          case 56: {
            Usable = input.ReadInt32();
            break;
          }
          case 64: {
            Inventory = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Ability : pb::IMessage<Ability> {
    private static readonly pb::MessageParser<Ability> _parser = new pb::MessageParser<Ability>(() => new Ability());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MessageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability(Ability other) : this() {
      aTK_ = other.aTK_;
      dEF_ = other.dEF_;
      sPD_ = other.sPD_;
      mP_ = other.mP_;
      mAKT_ = other.mAKT_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ability Clone() {
      return new Ability(this);
    }

    /// <summary>Field number for the "ATK" field.</summary>
    public const int ATKFieldNumber = 1;
    private int aTK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ATK {
      get { return aTK_; }
      set {
        aTK_ = value;
      }
    }

    /// <summary>Field number for the "DEF" field.</summary>
    public const int DEFFieldNumber = 2;
    private int dEF_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DEF {
      get { return dEF_; }
      set {
        dEF_ = value;
      }
    }

    /// <summary>Field number for the "SPD" field.</summary>
    public const int SPDFieldNumber = 3;
    private float sPD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SPD {
      get { return sPD_; }
      set {
        sPD_ = value;
      }
    }

    /// <summary>Field number for the "MP" field.</summary>
    public const int MPFieldNumber = 4;
    private int mP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MP {
      get { return mP_; }
      set {
        mP_ = value;
      }
    }

    /// <summary>Field number for the "MAKT" field.</summary>
    public const int MAKTFieldNumber = 5;
    private int mAKT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MAKT {
      get { return mAKT_; }
      set {
        mAKT_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ATK != other.ATK) return false;
      if (DEF != other.DEF) return false;
      if (SPD != other.SPD) return false;
      if (MP != other.MP) return false;
      if (MAKT != other.MAKT) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ATK != 0) hash ^= ATK.GetHashCode();
      if (DEF != 0) hash ^= DEF.GetHashCode();
      if (SPD != 0F) hash ^= SPD.GetHashCode();
      if (MP != 0) hash ^= MP.GetHashCode();
      if (MAKT != 0) hash ^= MAKT.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ATK != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ATK);
      }
      if (DEF != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DEF);
      }
      if (SPD != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SPD);
      }
      if (MP != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MP);
      }
      if (MAKT != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MAKT);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ATK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ATK);
      }
      if (DEF != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DEF);
      }
      if (SPD != 0F) {
        size += 1 + 4;
      }
      if (MP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MP);
      }
      if (MAKT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MAKT);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ability other) {
      if (other == null) {
        return;
      }
      if (other.ATK != 0) {
        ATK = other.ATK;
      }
      if (other.DEF != 0) {
        DEF = other.DEF;
      }
      if (other.SPD != 0F) {
        SPD = other.SPD;
      }
      if (other.MP != 0) {
        MP = other.MP;
      }
      if (other.MAKT != 0) {
        MAKT = other.MAKT;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ATK = input.ReadInt32();
            break;
          }
          case 16: {
            DEF = input.ReadInt32();
            break;
          }
          case 29: {
            SPD = input.ReadFloat();
            break;
          }
          case 32: {
            MP = input.ReadInt32();
            break;
          }
          case 40: {
            MAKT = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
