// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	message.proto

It has these top-level messages:
	ClientFunc
	ServerFunc
	Vector3
	Rotation
	Pos
	PosReply
	Callin
	Reply
	ClientStart
	User
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientFuncF int32

const (
	ClientFunc_shoot         ClientFuncF = 0
	ClientFunc_behit         ClientFuncF = 1
	ClientFunc_die           ClientFuncF = 2
	ClientFunc_kick          ClientFuncF = 3
	ClientFunc_creatEntity   ClientFuncF = 4
	ClientFunc_destoryEntity ClientFuncF = 5
)

var ClientFuncF_name = map[int32]string{
	0: "shoot",
	1: "behit",
	2: "die",
	3: "kick",
	4: "creatEntity",
	5: "destoryEntity",
}
var ClientFuncF_value = map[string]int32{
	"shoot":         0,
	"behit":         1,
	"die":           2,
	"kick":          3,
	"creatEntity":   4,
	"destoryEntity": 5,
}

func (x ClientFuncF) String() string {
	return proto1.EnumName(ClientFuncF_name, int32(x))
}
func (ClientFuncF) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type ServerFuncF int32

const (
	ServerFunc_shoot ServerFuncF = 0
)

var ServerFuncF_name = map[int32]string{
	0: "shoot",
}
var ServerFuncF_value = map[string]int32{
	"shoot": 0,
}

func (x ServerFuncF) String() string {
	return proto1.EnumName(ServerFuncF_name, int32(x))
}
func (ServerFuncF) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type ClientFunc struct {
}

func (m *ClientFunc) Reset()                    { *m = ClientFunc{} }
func (m *ClientFunc) String() string            { return proto1.CompactTextString(m) }
func (*ClientFunc) ProtoMessage()               {}
func (*ClientFunc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServerFunc struct {
}

func (m *ServerFunc) Reset()                    { *m = ServerFunc{} }
func (m *ServerFunc) String() string            { return proto1.CompactTextString(m) }
func (*ServerFunc) ProtoMessage()               {}
func (*ServerFunc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Vector3 struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (m *Vector3) Reset()                    { *m = Vector3{} }
func (m *Vector3) String() string            { return proto1.CompactTextString(m) }
func (*Vector3) ProtoMessage()               {}
func (*Vector3) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Vector3) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector3) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vector3) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

type Rotation struct {
	Yaw   float32 `protobuf:"fixed32,1,opt,name=yaw" json:"yaw,omitempty"`
	Pitch float32 `protobuf:"fixed32,2,opt,name=pitch" json:"pitch,omitempty"`
	Row   float32 `protobuf:"fixed32,3,opt,name=row" json:"row,omitempty"`
}

func (m *Rotation) Reset()                    { *m = Rotation{} }
func (m *Rotation) String() string            { return proto1.CompactTextString(m) }
func (*Rotation) ProtoMessage()               {}
func (*Rotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Rotation) GetYaw() float32 {
	if m != nil {
		return m.Yaw
	}
	return 0
}

func (m *Rotation) GetPitch() float32 {
	if m != nil {
		return m.Pitch
	}
	return 0
}

func (m *Rotation) GetRow() float32 {
	if m != nil {
		return m.Row
	}
	return 0
}

type Pos struct {
	Id       string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rotation *Rotation `protobuf:"bytes,2,opt,name=rotation" json:"rotation,omitempty"`
	Vector3  *Vector3  `protobuf:"bytes,3,opt,name=vector3" json:"vector3,omitempty"`
}

func (m *Pos) Reset()                    { *m = Pos{} }
func (m *Pos) String() string            { return proto1.CompactTextString(m) }
func (*Pos) ProtoMessage()               {}
func (*Pos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Pos) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Pos) GetRotation() *Rotation {
	if m != nil {
		return m.Rotation
	}
	return nil
}

func (m *Pos) GetVector3() *Vector3 {
	if m != nil {
		return m.Vector3
	}
	return nil
}

type PosReply struct {
	Ok    bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *PosReply) Reset()                    { *m = PosReply{} }
func (m *PosReply) String() string            { return proto1.CompactTextString(m) }
func (*PosReply) ProtoMessage()               {}
func (*PosReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PosReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PosReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Callin struct {
	Id     string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Method ServerFuncF                     `protobuf:"varint,2,opt,name=method,enum=proto.ServerFuncF" json:"method,omitempty"`
	Stamp  int64                           `protobuf:"varint,4,opt,name=stamp" json:"stamp,omitempty"`
	Param  map[string]*google_protobuf.Any `protobuf:"bytes,3,rep,name=param" json:"param,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Callin) Reset()                    { *m = Callin{} }
func (m *Callin) String() string            { return proto1.CompactTextString(m) }
func (*Callin) ProtoMessage()               {}
func (*Callin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Callin) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Callin) GetMethod() ServerFuncF {
	if m != nil {
		return m.Method
	}
	return ServerFunc_shoot
}

func (m *Callin) GetStamp() int64 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

func (m *Callin) GetParam() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Param
	}
	return nil
}

type Reply struct {
	Error string                          `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Cb    ClientFuncF                     `protobuf:"varint,2,opt,name=cb,enum=proto.ClientFuncF" json:"cb,omitempty"`
	Param map[string]*google_protobuf.Any `protobuf:"bytes,3,rep,name=param" json:"param,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	To    string                          `protobuf:"bytes,5,opt,name=To,json=to" json:"To,omitempty"`
	Stamp int64                           `protobuf:"varint,4,opt,name=stamp" json:"stamp,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto1.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Reply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Reply) GetCb() ClientFuncF {
	if m != nil {
		return m.Cb
	}
	return ClientFunc_shoot
}

func (m *Reply) GetParam() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *Reply) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Reply) GetStamp() int64 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

type ClientStart struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Stamp int64  `protobuf:"varint,2,opt,name=stamp" json:"stamp,omitempty"`
}

func (m *ClientStart) Reset()                    { *m = ClientStart{} }
func (m *ClientStart) String() string            { return proto1.CompactTextString(m) }
func (*ClientStart) ProtoMessage()               {}
func (*ClientStart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ClientStart) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientStart) GetStamp() int64 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

type User struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
	Pswd string `protobuf:"bytes,2,opt,name=pswd" json:"pswd,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto1.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPswd() string {
	if m != nil {
		return m.Pswd
	}
	return ""
}

func init() {
	proto1.RegisterType((*ClientFunc)(nil), "proto.ClientFunc")
	proto1.RegisterType((*ServerFunc)(nil), "proto.ServerFunc")
	proto1.RegisterType((*Vector3)(nil), "proto.Vector3")
	proto1.RegisterType((*Rotation)(nil), "proto.Rotation")
	proto1.RegisterType((*Pos)(nil), "proto.Pos")
	proto1.RegisterType((*PosReply)(nil), "proto.PosReply")
	proto1.RegisterType((*Callin)(nil), "proto.Callin")
	proto1.RegisterType((*Reply)(nil), "proto.Reply")
	proto1.RegisterType((*ClientStart)(nil), "proto.ClientStart")
	proto1.RegisterType((*User)(nil), "proto.User")
	proto1.RegisterEnum("proto.ClientFuncF", ClientFuncF_name, ClientFuncF_value)
	proto1.RegisterEnum("proto.ServerFuncF", ServerFuncF_name, ServerFuncF_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Packet service

type PacketClient interface {
	SyncPostion(ctx context.Context, in *Pos, opts ...grpc.CallOption) (*PosReply, error)
	CallServer(ctx context.Context, in *Callin, opts ...grpc.CallOption) (*Reply, error)
	CallClient(ctx context.Context, in *ClientStart, opts ...grpc.CallOption) (Packet_CallClientClient, error)
}

type packetClient struct {
	cc *grpc.ClientConn
}

func NewPacketClient(cc *grpc.ClientConn) PacketClient {
	return &packetClient{cc}
}

func (c *packetClient) SyncPostion(ctx context.Context, in *Pos, opts ...grpc.CallOption) (*PosReply, error) {
	out := new(PosReply)
	err := grpc.Invoke(ctx, "/proto.packet/syncPostion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packetClient) CallServer(ctx context.Context, in *Callin, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/proto.packet/callServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packetClient) CallClient(ctx context.Context, in *ClientStart, opts ...grpc.CallOption) (Packet_CallClientClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Packet_serviceDesc.Streams[0], c.cc, "/proto.packet/callClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &packetCallClientClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Packet_CallClientClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type packetCallClientClient struct {
	grpc.ClientStream
}

func (x *packetCallClientClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Packet service

type PacketServer interface {
	SyncPostion(context.Context, *Pos) (*PosReply, error)
	CallServer(context.Context, *Callin) (*Reply, error)
	CallClient(*ClientStart, Packet_CallClientServer) error
}

func RegisterPacketServer(s *grpc.Server, srv PacketServer) {
	s.RegisterService(&_Packet_serviceDesc, srv)
}

func _Packet_SyncPostion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServer).SyncPostion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.packet/SyncPostion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServer).SyncPostion(ctx, req.(*Pos))
	}
	return interceptor(ctx, in, info, handler)
}

func _Packet_CallServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Callin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServer).CallServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.packet/CallServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServer).CallServer(ctx, req.(*Callin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Packet_CallClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientStart)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PacketServer).CallClient(m, &packetCallClientServer{stream})
}

type Packet_CallClientServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type packetCallClientServer struct {
	grpc.ServerStream
}

func (x *packetCallClientServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

var _Packet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.packet",
	HandlerType: (*PacketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "syncPostion",
			Handler:    _Packet_SyncPostion_Handler,
		},
		{
			MethodName: "callServer",
			Handler:    _Packet_CallServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "callClient",
			Handler:       _Packet_CallClient_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}

func init() { proto1.RegisterFile("message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xda, 0x71, 0x9a, 0x4c, 0xda, 0x34, 0x0c, 0x95, 0xb0, 0x22, 0x0e, 0xd5, 0x72, 0x89,
	0x28, 0x58, 0x55, 0x72, 0x41, 0xdc, 0x50, 0x29, 0xc7, 0x2a, 0xda, 0x02, 0x47, 0xa4, 0x8d, 0xb3,
	0x69, 0xac, 0x38, 0x5e, 0x6b, 0x77, 0xfb, 0xe3, 0xbe, 0x08, 0x0f, 0xc7, 0x03, 0xf0, 0x1a, 0x68,
	0x7f, 0xda, 0x34, 0x6d, 0x8f, 0x9c, 0x3c, 0x33, 0xfe, 0xe6, 0x9b, 0xf9, 0xbe, 0x1d, 0xd8, 0x5f,
	0x0b, 0xad, 0xf9, 0xa5, 0xc8, 0x6a, 0x25, 0x8d, 0xc4, 0xc4, 0x7d, 0x86, 0x5d, 0x5e, 0x35, 0xbe,
	0x42, 0x7f, 0x01, 0x9c, 0x96, 0x85, 0xa8, 0xcc, 0xb7, 0xab, 0x2a, 0xa7, 0x53, 0x20, 0x0b, 0xec,
	0x42, 0xa2, 0x97, 0x52, 0x9a, 0xc1, 0x8e, 0x0d, 0x67, 0x62, 0x59, 0x98, 0x01, 0xc1, 0x5d, 0x88,
	0xe7, 0x85, 0x18, 0x44, 0xd8, 0x81, 0xd6, 0xaa, 0xc8, 0x57, 0x83, 0x18, 0x0f, 0xa0, 0x97, 0x2b,
	0xc1, 0xcd, 0x59, 0x65, 0x0a, 0xd3, 0x0c, 0x5a, 0xf8, 0x0a, 0xf6, 0xe7, 0x42, 0x1b, 0xa9, 0x9a,
	0x50, 0x4a, 0xe8, 0x5b, 0x80, 0x0b, 0xa1, 0xae, 0x85, 0x72, 0xfc, 0xfd, 0x6d, 0x7e, 0x3a, 0x81,
	0xdd, 0x9f, 0x22, 0x37, 0x52, 0x4d, 0x70, 0x0f, 0xc8, 0x6d, 0x4a, 0x8e, 0xc8, 0x28, 0x62, 0xe4,
	0xd6, 0x66, 0x4d, 0x1a, 0xf9, 0xac, 0xb1, 0xd9, 0x5d, 0x1a, 0xfb, 0xec, 0x8e, 0x7e, 0x85, 0x0e,
	0x93, 0x86, 0x9b, 0x42, 0x56, 0x38, 0x80, 0xb8, 0xe1, 0x37, 0xa1, 0xcf, 0x86, 0x78, 0x08, 0x49,
	0x5d, 0x98, 0x7c, 0x19, 0xba, 0x7d, 0x62, 0x71, 0x4a, 0xde, 0x04, 0x0e, 0x1b, 0xd2, 0x12, 0xe2,
	0xa9, 0xd4, 0xd8, 0x87, 0xa8, 0x98, 0xbb, 0xfe, 0x2e, 0x8b, 0x8a, 0x39, 0x1e, 0x43, 0x47, 0x05,
	0x72, 0xc7, 0xd0, 0x1b, 0x1f, 0x78, 0xa7, 0xb2, 0xfb, 0x99, 0xec, 0x01, 0x80, 0x23, 0xd8, 0xbd,
	0xf6, 0xeb, 0x3b, 0xe6, 0xde, 0xb8, 0x1f, 0xb0, 0x41, 0x14, 0xbb, 0xff, 0x4d, 0x4f, 0xa0, 0x33,
	0x95, 0x9a, 0x89, 0xba, 0x6c, 0xec, 0x48, 0xb9, 0x72, 0x23, 0x3b, 0x2c, 0x92, 0x2b, 0xbb, 0xb1,
	0x50, 0x4a, 0x2a, 0x37, 0xaf, 0xcb, 0x7c, 0x42, 0xff, 0x10, 0x68, 0x9f, 0xf2, 0xb2, 0x2c, 0xaa,
	0x17, 0x76, 0x6c, 0xaf, 0x85, 0x59, 0xca, 0xb9, 0xeb, 0xe8, 0x8f, 0x5f, 0x87, 0xa9, 0x1b, 0xa3,
	0xb3, 0x05, 0x0b, 0x10, 0xcb, 0xae, 0x0d, 0x5f, 0xd7, 0x69, 0xeb, 0x88, 0x8c, 0x62, 0xe6, 0x13,
	0xcc, 0x20, 0xa9, 0xb9, 0xe2, 0xeb, 0x34, 0x3e, 0x8a, 0x47, 0xbd, 0x71, 0x1a, 0x18, 0xfc, 0xc0,
	0x6c, 0x6a, 0x7f, 0x9d, 0x55, 0x46, 0x35, 0xcc, 0xc3, 0x86, 0xe7, 0x00, 0x9b, 0xa2, 0x75, 0x73,
	0x25, 0x9a, 0xb0, 0x91, 0x0d, 0xf1, 0x3d, 0x24, 0xd7, 0xbc, 0xbc, 0x12, 0xc1, 0xb3, 0xc3, 0xec,
	0x52, 0xca, 0xcb, 0x32, 0x9c, 0xdd, 0xec, 0x6a, 0x91, 0x7d, 0xa9, 0x1a, 0xe6, 0x21, 0x9f, 0xa3,
	0x4f, 0x84, 0xfe, 0x25, 0x90, 0x78, 0x37, 0x1e, 0xd4, 0x93, 0x47, 0xea, 0xf1, 0x1d, 0x44, 0xf9,
	0xec, 0x89, 0xbc, 0xcd, 0x9d, 0x66, 0x0b, 0x16, 0xe5, 0x33, 0xfc, 0xb8, 0x2d, 0xe2, 0xcd, 0xfd,
	0x43, 0x59, 0xde, 0xe7, 0x1a, 0xac, 0x8d, 0xdf, 0x65, 0x9a, 0x78, 0x1b, 0x8d, 0x7c, 0xd9, 0x99,
	0xff, 0xae, 0x74, 0x02, 0x3d, 0xbf, 0xf8, 0x85, 0xe1, 0xca, 0x3c, 0x7b, 0xcb, 0x87, 0x25, 0xa2,
	0x47, 0x4b, 0xd0, 0x0c, 0x5a, 0x3f, 0xb4, 0x50, 0x88, 0xd0, 0x3a, 0xe7, 0x6b, 0x11, 0xf0, 0xad,
	0x8a, 0xaf, 0x85, 0xad, 0xd5, 0xfa, 0x66, 0x1e, 0xae, 0xc5, 0xc5, 0xe3, 0xdf, 0x04, 0xda, 0x35,
	0xcf, 0x57, 0xc2, 0xe0, 0x07, 0xe8, 0xe9, 0xa6, 0xca, 0xa7, 0x52, 0xbb, 0x13, 0x85, 0x60, 0xca,
	0x54, 0xea, 0xe1, 0xc1, 0x26, 0x76, 0x1e, 0xd1, 0x1d, 0x3c, 0x06, 0xc8, 0x79, 0x59, 0xfa, 0xcb,
	0xc1, 0xfd, 0xad, 0x33, 0x18, 0xee, 0x3d, 0x36, 0x94, 0xee, 0xe0, 0xd8, 0x83, 0xbd, 0x1c, 0xc4,
	0xad, 0x67, 0x71, 0xea, 0x9e, 0x76, 0x9c, 0x90, 0x59, 0xdb, 0x15, 0x26, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x91, 0x68, 0x7c, 0x6a, 0x89, 0x04, 0x00, 0x00,
}
